
Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f14  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000380  0800a0b8  0800a0b8  0001a0b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a438  0800a438  00020370  2**0
                  CONTENTS
  4 .ARM          00000008  0800a438  0800a438  0001a438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a440  0800a440  00020370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a440  0800a440  0001a440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a444  0800a444  0001a444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000370  20000000  0800a448  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006368  20000370  0800a7b8  00020370  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200066d8  0800a7b8  000266d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020370  2**0
                  CONTENTS, READONLY
 12 .debug_info   00038b2a  00000000  00000000  000203a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006a10  00000000  00000000  00058eca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001df03  00000000  00000000  0005f8da  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000017c8  00000000  00000000  0007d7e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00003e50  00000000  00000000  0007efa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00007d36  00000000  00000000  00082df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0001fa5e  00000000  00000000  0008ab2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000a0e36  00000000  00000000  000aa58c  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0014b3c2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000059d8  00000000  00000000  0014b440  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000370 	.word	0x20000370
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a09c 	.word	0x0800a09c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000374 	.word	0x20000374
 80001dc:	0800a09c 	.word	0x0800a09c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b972 	b.w	8000f54 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	4688      	mov	r8, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14b      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4615      	mov	r5, r2
 8000c9a:	d967      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0720 	rsb	r7, r2, #32
 8000ca6:	fa01 f302 	lsl.w	r3, r1, r2
 8000caa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cae:	4095      	lsls	r5, r2
 8000cb0:	ea47 0803 	orr.w	r8, r7, r3
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cc0:	fa1f fc85 	uxth.w	ip, r5
 8000cc4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ccc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18eb      	adds	r3, r5, r3
 8000cd6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cda:	f080 811b 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8118 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000ce4:	3f02      	subs	r7, #2
 8000ce6:	442b      	add	r3, r5
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfc:	45a4      	cmp	ip, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	192c      	adds	r4, r5, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8107 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000d0a:	45a4      	cmp	ip, r4
 8000d0c:	f240 8104 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000d10:	3802      	subs	r0, #2
 8000d12:	442c      	add	r4, r5
 8000d14:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d18:	eba4 040c 	sub.w	r4, r4, ip
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	b11e      	cbz	r6, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c6 4300 	strd	r4, r3, [r6]
 8000d28:	4639      	mov	r1, r7
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0xbe>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80eb 	beq.w	8000f0e <__udivmoddi4+0x286>
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d3e:	4638      	mov	r0, r7
 8000d40:	4639      	mov	r1, r7
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f783 	clz	r7, r3
 8000d4a:	2f00      	cmp	r7, #0
 8000d4c:	d147      	bne.n	8000dde <__udivmoddi4+0x156>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0xd0>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80fa 	bhi.w	8000f4c <__udivmoddi4+0x2c4>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	4698      	mov	r8, r3
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d0e0      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000d66:	e9c6 4800 	strd	r4, r8, [r6]
 8000d6a:	e7dd      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000d6c:	b902      	cbnz	r2, 8000d70 <__udivmoddi4+0xe8>
 8000d6e:	deff      	udf	#255	; 0xff
 8000d70:	fab2 f282 	clz	r2, r2
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f040 808f 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d7a:	1b49      	subs	r1, r1, r5
 8000d7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d80:	fa1f f885 	uxth.w	r8, r5
 8000d84:	2701      	movs	r7, #1
 8000d86:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb08 f10c 	mul.w	r1, r8, ip
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9c:	18eb      	adds	r3, r5, r3
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4299      	cmp	r1, r3
 8000da6:	f200 80cd 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1a59      	subs	r1, r3, r1
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000db8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x14c>
 8000dc4:	192c      	adds	r4, r5, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x14a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80b6 	bhi.w	8000f3e <__udivmoddi4+0x2b6>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e79f      	b.n	8000d1e <__udivmoddi4+0x96>
 8000dde:	f1c7 0c20 	rsb	ip, r7, #32
 8000de2:	40bb      	lsls	r3, r7
 8000de4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000de8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dec:	fa01 f407 	lsl.w	r4, r1, r7
 8000df0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000df4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000df8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dfc:	4325      	orrs	r5, r4
 8000dfe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e02:	0c2c      	lsrs	r4, r5, #16
 8000e04:	fb08 3319 	mls	r3, r8, r9, r3
 8000e08:	fa1f fa8e 	uxth.w	sl, lr
 8000e0c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e10:	fb09 f40a 	mul.w	r4, r9, sl
 8000e14:	429c      	cmp	r4, r3
 8000e16:	fa02 f207 	lsl.w	r2, r2, r7
 8000e1a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1e 0303 	adds.w	r3, lr, r3
 8000e24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e28:	f080 8087 	bcs.w	8000f3a <__udivmoddi4+0x2b2>
 8000e2c:	429c      	cmp	r4, r3
 8000e2e:	f240 8084 	bls.w	8000f3a <__udivmoddi4+0x2b2>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4473      	add	r3, lr
 8000e38:	1b1b      	subs	r3, r3, r4
 8000e3a:	b2ad      	uxth	r5, r5
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3310 	mls	r3, r8, r0, r3
 8000e44:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e48:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e4c:	45a2      	cmp	sl, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1e 0404 	adds.w	r4, lr, r4
 8000e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e58:	d26b      	bcs.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5a:	45a2      	cmp	sl, r4
 8000e5c:	d969      	bls.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4474      	add	r4, lr
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6a:	eba4 040a 	sub.w	r4, r4, sl
 8000e6e:	454c      	cmp	r4, r9
 8000e70:	46c2      	mov	sl, r8
 8000e72:	464b      	mov	r3, r9
 8000e74:	d354      	bcc.n	8000f20 <__udivmoddi4+0x298>
 8000e76:	d051      	beq.n	8000f1c <__udivmoddi4+0x294>
 8000e78:	2e00      	cmp	r6, #0
 8000e7a:	d069      	beq.n	8000f50 <__udivmoddi4+0x2c8>
 8000e7c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e80:	eb64 0403 	sbc.w	r4, r4, r3
 8000e84:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e88:	40fd      	lsrs	r5, r7
 8000e8a:	40fc      	lsrs	r4, r7
 8000e8c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e90:	e9c6 5400 	strd	r5, r4, [r6]
 8000e94:	2700      	movs	r7, #0
 8000e96:	e747      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f703 	lsr.w	r7, r0, r3
 8000ea0:	4095      	lsls	r5, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eaa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eae:	4338      	orrs	r0, r7
 8000eb0:	0c01      	lsrs	r1, r0, #16
 8000eb2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eb6:	fa1f f885 	uxth.w	r8, r5
 8000eba:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ebe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec2:	fb07 f308 	mul.w	r3, r7, r8
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x256>
 8000ece:	1869      	adds	r1, r5, r1
 8000ed0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ed4:	d22f      	bcs.n	8000f36 <__udivmoddi4+0x2ae>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	d92d      	bls.n	8000f36 <__udivmoddi4+0x2ae>
 8000eda:	3f02      	subs	r7, #2
 8000edc:	4429      	add	r1, r5
 8000ede:	1acb      	subs	r3, r1, r3
 8000ee0:	b281      	uxth	r1, r0
 8000ee2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eee:	fb00 f308 	mul.w	r3, r0, r8
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x27e>
 8000ef6:	1869      	adds	r1, r5, r1
 8000ef8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efc:	d217      	bcs.n	8000f2e <__udivmoddi4+0x2a6>
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d915      	bls.n	8000f2e <__udivmoddi4+0x2a6>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4429      	add	r1, r5
 8000f06:	1ac9      	subs	r1, r1, r3
 8000f08:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f0c:	e73b      	b.n	8000d86 <__udivmoddi4+0xfe>
 8000f0e:	4637      	mov	r7, r6
 8000f10:	4630      	mov	r0, r6
 8000f12:	e709      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f14:	4607      	mov	r7, r0
 8000f16:	e6e7      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e6fb      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f1c:	4541      	cmp	r1, r8
 8000f1e:	d2ab      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f20:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f24:	eb69 020e 	sbc.w	r2, r9, lr
 8000f28:	3801      	subs	r0, #1
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	e7a4      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f2e:	4660      	mov	r0, ip
 8000f30:	e7e9      	b.n	8000f06 <__udivmoddi4+0x27e>
 8000f32:	4618      	mov	r0, r3
 8000f34:	e795      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f36:	4667      	mov	r7, ip
 8000f38:	e7d1      	b.n	8000ede <__udivmoddi4+0x256>
 8000f3a:	4681      	mov	r9, r0
 8000f3c:	e77c      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f3e:	3802      	subs	r0, #2
 8000f40:	442c      	add	r4, r5
 8000f42:	e747      	b.n	8000dd4 <__udivmoddi4+0x14c>
 8000f44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f48:	442b      	add	r3, r5
 8000f4a:	e72f      	b.n	8000dac <__udivmoddi4+0x124>
 8000f4c:	4638      	mov	r0, r7
 8000f4e:	e708      	b.n	8000d62 <__udivmoddi4+0xda>
 8000f50:	4637      	mov	r7, r6
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0xa0>

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8000f58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f5c:	b083      	sub	sp, #12
	/* init code for USB_DEVICE */
	MX_USB_DEVICE_Init();
 8000f5e:	f006 fad1 	bl	8007504 <MX_USB_DEVICE_Init>
		int diff = target - currentAngle;
		if (abs(diff) < 5) {
			setMotors(0, 0);
			return;
		}
		direction = 180 - (diff + 360) % 360;
 8000f62:	4e31      	ldr	r6, [pc, #196]	; (8001028 <StartDefaultTask+0xd0>)
		MessageLength = snprintf(DataToSend, sizeof(DataToSend),
 8000f64:	4c31      	ldr	r4, [pc, #196]	; (800102c <StartDefaultTask+0xd4>)
 8000f66:	4d32      	ldr	r5, [pc, #200]	; (8001030 <StartDefaultTask+0xd8>)
 8000f68:	e010      	b.n	8000f8c <StartDefaultTask+0x34>
				"Dir: %i Diff: %i Abs: %i\n\r", direction, diff, currentAngle);
		CDC_Transmit_FS(DataToSend, MessageLength);
		if (diff > 0) {
			setMotors(speed, -speed); //right
 8000f6a:	f000 f9f1 	bl	8001350 <setMotors>
			MessageLength = snprintf(DataToSend, sizeof(DataToSend),
 8000f6e:	4b31      	ldr	r3, [pc, #196]	; (8001034 <StartDefaultTask+0xdc>)
 8000f70:	cb03      	ldmia	r3!, {r0, r1}
 8000f72:	2307      	movs	r3, #7
 8000f74:	6020      	str	r0, [r4, #0]
					"RIGHT\n\r");
			osDelay(10);
 8000f76:	200a      	movs	r0, #10
			MessageLength = snprintf(DataToSend, sizeof(DataToSend),
 8000f78:	6061      	str	r1, [r4, #4]
 8000f7a:	f889 3000 	strb.w	r3, [r9]
			osDelay(10);
 8000f7e:	f004 fba7 	bl	80056d0 <osDelay>
			setMotors(-speed, speed); //left
			MessageLength = snprintf(DataToSend, sizeof(DataToSend),
					"LEFT\n\r");
			osDelay(10);
		}
		CDC_Transmit_FS(DataToSend, MessageLength);
 8000f82:	f899 1000 	ldrb.w	r1, [r9]
 8000f86:	4620      	mov	r0, r4
 8000f88:	f006 fb2a 	bl	80075e0 <CDC_Transmit_FS>
		int currentAngle = read_heading();
 8000f8c:	f000 f95c 	bl	8001248 <read_heading>
 8000f90:	eefd 7ac0 	vcvt.s32.f32	s15, s0
		direction = 180 - (diff + 360) % 360;
 8000f94:	f44f 7cb4 	mov.w	ip, #360	; 0x168
		int currentAngle = read_heading();
 8000f98:	ee17 7a90 	vmov	r7, s15
		direction = 180 - (diff + 360) % 360;
 8000f9c:	f5c7 7107 	rsb	r1, r7, #540	; 0x21c
 8000fa0:	fb86 0301 	smull	r0, r3, r6, r1
 8000fa4:	1858      	adds	r0, r3, r1
 8000fa6:	17cb      	asrs	r3, r1, #31
 8000fa8:	ebc3 2320 	rsb	r3, r3, r0, asr #8
		int diff = target - currentAngle;
 8000fac:	f1c7 08b4 	rsb	r8, r7, #180	; 0xb4
		direction = 180 - (diff + 360) % 360;
 8000fb0:	fb0c 1313 	mls	r3, ip, r3, r1
		if (abs(diff) < 5) {
 8000fb4:	f108 0c04 	add.w	ip, r8, #4
 8000fb8:	f1bc 0f08 	cmp.w	ip, #8
		MessageLength = snprintf(DataToSend, sizeof(DataToSend),
 8000fbc:	462a      	mov	r2, r5
 8000fbe:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 8000fc2:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8000fc6:	4819      	ldr	r0, [pc, #100]	; (800102c <StartDefaultTask+0xd4>)
 8000fc8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800103c <StartDefaultTask+0xe4>
		if (abs(diff) < 5) {
 8000fcc:	d924      	bls.n	8001018 <StartDefaultTask+0xc0>
		MessageLength = snprintf(DataToSend, sizeof(DataToSend),
 8000fce:	e9cd 8700 	strd	r8, r7, [sp]
 8000fd2:	f007 faad 	bl	8008530 <sniprintf>
 8000fd6:	4603      	mov	r3, r0
		CDC_Transmit_FS(DataToSend, MessageLength);
 8000fd8:	b281      	uxth	r1, r0
 8000fda:	4814      	ldr	r0, [pc, #80]	; (800102c <StartDefaultTask+0xd4>)
		MessageLength = snprintf(DataToSend, sizeof(DataToSend),
 8000fdc:	f889 3000 	strb.w	r3, [r9]
		CDC_Transmit_FS(DataToSend, MessageLength);
 8000fe0:	f006 fafe 	bl	80075e0 <CDC_Transmit_FS>
		if (diff > 0) {
 8000fe4:	f1b8 0f00 	cmp.w	r8, #0
			setMotors(speed, -speed); //right
 8000fe8:	f06f 014f 	mvn.w	r1, #79	; 0x4f
 8000fec:	f04f 0050 	mov.w	r0, #80	; 0x50
		if (diff > 0) {
 8000ff0:	dcbb      	bgt.n	8000f6a <StartDefaultTask+0x12>
			setMotors(-speed, speed); //left
 8000ff2:	2150      	movs	r1, #80	; 0x50
 8000ff4:	f06f 004f 	mvn.w	r0, #79	; 0x4f
 8000ff8:	f000 f9aa 	bl	8001350 <setMotors>
			MessageLength = snprintf(DataToSend, sizeof(DataToSend),
 8000ffc:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <StartDefaultTask+0xe0>)
 8000ffe:	6818      	ldr	r0, [r3, #0]
 8001000:	8899      	ldrh	r1, [r3, #4]
 8001002:	799a      	ldrb	r2, [r3, #6]
 8001004:	6020      	str	r0, [r4, #0]
 8001006:	2306      	movs	r3, #6
			osDelay(10);
 8001008:	200a      	movs	r0, #10
			MessageLength = snprintf(DataToSend, sizeof(DataToSend),
 800100a:	80a1      	strh	r1, [r4, #4]
 800100c:	71a2      	strb	r2, [r4, #6]
 800100e:	f889 3000 	strb.w	r3, [r9]
			osDelay(10);
 8001012:	f004 fb5d 	bl	80056d0 <osDelay>
 8001016:	e7b4      	b.n	8000f82 <StartDefaultTask+0x2a>
			setMotors(0, 0);
 8001018:	2100      	movs	r1, #0
 800101a:	4608      	mov	r0, r1
		//direction=-diff;

	}
	osDelay(2000);
	/* USER CODE END 5 */
}
 800101c:	b003      	add	sp, #12
 800101e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			setMotors(0, 0);
 8001022:	f000 b995 	b.w	8001350 <setMotors>
 8001026:	bf00      	nop
 8001028:	b60b60b7 	.word	0xb60b60b7
 800102c:	20004cfc 	.word	0x20004cfc
 8001030:	0800a0b8 	.word	0x0800a0b8
 8001034:	0800a0d4 	.word	0x0800a0d4
 8001038:	0800a0dc 	.word	0x0800a0dc
 800103c:	2000038c 	.word	0x2000038c

08001040 <SystemClock_Config>:
void SystemClock_Config(void) {
 8001040:	b530      	push	{r4, r5, lr}
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001042:	2400      	movs	r4, #0
void SystemClock_Config(void) {
 8001044:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001046:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 800104a:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800104e:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001052:	e9cd 4406 	strd	r4, r4, [sp, #24]
	__HAL_RCC_PWR_CLK_ENABLE();
 8001056:	4a1d      	ldr	r2, [pc, #116]	; (80010cc <SystemClock_Config+0x8c>)
 8001058:	9401      	str	r4, [sp, #4]
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800105a:	9403      	str	r4, [sp, #12]
	__HAL_RCC_PWR_CLK_ENABLE();
 800105c:	6c11      	ldr	r1, [r2, #64]	; 0x40
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800105e:	4b1c      	ldr	r3, [pc, #112]	; (80010d0 <SystemClock_Config+0x90>)
	__HAL_RCC_PWR_CLK_ENABLE();
 8001060:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001064:	6411      	str	r1, [r2, #64]	; 0x40
 8001066:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001068:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800106c:	9201      	str	r2, [sp, #4]
 800106e:	9a01      	ldr	r2, [sp, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001070:	9402      	str	r4, [sp, #8]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001080:	9302      	str	r3, [sp, #8]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001082:	2301      	movs	r3, #1
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001084:	2502      	movs	r5, #2
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001086:	9308      	str	r3, [sp, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001088:	f44f 3180 	mov.w	r1, #65536	; 0x10000
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800108c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	RCC_OscInitStruct.PLL.PLLM = 7;
 8001090:	2307      	movs	r3, #7
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001092:	9802      	ldr	r0, [sp, #8]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001094:	9109      	str	r1, [sp, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001096:	e9cd 520e 	strd	r5, r2, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLN = 336;
 800109a:	f44f 71a8 	mov.w	r1, #336	; 0x150
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800109e:	2204      	movs	r2, #4
	RCC_OscInitStruct.PLL.PLLM = 7;
 80010a0:	9310      	str	r3, [sp, #64]	; 0x40
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80010a2:	a808      	add	r0, sp, #32
	RCC_OscInitStruct.PLL.PLLQ = 8;
 80010a4:	2308      	movs	r3, #8
 80010a6:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLN = 336;
 80010aa:	9111      	str	r1, [sp, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80010ac:	f001 faf8 	bl	80026a0 <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80010b0:	220f      	movs	r2, #15
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 80010b6:	a803      	add	r0, sp, #12
 80010b8:	2103      	movs	r1, #3
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ba:	e9cd 5404 	strd	r5, r4, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010be:	9407      	str	r4, [sp, #28]
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80010c0:	9203      	str	r2, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010c2:	9306      	str	r3, [sp, #24]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 80010c4:	f001 fd00 	bl	8002ac8 <HAL_RCC_ClockConfig>
}
 80010c8:	b015      	add	sp, #84	; 0x54
 80010ca:	bd30      	pop	{r4, r5, pc}
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40007000 	.word	0x40007000

080010d4 <main>:
int main(void) {
 80010d4:	b500      	push	{lr}
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80010d6:	2400      	movs	r4, #0
int main(void) {
 80010d8:	b093      	sub	sp, #76	; 0x4c
	HAL_Init();
 80010da:	f000 fc47 	bl	800196c <HAL_Init>
	SystemClock_Config();
 80010de:	f7ff ffaf 	bl	8001040 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80010e2:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 80010e6:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80010ea:	4b4a      	ldr	r3, [pc, #296]	; (8001214 <main+0x140>)
 80010ec:	9401      	str	r4, [sp, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80010ee:	940f      	str	r4, [sp, #60]	; 0x3c
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80010f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	htim3.Instance = TIM3;
 80010f2:	4d49      	ldr	r5, [pc, #292]	; (8001218 <main+0x144>)
	HAL_GPIO_WritePin(GPIOE, A1_Pin | A2_Pin | B1_Pin | B2_Pin, GPIO_PIN_RESET);
 80010f4:	4849      	ldr	r0, [pc, #292]	; (800121c <main+0x148>)
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80010f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010fa:	631a      	str	r2, [r3, #48]	; 0x30
 80010fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010fe:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001102:	9201      	str	r2, [sp, #4]
 8001104:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001106:	9402      	str	r4, [sp, #8]
 8001108:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800110a:	f042 0202 	orr.w	r2, r2, #2
 800110e:	631a      	str	r2, [r3, #48]	; 0x30
 8001110:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001112:	f002 0202 	and.w	r2, r2, #2
 8001116:	9202      	str	r2, [sp, #8]
 8001118:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800111a:	9403      	str	r4, [sp, #12]
 800111c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800111e:	f042 0210 	orr.w	r2, r2, #16
 8001122:	631a      	str	r2, [r3, #48]	; 0x30
 8001124:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001126:	f002 0210 	and.w	r2, r2, #16
 800112a:	9203      	str	r2, [sp, #12]
 800112c:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800112e:	9404      	str	r4, [sp, #16]
 8001130:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001132:	f042 0201 	orr.w	r2, r2, #1
 8001136:	631a      	str	r2, [r3, #48]	; 0x30
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	f003 0301 	and.w	r3, r3, #1
	HAL_GPIO_WritePin(GPIOE, A1_Pin | A2_Pin | B1_Pin | B2_Pin, GPIO_PIN_RESET);
 800113e:	4622      	mov	r2, r4
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001140:	9304      	str	r3, [sp, #16]
	HAL_GPIO_WritePin(GPIOE, A1_Pin | A2_Pin | B1_Pin | B2_Pin, GPIO_PIN_RESET);
 8001142:	f44f 61f0 	mov.w	r1, #1920	; 0x780
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001146:	2601      	movs	r6, #1
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001148:	9b04      	ldr	r3, [sp, #16]
	HAL_GPIO_WritePin(GPIOE, A1_Pin | A2_Pin | B1_Pin | B2_Pin, GPIO_PIN_RESET);
 800114a:	f000 fd79 	bl	8001c40 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = A1_Pin | A2_Pin | B1_Pin | B2_Pin;
 800114e:	f44f 63f0 	mov.w	r3, #1920	; 0x780
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001152:	a90b      	add	r1, sp, #44	; 0x2c
 8001154:	4831      	ldr	r0, [pc, #196]	; (800121c <main+0x148>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001156:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115a:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800115e:	f000 fc99 	bl	8001a94 <HAL_GPIO_Init>
	htim3.Init.Prescaler = 20;
 8001162:	2214      	movs	r2, #20
	htim3.Instance = TIM3;
 8001164:	492e      	ldr	r1, [pc, #184]	; (8001220 <main+0x14c>)
	htim3.Init.Prescaler = 20;
 8001166:	606a      	str	r2, [r5, #4]
	htim3.Init.Period = 99;
 8001168:	2363      	movs	r3, #99	; 0x63
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 800116a:	4628      	mov	r0, r5
	htim3.Instance = TIM3;
 800116c:	6029      	str	r1, [r5, #0]
	htim3.Init.Period = 99;
 800116e:	60eb      	str	r3, [r5, #12]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001170:	9407      	str	r4, [sp, #28]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001172:	9405      	str	r4, [sp, #20]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001174:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8001178:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 800117c:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
 8001180:	9411      	str	r4, [sp, #68]	; 0x44
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001182:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8001186:	940a      	str	r4, [sp, #40]	; 0x28
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001188:	9406      	str	r4, [sp, #24]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800118a:	60ac      	str	r4, [r5, #8]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800118c:	612c      	str	r4, [r5, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800118e:	61ac      	str	r4, [r5, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001190:	f001 fd80 	bl	8002c94 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001194:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001198:	a907      	add	r1, sp, #28
 800119a:	4628      	mov	r0, r5
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800119c:	9307      	str	r3, [sp, #28]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 800119e:	f001 ff6b 	bl	8003078 <HAL_TIM_ConfigClockSource>
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 80011a2:	4628      	mov	r0, r5
 80011a4:	f001 fde6 	bl	8002d74 <HAL_TIM_PWM_Init>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80011a8:	a905      	add	r1, sp, #20
 80011aa:	4628      	mov	r0, r5
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ac:	e9cd 4405 	strd	r4, r4, [sp, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80011b0:	f002 f8ba 	bl	8003328 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011b4:	2360      	movs	r3, #96	; 0x60
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3)
 80011b6:	a90b      	add	r1, sp, #44	; 0x2c
 80011b8:	2208      	movs	r2, #8
 80011ba:	4628      	mov	r0, r5
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011bc:	930b      	str	r3, [sp, #44]	; 0x2c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011be:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011c2:	940f      	str	r4, [sp, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3)
 80011c4:	f001 fe5a 	bl	8002e7c <HAL_TIM_PWM_ConfigChannel>
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4)
 80011c8:	220c      	movs	r2, #12
 80011ca:	a90b      	add	r1, sp, #44	; 0x2c
 80011cc:	4628      	mov	r0, r5
 80011ce:	f001 fe55 	bl	8002e7c <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_MspPostInit(&htim3);
 80011d2:	4628      	mov	r0, r5
 80011d4:	f000 f95a 	bl	800148c <HAL_TIM_MspPostInit>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80011d8:	210c      	movs	r1, #12
 80011da:	4628      	mov	r0, r5
 80011dc:	f001 fe28 	bl	8002e30 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80011e0:	2108      	movs	r1, #8
 80011e2:	4628      	mov	r0, r5
 80011e4:	f001 fe24 	bl	8002e30 <HAL_TIM_PWM_Start>
	BSP_LED_Init(LED3);
 80011e8:	4630      	mov	r0, r6
 80011ea:	f000 faf3 	bl	80017d4 <BSP_LED_Init>
	BSP_LED_Off(LED3);
 80011ee:	4630      	mov	r0, r6
 80011f0:	f000 fb4a 	bl	8001888 <BSP_LED_Off>
	BSP_COMPASS_Init(0);
 80011f4:	4620      	mov	r0, r4
 80011f6:	f000 fba1 	bl	800193c <BSP_COMPASS_Init>
	osKernelInitialize();
 80011fa:	f004 f9dd 	bl	80055b8 <osKernelInitialize>
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 80011fe:	4621      	mov	r1, r4
 8001200:	4a08      	ldr	r2, [pc, #32]	; (8001224 <main+0x150>)
 8001202:	4809      	ldr	r0, [pc, #36]	; (8001228 <main+0x154>)
 8001204:	f004 fa16 	bl	8005634 <osThreadNew>
 8001208:	4b08      	ldr	r3, [pc, #32]	; (800122c <main+0x158>)
 800120a:	6018      	str	r0, [r3, #0]
	osKernelStart();
 800120c:	f004 f9f0 	bl	80055f0 <osKernelStart>
 8001210:	e7fe      	b.n	8001210 <main+0x13c>
 8001212:	bf00      	nop
 8001214:	40023800 	.word	0x40023800
 8001218:	20004d38 	.word	0x20004d38
 800121c:	40021000 	.word	0x40021000
 8001220:	40000400 	.word	0x40000400
 8001224:	0800a0e4 	.word	0x0800a0e4
 8001228:	08000f59 	.word	0x08000f59
 800122c:	20004cf8 	.word	0x20004cf8

08001230 <HAL_TIM_PeriodElapsedCallback>:
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8001230:	6802      	ldr	r2, [r0, #0]
 8001232:	4b03      	ldr	r3, [pc, #12]	; (8001240 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001234:	429a      	cmp	r2, r3
 8001236:	d000      	beq.n	800123a <HAL_TIM_PeriodElapsedCallback+0xa>
		HAL_IncTick();
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001238:	4770      	bx	lr
		HAL_IncTick();
 800123a:	f000 bbb1 	b.w	80019a0 <HAL_IncTick>
 800123e:	bf00      	nop
 8001240:	40010000 	.word	0x40010000

08001244 <Error_Handler>:
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop

08001248 <read_heading>:

/* Private function prototypes -----------------------------------------------*/

/* Private functions ---------------------------------------------------------*/

float read_heading(void) {
 8001248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800124c:	ed2d 8b02 	vpush	{d8}
			tries++;
		}
		BSP_COMPASS_GetXYZ(&reads);
		float heading = atan2(reads[1], reads[0]);
		if (heading < 0) {
			heading += 2 * M_PI;
 8001250:	f20f 09f4 	addw	r9, pc, #244	; 0xf4
 8001254:	e9d9 8900 	ldrd	r8, r9, [r9]
	int tries=0;
 8001258:	2400      	movs	r4, #0
	float sum = 0;
 800125a:	ed9f 8a39 	vldr	s16, [pc, #228]	; 8001340 <read_heading+0xf8>
float read_heading(void) {
 800125e:	b086      	sub	sp, #24
		float reads[3] = { };
 8001260:	4625      	mov	r5, r4
float read_heading(void) {
 8001262:	f04f 0a0c 	mov.w	sl, #12
		float reads[3] = { };
 8001266:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800126a:	9505      	str	r5, [sp, #20]
		while ((0x00000001 & LSM303DLHC_MagGetDataStatus()) == 0) {
 800126c:	e002      	b.n	8001274 <read_heading+0x2c>
			if(tries > 5) {
 800126e:	2c05      	cmp	r4, #5
 8001270:	dc4e      	bgt.n	8001310 <read_heading+0xc8>
			tries++;
 8001272:	3401      	adds	r4, #1
		while ((0x00000001 & LSM303DLHC_MagGetDataStatus()) == 0) {
 8001274:	f000 fa02 	bl	800167c <LSM303DLHC_MagGetDataStatus>
 8001278:	07c3      	lsls	r3, r0, #31
 800127a:	d5f8      	bpl.n	800126e <read_heading+0x26>
		BSP_COMPASS_GetXYZ(&reads);
 800127c:	a803      	add	r0, sp, #12
 800127e:	f000 fb73 	bl	8001968 <BSP_COMPASS_GetXYZ>
		float heading = atan2(reads[1], reads[0]);
 8001282:	9803      	ldr	r0, [sp, #12]
 8001284:	f7ff f968 	bl	8000558 <__aeabi_f2d>
 8001288:	e9cd 0100 	strd	r0, r1, [sp]
 800128c:	9804      	ldr	r0, [sp, #16]
 800128e:	f7ff f963 	bl	8000558 <__aeabi_f2d>
 8001292:	ed9d 1b00 	vldr	d1, [sp]
 8001296:	ec41 0b10 	vmov	d0, r0, r1
 800129a:	f008 fc73 	bl	8009b84 <atan2>
 800129e:	ec51 0b10 	vmov	r0, r1, d0
 80012a2:	f7ff fc89 	bl	8000bb8 <__aeabi_d2f>
 80012a6:	ee08 0a90 	vmov	s17, r0
 80012aa:	f7ff f955 	bl	8000558 <__aeabi_f2d>
		if (heading < 0) {
 80012ae:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80012b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b6:	4606      	mov	r6, r0
 80012b8:	460f      	mov	r7, r1
 80012ba:	d509      	bpl.n	80012d0 <read_heading+0x88>
			heading += 2 * M_PI;
 80012bc:	4642      	mov	r2, r8
 80012be:	464b      	mov	r3, r9
 80012c0:	f7fe ffec 	bl	800029c <__adddf3>
 80012c4:	f7ff fc78 	bl	8000bb8 <__aeabi_d2f>
 80012c8:	f7ff f946 	bl	8000558 <__aeabi_f2d>
 80012cc:	4606      	mov	r6, r0
 80012ce:	460f      	mov	r7, r1
		}

		if (heading > 2 * M_PI) {
 80012d0:	4642      	mov	r2, r8
 80012d2:	464b      	mov	r3, r9
 80012d4:	4630      	mov	r0, r6
 80012d6:	4639      	mov	r1, r7
 80012d8:	f7ff fc26 	bl	8000b28 <__aeabi_dcmpgt>
 80012dc:	b9f8      	cbnz	r0, 800131e <read_heading+0xd6>
			heading -= 2 * M_PI;
		}
		heading *= 180 / M_PI;
 80012de:	4630      	mov	r0, r6
 80012e0:	4639      	mov	r1, r7
 80012e2:	a315      	add	r3, pc, #84	; (adr r3, 8001338 <read_heading+0xf0>)
 80012e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e8:	f7ff f98e 	bl	8000608 <__aeabi_dmul>
 80012ec:	f7ff fc64 	bl	8000bb8 <__aeabi_d2f>
		sum += heading;
 80012f0:	ee07 0a90 	vmov	s15, r0
	for (int i = 0; i < SAMPLES_NUM_COMPASS; i++) {
 80012f4:	f1ba 0a01 	subs.w	sl, sl, #1
		sum += heading;
 80012f8:	ee38 8a27 	vadd.f32	s16, s16, s15
	for (int i = 0; i < SAMPLES_NUM_COMPASS; i++) {
 80012fc:	d1b3      	bne.n	8001266 <read_heading+0x1e>
	}
	return sum / SAMPLES_NUM_COMPASS;
 80012fe:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8001344 <read_heading+0xfc>
 8001302:	ee28 0a00 	vmul.f32	s0, s16, s0
}
 8001306:	b006      	add	sp, #24
 8001308:	ecbd 8b02 	vpop	{d8}
 800130c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return -1;
 8001310:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
 8001314:	b006      	add	sp, #24
 8001316:	ecbd 8b02 	vpop	{d8}
 800131a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			heading -= 2 * M_PI;
 800131e:	4642      	mov	r2, r8
 8001320:	464b      	mov	r3, r9
 8001322:	4630      	mov	r0, r6
 8001324:	4639      	mov	r1, r7
 8001326:	f7fe ffb7 	bl	8000298 <__aeabi_dsub>
 800132a:	f7ff fc45 	bl	8000bb8 <__aeabi_d2f>
		heading *= 180 / M_PI;
 800132e:	f7ff f913 	bl	8000558 <__aeabi_f2d>
 8001332:	e7d6      	b.n	80012e2 <read_heading+0x9a>
 8001334:	f3af 8000 	nop.w
 8001338:	1a63c1f8 	.word	0x1a63c1f8
 800133c:	404ca5dc 	.word	0x404ca5dc
 8001340:	00000000 	.word	0x00000000
 8001344:	3daaaaab 	.word	0x3daaaaab
 8001348:	54442d18 	.word	0x54442d18
 800134c:	401921fb 	.word	0x401921fb

08001350 <setMotors>:
void setMotorsSpeed(uint8_t speedA, uint8_t speedB) {
	setMotorSpeedA(speedA);
	setMotorSpeedB(speedB);
}

void setMotors(int8_t valueA, int8_t valueB) {
 8001350:	b538      	push	{r3, r4, r5, lr}
	if (valueA < 0) {
 8001352:	1e05      	subs	r5, r0, #0
void setMotors(int8_t valueA, int8_t valueB) {
 8001354:	460c      	mov	r4, r1
	if (valueA < 0) {
 8001356:	db55      	blt.n	8001404 <setMotors+0xb4>
		setMotorDirA(Left);
	} else if (valueA > 0) {
 8001358:	d03a      	beq.n	80013d0 <setMotors+0x80>
		HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, GPIO_PIN_SET);
 800135a:	2201      	movs	r2, #1
 800135c:	2180      	movs	r1, #128	; 0x80
 800135e:	482f      	ldr	r0, [pc, #188]	; (800141c <setMotors+0xcc>)
 8001360:	f000 fc6e 	bl	8001c40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, GPIO_PIN_RESET);
 8001364:	2200      	movs	r2, #0
 8001366:	f44f 7180 	mov.w	r1, #256	; 0x100
 800136a:	482c      	ldr	r0, [pc, #176]	; (800141c <setMotors+0xcc>)
 800136c:	f000 fc68 	bl	8001c40 <HAL_GPIO_WritePin>
		setMotorDirA(Right);
	} else {
		setMotorDirA(Stop);
	}
	if (valueB < 0) {
 8001370:	2c00      	cmp	r4, #0
 8001372:	db3a      	blt.n	80013ea <setMotors+0x9a>
		setMotorDirB(Left);
	} else if (valueB > 0) {
 8001374:	d01f      	beq.n	80013b6 <setMotors+0x66>
		HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, GPIO_PIN_SET);
 8001376:	2201      	movs	r2, #1
 8001378:	f44f 7100 	mov.w	r1, #512	; 0x200
 800137c:	4827      	ldr	r0, [pc, #156]	; (800141c <setMotors+0xcc>)
 800137e:	f000 fc5f 	bl	8001c40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port, B2_Pin, GPIO_PIN_RESET);
 8001382:	2200      	movs	r2, #0
 8001384:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001388:	4824      	ldr	r0, [pc, #144]	; (800141c <setMotors+0xcc>)
 800138a:	f000 fc59 	bl	8001c40 <HAL_GPIO_WritePin>
	TIM3->CCR3 = keepInRange(speedA, 0, 100);
 800138e:	ea85 70e5 	eor.w	r0, r5, r5, asr #31
 8001392:	eba0 70e5 	sub.w	r0, r0, r5, asr #31
 8001396:	2264      	movs	r2, #100	; 0x64
 8001398:	2100      	movs	r1, #0
 800139a:	f000 f927 	bl	80015ec <keepInRange>
 800139e:	4d20      	ldr	r5, [pc, #128]	; (8001420 <setMotors+0xd0>)
 80013a0:	63e8      	str	r0, [r5, #60]	; 0x3c
	TIM3->CCR4 = keepInRange(speedB, 0, 100);
 80013a2:	ea84 70e4 	eor.w	r0, r4, r4, asr #31
 80013a6:	eba0 70e4 	sub.w	r0, r0, r4, asr #31
 80013aa:	2264      	movs	r2, #100	; 0x64
 80013ac:	2100      	movs	r1, #0
 80013ae:	f000 f91d 	bl	80015ec <keepInRange>
 80013b2:	6428      	str	r0, [r5, #64]	; 0x40
		setMotorDirB(Right);
	} else {
		setMotorDirB(Stop);
	}
	setMotorsSpeed(abs(valueA), abs(valueB));
}
 80013b4:	bd38      	pop	{r3, r4, r5, pc}
		HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, GPIO_PIN_RESET);
 80013b6:	4622      	mov	r2, r4
 80013b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013bc:	4817      	ldr	r0, [pc, #92]	; (800141c <setMotors+0xcc>)
 80013be:	f000 fc3f 	bl	8001c40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port, B2_Pin, GPIO_PIN_RESET);
 80013c2:	4622      	mov	r2, r4
 80013c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013c8:	4814      	ldr	r0, [pc, #80]	; (800141c <setMotors+0xcc>)
 80013ca:	f000 fc39 	bl	8001c40 <HAL_GPIO_WritePin>
 80013ce:	e7de      	b.n	800138e <setMotors+0x3e>
		HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, GPIO_PIN_RESET);
 80013d0:	462a      	mov	r2, r5
 80013d2:	2180      	movs	r1, #128	; 0x80
 80013d4:	4811      	ldr	r0, [pc, #68]	; (800141c <setMotors+0xcc>)
 80013d6:	f000 fc33 	bl	8001c40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, GPIO_PIN_RESET);
 80013da:	462a      	mov	r2, r5
 80013dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013e0:	480e      	ldr	r0, [pc, #56]	; (800141c <setMotors+0xcc>)
 80013e2:	f000 fc2d 	bl	8001c40 <HAL_GPIO_WritePin>
	if (valueB < 0) {
 80013e6:	2c00      	cmp	r4, #0
 80013e8:	dac4      	bge.n	8001374 <setMotors+0x24>
		HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, GPIO_PIN_RESET);
 80013ea:	2200      	movs	r2, #0
 80013ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013f0:	480a      	ldr	r0, [pc, #40]	; (800141c <setMotors+0xcc>)
 80013f2:	f000 fc25 	bl	8001c40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port, B2_Pin, GPIO_PIN_SET);
 80013f6:	2201      	movs	r2, #1
 80013f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013fc:	4807      	ldr	r0, [pc, #28]	; (800141c <setMotors+0xcc>)
 80013fe:	f000 fc1f 	bl	8001c40 <HAL_GPIO_WritePin>
 8001402:	e7c4      	b.n	800138e <setMotors+0x3e>
		HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, GPIO_PIN_RESET);
 8001404:	2200      	movs	r2, #0
 8001406:	2180      	movs	r1, #128	; 0x80
 8001408:	4804      	ldr	r0, [pc, #16]	; (800141c <setMotors+0xcc>)
 800140a:	f000 fc19 	bl	8001c40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, GPIO_PIN_SET);
 800140e:	2201      	movs	r2, #1
 8001410:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001414:	4801      	ldr	r0, [pc, #4]	; (800141c <setMotors+0xcc>)
 8001416:	f000 fc13 	bl	8001c40 <HAL_GPIO_WritePin>
 800141a:	e7a9      	b.n	8001370 <setMotors+0x20>
 800141c:	40021000 	.word	0x40021000
 8001420:	40000400 	.word	0x40000400

08001424 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001424:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001426:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <HAL_MspInit+0x34>)
 8001428:	2100      	movs	r1, #0
 800142a:	9100      	str	r1, [sp, #0]
 800142c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800142e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001432:	645a      	str	r2, [r3, #68]	; 0x44
 8001434:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001436:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800143a:	9200      	str	r2, [sp, #0]
 800143c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800143e:	9101      	str	r1, [sp, #4]
 8001440:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001442:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001446:	641a      	str	r2, [r3, #64]	; 0x40
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144e:	9301      	str	r3, [sp, #4]
 8001450:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001452:	b002      	add	sp, #8
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	40023800 	.word	0x40023800

0800145c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM3)
 800145c:	6802      	ldr	r2, [r0, #0]
 800145e:	4b0a      	ldr	r3, [pc, #40]	; (8001488 <HAL_TIM_Base_MspInit+0x2c>)
 8001460:	429a      	cmp	r2, r3
 8001462:	d000      	beq.n	8001466 <HAL_TIM_Base_MspInit+0xa>
 8001464:	4770      	bx	lr
{
 8001466:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001468:	f503 330d 	add.w	r3, r3, #144384	; 0x23400
 800146c:	2200      	movs	r2, #0
 800146e:	9201      	str	r2, [sp, #4]
 8001470:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001472:	f042 0202 	orr.w	r2, r2, #2
 8001476:	641a      	str	r2, [r3, #64]	; 0x40
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	9301      	str	r3, [sp, #4]
 8001480:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001482:	b002      	add	sp, #8
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	40000400 	.word	0x40000400

0800148c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800148c:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM3)
 800148e:	6801      	ldr	r1, [r0, #0]
 8001490:	4a11      	ldr	r2, [pc, #68]	; (80014d8 <HAL_TIM_MspPostInit+0x4c>)
{
 8001492:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001494:	2300      	movs	r3, #0
  if(htim->Instance==TIM3)
 8001496:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800149c:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80014a0:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM3)
 80014a2:	d001      	beq.n	80014a8 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80014a4:	b006      	add	sp, #24
 80014a6:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a8:	f502 320d 	add.w	r2, r2, #144384	; 0x23400
 80014ac:	9300      	str	r3, [sp, #0]
 80014ae:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b0:	480a      	ldr	r0, [pc, #40]	; (80014dc <HAL_TIM_MspPostInit+0x50>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b2:	f043 0302 	orr.w	r3, r3, #2
 80014b6:	6313      	str	r3, [r2, #48]	; 0x30
 80014b8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014c0:	2203      	movs	r2, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c4:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c6:	9c00      	ldr	r4, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014c8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ca:	e9cd 2301 	strd	r2, r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ce:	f000 fae1 	bl	8001a94 <HAL_GPIO_Init>
}
 80014d2:	b006      	add	sp, #24
 80014d4:	bd10      	pop	{r4, pc}
 80014d6:	bf00      	nop
 80014d8:	40000400 	.word	0x40000400
 80014dc:	40020400 	.word	0x40020400

080014e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e0:	b530      	push	{r4, r5, lr}
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80014e2:	4601      	mov	r1, r0
{
 80014e4:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2019      	movs	r0, #25
 80014ea:	f000 fa8f 	bl	8001a0c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80014ee:	2019      	movs	r0, #25
 80014f0:	f000 fac2 	bl	8001a78 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80014f4:	2500      	movs	r5, #0
 80014f6:	4b15      	ldr	r3, [pc, #84]	; (800154c <HAL_InitTick+0x6c>)
 80014f8:	9502      	str	r5, [sp, #8]
 80014fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80014fc:	4c14      	ldr	r4, [pc, #80]	; (8001550 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 80014fe:	f042 0201 	orr.w	r2, r2, #1
 8001502:	645a      	str	r2, [r3, #68]	; 0x44
 8001504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001506:	f003 0301 	and.w	r3, r3, #1
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800150a:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM1_CLK_ENABLE();
 800150c:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800150e:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001510:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001512:	f001 fb9d 	bl	8002c50 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001516:	f001 fb8b 	bl	8002c30 <HAL_RCC_GetPCLK2Freq>
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800151a:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <HAL_InitTick+0x74>)
  htim1.Instance = TIM1;
 800151c:	490e      	ldr	r1, [pc, #56]	; (8001558 <HAL_InitTick+0x78>)
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 800151e:	6125      	str	r5, [r4, #16]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001520:	fba3 2300 	umull	r2, r3, r3, r0
 8001524:	0c9b      	lsrs	r3, r3, #18
 8001526:	3b01      	subs	r3, #1
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001528:	f240 32e7 	movw	r2, #999	; 0x3e7
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800152c:	4620      	mov	r0, r4
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800152e:	e9c4 3501 	strd	r3, r5, [r4, #4]
  htim1.Instance = TIM1;
 8001532:	6021      	str	r1, [r4, #0]
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001534:	60e2      	str	r2, [r4, #12]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001536:	f001 fbad 	bl	8002c94 <HAL_TIM_Base_Init>
 800153a:	b110      	cbz	r0, 8001542 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }

  /* Return function status */
  return HAL_ERROR;
 800153c:	2001      	movs	r0, #1
}
 800153e:	b009      	add	sp, #36	; 0x24
 8001540:	bd30      	pop	{r4, r5, pc}
    return HAL_TIM_Base_Start_IT(&htim1);
 8001542:	4620      	mov	r0, r4
 8001544:	f001 fc04 	bl	8002d50 <HAL_TIM_Base_Start_IT>
}
 8001548:	b009      	add	sp, #36	; 0x24
 800154a:	bd30      	pop	{r4, r5, pc}
 800154c:	40023800 	.word	0x40023800
 8001550:	20004d78 	.word	0x20004d78
 8001554:	431bde83 	.word	0x431bde83
 8001558:	40010000 	.word	0x40010000

0800155c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop

08001560 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001560:	e7fe      	b.n	8001560 <HardFault_Handler>
 8001562:	bf00      	nop

08001564 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001564:	e7fe      	b.n	8001564 <MemManage_Handler>
 8001566:	bf00      	nop

08001568 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001568:	e7fe      	b.n	8001568 <BusFault_Handler>
 800156a:	bf00      	nop

0800156c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800156c:	e7fe      	b.n	800156c <UsageFault_Handler>
 800156e:	bf00      	nop

08001570 <DebugMon_Handler>:
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop

08001574 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001574:	4801      	ldr	r0, [pc, #4]	; (800157c <TIM1_UP_TIM10_IRQHandler+0x8>)
 8001576:	f001 be2d 	b.w	80031d4 <HAL_TIM_IRQHandler>
 800157a:	bf00      	nop
 800157c:	20004d78 	.word	0x20004d78

08001580 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001580:	4801      	ldr	r0, [pc, #4]	; (8001588 <OTG_FS_IRQHandler+0x8>)
 8001582:	f000 bc0f 	b.w	8001da4 <HAL_PCD_IRQHandler>
 8001586:	bf00      	nop
 8001588:	200062cc 	.word	0x200062cc

0800158c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800158c:	490c      	ldr	r1, [pc, #48]	; (80015c0 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800158e:	4a0d      	ldr	r2, [pc, #52]	; (80015c4 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8001590:	680b      	ldr	r3, [r1, #0]
{
 8001592:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001594:	4c0c      	ldr	r4, [pc, #48]	; (80015c8 <_sbrk+0x3c>)
 8001596:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8001598:	b12b      	cbz	r3, 80015a6 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800159a:	4418      	add	r0, r3
 800159c:	4290      	cmp	r0, r2
 800159e:	d807      	bhi.n	80015b0 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80015a0:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80015a6:	4b09      	ldr	r3, [pc, #36]	; (80015cc <_sbrk+0x40>)
 80015a8:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80015aa:	4418      	add	r0, r3
 80015ac:	4290      	cmp	r0, r2
 80015ae:	d9f7      	bls.n	80015a0 <_sbrk+0x14>
    errno = ENOMEM;
 80015b0:	f006 fa5c 	bl	8007a6c <__errno>
 80015b4:	230c      	movs	r3, #12
 80015b6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80015b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015bc:	4618      	mov	r0, r3
 80015be:	bd10      	pop	{r4, pc}
 80015c0:	20000390 	.word	0x20000390
 80015c4:	20020000 	.word	0x20020000
 80015c8:	00000400 	.word	0x00000400
 80015cc:	200066d8 	.word	0x200066d8

080015d0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015d0:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <SystemInit+0x18>)
 80015d2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015d6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015da:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80015de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015e2:	6099      	str	r1, [r3, #8]
#endif
}
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <keepInRange>:
	}
	return temp;
}

int keepInRange(int value, int min, int max) {
	if (value < min) {
 80015ec:	4288      	cmp	r0, r1
 80015ee:	db03      	blt.n	80015f8 <keepInRange+0xc>
 80015f0:	4290      	cmp	r0, r2
 80015f2:	bfa8      	it	ge
 80015f4:	4610      	movge	r0, r2
 80015f6:	4770      	bx	lr
 80015f8:	4608      	mov	r0, r1
		value = min;
	} else if (value > max) {
		value = max;
	}
	return value;
}
 80015fa:	4770      	bx	lr

080015fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80015fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001634 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001600:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001602:	e003      	b.n	800160c <LoopCopyDataInit>

08001604 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001604:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001606:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001608:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800160a:	3104      	adds	r1, #4

0800160c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800160c:	480b      	ldr	r0, [pc, #44]	; (800163c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800160e:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001610:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001612:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001614:	d3f6      	bcc.n	8001604 <CopyDataInit>
  ldr  r2, =_sbss
 8001616:	4a0b      	ldr	r2, [pc, #44]	; (8001644 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001618:	e002      	b.n	8001620 <LoopFillZerobss>

0800161a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800161a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800161c:	f842 3b04 	str.w	r3, [r2], #4

08001620 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001620:	4b09      	ldr	r3, [pc, #36]	; (8001648 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001622:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001624:	d3f9      	bcc.n	800161a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001626:	f7ff ffd3 	bl	80015d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800162a:	f006 fa25 	bl	8007a78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800162e:	f7ff fd51 	bl	80010d4 <main>
  bx  lr    
 8001632:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001634:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001638:	0800a448 	.word	0x0800a448
  ldr  r0, =_sdata
 800163c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001640:	20000370 	.word	0x20000370
  ldr  r2, =_sbss
 8001644:	20000370 	.word	0x20000370
  ldr  r3, = _ebss
 8001648:	200066d8 	.word	0x200066d8

0800164c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800164c:	e7fe      	b.n	800164c <ADC_IRQHandler>
	...

08001650 <LSM303DLHC_MagInit>:
 * @brief  Set LSM303DLHC Mag Initialization.
 * @param  LSM303DLHC_InitStruct: pointer to a LSM303DLHC_MagInitTypeDef structure
 *         that contains the configuration setting for the LSM303DLHC.
 * @retval None
 */
void LSM303DLHC_MagInit(LSM303DLHCMag_InitTypeDef *LSM303DLHC_InitStruct) {
 8001650:	b538      	push	{r3, r4, r5, lr}
	uint8_t cra_regm = 0x00, crb_regm = 0x00, mr_regm = 0x00;

	/* Configure MEMS: temp and Data rate */
	cra_regm |= (uint8_t) (LSM303DLHC_InitStruct->Temperature_Sensor
 8001652:	7843      	ldrb	r3, [r0, #1]
 8001654:	7802      	ldrb	r2, [r0, #0]
			| LSM303DLHC_InitStruct->MagOutput_DataRate);

	/* Configure MEMS: full Scale */
	crb_regm |= (uint8_t) (LSM303DLHC_InitStruct->MagFull_Scale);
 8001656:	78c5      	ldrb	r5, [r0, #3]

	/* Configure MEMS: working mode */
	mr_regm |= (uint8_t) (LSM303DLHC_InitStruct->Working_Mode);
 8001658:	7884      	ldrb	r4, [r0, #2]

	/* Write value to Mag MEMS CRA_REG regsister */
	COMPASSACCELERO_IO_Write(MAG_I2C_ADDRESS, LSM303DLHC_CRA_REG_M, cra_regm);
 800165a:	431a      	orrs	r2, r3
 800165c:	2100      	movs	r1, #0
 800165e:	203c      	movs	r0, #60	; 0x3c
 8001660:	f000 f920 	bl	80018a4 <COMPASSACCELERO_IO_Write>

	/* Write value to Mag MEMS CRB_REG regsister */
	COMPASSACCELERO_IO_Write(MAG_I2C_ADDRESS, LSM303DLHC_CRB_REG_M, crb_regm);
 8001664:	462a      	mov	r2, r5
 8001666:	2101      	movs	r1, #1
 8001668:	203c      	movs	r0, #60	; 0x3c
 800166a:	f000 f91b 	bl	80018a4 <COMPASSACCELERO_IO_Write>

	/* Write value to Mag MEMS MR_REG regsister */
	COMPASSACCELERO_IO_Write(MAG_I2C_ADDRESS, LSM303DLHC_MR_REG_M, mr_regm);
 800166e:	4622      	mov	r2, r4
 8001670:	2102      	movs	r1, #2
 8001672:	203c      	movs	r0, #60	; 0x3c
}
 8001674:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	COMPASSACCELERO_IO_Write(MAG_I2C_ADDRESS, LSM303DLHC_MR_REG_M, mr_regm);
 8001678:	f000 b914 	b.w	80018a4 <COMPASSACCELERO_IO_Write>

0800167c <LSM303DLHC_MagGetDataStatus>:
 */
uint8_t LSM303DLHC_MagGetDataStatus(void) {
	uint8_t tmpreg;

	/* Read Mag STATUS register */
	tmpreg = COMPASSACCELERO_IO_Read(MAG_I2C_ADDRESS, LSM303DLHC_SR_REG_M);
 800167c:	2109      	movs	r1, #9
 800167e:	203c      	movs	r0, #60	; 0x3c
 8001680:	f000 b934 	b.w	80018ec <COMPASSACCELERO_IO_Read>

08001684 <LSM303DLHC_Mag_Read>:

	return tmpreg;
}

void LSM303DLHC_Mag_Read(float *convertedData_Mag) {
 8001684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint8_t XYZ[6] = { 0 };
	XYZ[0] = COMPASSACCELERO_IO_Read(MAG_I2C_ADDRESS, LSM303DLHC_OUT_X_H_M);
 8001688:	2103      	movs	r1, #3
void LSM303DLHC_Mag_Read(float *convertedData_Mag) {
 800168a:	4607      	mov	r7, r0
	XYZ[0] = COMPASSACCELERO_IO_Read(MAG_I2C_ADDRESS, LSM303DLHC_OUT_X_H_M);
 800168c:	203c      	movs	r0, #60	; 0x3c
 800168e:	f000 f92d 	bl	80018ec <COMPASSACCELERO_IO_Read>
	XYZ[1] = COMPASSACCELERO_IO_Read(MAG_I2C_ADDRESS, LSM303DLHC_OUT_X_L_M);
 8001692:	2104      	movs	r1, #4
	XYZ[0] = COMPASSACCELERO_IO_Read(MAG_I2C_ADDRESS, LSM303DLHC_OUT_X_H_M);
 8001694:	4681      	mov	r9, r0
	XYZ[1] = COMPASSACCELERO_IO_Read(MAG_I2C_ADDRESS, LSM303DLHC_OUT_X_L_M);
 8001696:	203c      	movs	r0, #60	; 0x3c
 8001698:	f000 f928 	bl	80018ec <COMPASSACCELERO_IO_Read>
	XYZ[2] = COMPASSACCELERO_IO_Read(MAG_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_M);
 800169c:	2107      	movs	r1, #7
	XYZ[1] = COMPASSACCELERO_IO_Read(MAG_I2C_ADDRESS, LSM303DLHC_OUT_X_L_M);
 800169e:	4606      	mov	r6, r0
	XYZ[2] = COMPASSACCELERO_IO_Read(MAG_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_M);
 80016a0:	203c      	movs	r0, #60	; 0x3c
 80016a2:	f000 f923 	bl	80018ec <COMPASSACCELERO_IO_Read>
	XYZ[3] = COMPASSACCELERO_IO_Read(MAG_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_M);
 80016a6:	2108      	movs	r1, #8
	XYZ[2] = COMPASSACCELERO_IO_Read(MAG_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_M);
 80016a8:	4680      	mov	r8, r0
	XYZ[3] = COMPASSACCELERO_IO_Read(MAG_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_M);
 80016aa:	203c      	movs	r0, #60	; 0x3c
 80016ac:	f000 f91e 	bl	80018ec <COMPASSACCELERO_IO_Read>
	XYZ[4] = COMPASSACCELERO_IO_Read(MAG_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_M);
 80016b0:	2105      	movs	r1, #5
	XYZ[3] = COMPASSACCELERO_IO_Read(MAG_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_M);
 80016b2:	4605      	mov	r5, r0
	XYZ[4] = COMPASSACCELERO_IO_Read(MAG_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_M);
 80016b4:	203c      	movs	r0, #60	; 0x3c
 80016b6:	f000 f919 	bl	80018ec <COMPASSACCELERO_IO_Read>
			(float) ((int16_t) ((((uint16_t) XYZ[0]) << 8) | XYZ[1])) / LSM303DLHC_M_SENSITIVITY_XY_2_5Ga;
	convertedData_Mag[1] =
			(float) ((int16_t) (((uint16_t) XYZ[2] << 8) | XYZ[3])) / LSM303DLHC_M_SENSITIVITY_XY_2_5Ga;
	convertedData_Mag[2] =
			(float) ((int16_t) (((uint16_t) XYZ[4] << 8) | XYZ[5])) / LSM303DLHC_M_SENSITIVITY_Z_2_5Ga;*/
	convertedData_Mag[0] = (float) (int16_t) ((XYZ[0] << 8) | XYZ[1]) / LSM303DLHC_M_SENSITIVITY_XY_2_5Ga;
 80016ba:	ea46 2609 	orr.w	r6, r6, r9, lsl #8
	XYZ[4] = COMPASSACCELERO_IO_Read(MAG_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_M);
 80016be:	4604      	mov	r4, r0
	XYZ[5] = COMPASSACCELERO_IO_Read(MAG_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_M);
 80016c0:	2106      	movs	r1, #6
 80016c2:	203c      	movs	r0, #60	; 0x3c
 80016c4:	f000 f912 	bl	80018ec <COMPASSACCELERO_IO_Read>
	convertedData_Mag[0] = (float) (int16_t) ((XYZ[0] << 8) | XYZ[1]) / LSM303DLHC_M_SENSITIVITY_XY_2_5Ga;
 80016c8:	b236      	sxth	r6, r6
 80016ca:	ee07 6a90 	vmov	s15, r6
	convertedData_Mag[1] = (float) (int16_t) ((XYZ[2] << 8) | XYZ[3]) / LSM303DLHC_M_SENSITIVITY_XY_2_5Ga;
 80016ce:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 80016d2:	b22d      	sxth	r5, r5
	convertedData_Mag[0] = (float) (int16_t) ((XYZ[0] << 8) | XYZ[1]) / LSM303DLHC_M_SENSITIVITY_XY_2_5Ga;
 80016d4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
	convertedData_Mag[2] = (float) (int16_t) ((XYZ[4] << 8) | XYZ[5]) / LSM303DLHC_M_SENSITIVITY_Z_2_5Ga;;
 80016d8:	ea40 2404 	orr.w	r4, r0, r4, lsl #8
	convertedData_Mag[1] = (float) (int16_t) ((XYZ[2] << 8) | XYZ[3]) / LSM303DLHC_M_SENSITIVITY_XY_2_5Ga;
 80016dc:	ee07 5a90 	vmov	s15, r5
	convertedData_Mag[2] = (float) (int16_t) ((XYZ[4] << 8) | XYZ[5]) / LSM303DLHC_M_SENSITIVITY_Z_2_5Ga;;
 80016e0:	b224      	sxth	r4, r4
	convertedData_Mag[1] = (float) (int16_t) ((XYZ[2] << 8) | XYZ[3]) / LSM303DLHC_M_SENSITIVITY_XY_2_5Ga;
 80016e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	convertedData_Mag[2] = (float) (int16_t) ((XYZ[4] << 8) | XYZ[5]) / LSM303DLHC_M_SENSITIVITY_Z_2_5Ga;;
 80016e6:	ee07 4a90 	vmov	s15, r4
	convertedData_Mag[0] = (float) (int16_t) ((XYZ[0] << 8) | XYZ[1]) / LSM303DLHC_M_SENSITIVITY_XY_2_5Ga;
 80016ea:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 8001714 <LSM303DLHC_Mag_Read+0x90>
	convertedData_Mag[2] = (float) (int16_t) ((XYZ[4] << 8) | XYZ[5]) / LSM303DLHC_M_SENSITIVITY_Z_2_5Ga;;
 80016ee:	eddf 5a0a 	vldr	s11, [pc, #40]	; 8001718 <LSM303DLHC_Mag_Read+0x94>
 80016f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	convertedData_Mag[0] = (float) (int16_t) ((XYZ[0] << 8) | XYZ[1]) / LSM303DLHC_M_SENSITIVITY_XY_2_5Ga;
 80016f6:	ee66 6a86 	vmul.f32	s13, s13, s12
	convertedData_Mag[1] = (float) (int16_t) ((XYZ[2] << 8) | XYZ[3]) / LSM303DLHC_M_SENSITIVITY_XY_2_5Ga;
 80016fa:	ee27 7a06 	vmul.f32	s14, s14, s12
	convertedData_Mag[2] = (float) (int16_t) ((XYZ[4] << 8) | XYZ[5]) / LSM303DLHC_M_SENSITIVITY_Z_2_5Ga;;
 80016fe:	ee67 7aa5 	vmul.f32	s15, s15, s11
	convertedData_Mag[0] = (float) (int16_t) ((XYZ[0] << 8) | XYZ[1]) / LSM303DLHC_M_SENSITIVITY_XY_2_5Ga;
 8001702:	edc7 6a00 	vstr	s13, [r7]
	convertedData_Mag[1] = (float) (int16_t) ((XYZ[2] << 8) | XYZ[3]) / LSM303DLHC_M_SENSITIVITY_XY_2_5Ga;
 8001706:	ed87 7a01 	vstr	s14, [r7, #4]
	convertedData_Mag[2] = (float) (int16_t) ((XYZ[4] << 8) | XYZ[5]) / LSM303DLHC_M_SENSITIVITY_Z_2_5Ga;;
 800170a:	edc7 7a02 	vstr	s15, [r7, #8]

}
 800170e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001712:	bf00      	nop
 8001714:	3ac3a13e 	.word	0x3ac3a13e
 8001718:	3ada740e 	.word	0x3ada740e

0800171c <I2Cx_Init.part.4>:
/******************************* I2C Routines *********************************/

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
 800171c:	b570      	push	{r4, r5, r6, lr}
 800171e:	b088      	sub	sp, #32
{
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 8001720:	4c27      	ldr	r4, [pc, #156]	; (80017c0 <I2Cx_Init.part.4+0xa4>)
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the I2C peripheral */
  DISCOVERY_I2Cx_CLOCK_ENABLE();
 8001722:	4e28      	ldr	r6, [pc, #160]	; (80017c4 <I2Cx_Init.part.4+0xa8>)
    I2cHandle.Instance = DISCOVERY_I2Cx;
 8001724:	4b28      	ldr	r3, [pc, #160]	; (80017c8 <I2Cx_Init.part.4+0xac>)
 8001726:	6023      	str	r3, [r4, #0]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001728:	2500      	movs	r5, #0
  DISCOVERY_I2Cx_CLOCK_ENABLE();
 800172a:	9501      	str	r5, [sp, #4]
 800172c:	6c33      	ldr	r3, [r6, #64]	; 0x40
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800172e:	60a5      	str	r5, [r4, #8]
  DISCOVERY_I2Cx_CLOCK_ENABLE();
 8001730:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001734:	6433      	str	r3, [r6, #64]	; 0x40
 8001736:	6c33      	ldr	r3, [r6, #64]	; 0x40
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8001738:	6165      	str	r5, [r4, #20]
  DISCOVERY_I2Cx_CLOCK_ENABLE();
 800173a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800173e:	9301      	str	r3, [sp, #4]
 8001740:	9b01      	ldr	r3, [sp, #4]

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 8001742:	9502      	str	r5, [sp, #8]
 8001744:	6b33      	ldr	r3, [r6, #48]	; 0x30
    I2cHandle.Init.OwnAddress2 = 0x00;
 8001746:	61a5      	str	r5, [r4, #24]
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 8001748:	f043 0302 	orr.w	r3, r3, #2
 800174c:	6333      	str	r3, [r6, #48]	; 0x30
 800174e:	6b33      	ldr	r3, [r6, #48]	; 0x30
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 8001750:	4a1e      	ldr	r2, [pc, #120]	; (80017cc <I2Cx_Init.part.4+0xb0>)
 8001752:	6062      	str	r2, [r4, #4]
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	9302      	str	r3, [sp, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800175a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800175e:	6123      	str	r3, [r4, #16]
    I2cHandle.Init.OwnAddress1 =  0x43;
 8001760:	2143      	movs	r1, #67	; 0x43

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN;
 8001762:	f44f 7210 	mov.w	r2, #576	; 0x240
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8001766:	2312      	movs	r3, #18
    I2cHandle.Init.OwnAddress1 =  0x43;
 8001768:	60e1      	str	r1, [r4, #12]
  GPIO_InitStructure.Pin = DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN;
 800176a:	9203      	str	r2, [sp, #12]
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 800176c:	9902      	ldr	r1, [sp, #8]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 800176e:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001770:	2202      	movs	r2, #2
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 8001772:	2304      	movs	r3, #4
  
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8001774:	a903      	add	r1, sp, #12
 8001776:	4816      	ldr	r0, [pc, #88]	; (80017d0 <I2Cx_Init.part.4+0xb4>)
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001778:	9206      	str	r2, [sp, #24]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 800177a:	9307      	str	r3, [sp, #28]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 800177c:	61e5      	str	r5, [r4, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;	
 800177e:	6225      	str	r5, [r4, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001780:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8001782:	f000 f987 	bl	8001a94 <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001786:	6a33      	ldr	r3, [r6, #32]
 8001788:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800178c:	6233      	str	r3, [r6, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800178e:	6a33      	ldr	r3, [r6, #32]
 8001790:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001794:	6233      	str	r3, [r6, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001796:	462a      	mov	r2, r5
 8001798:	210f      	movs	r1, #15
 800179a:	201f      	movs	r0, #31
 800179c:	f000 f936 	bl	8001a0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80017a0:	201f      	movs	r0, #31
 80017a2:	f000 f969 	bl	8001a78 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80017a6:	462a      	mov	r2, r5
 80017a8:	210f      	movs	r1, #15
 80017aa:	2020      	movs	r0, #32
 80017ac:	f000 f92e 	bl	8001a0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn); 
 80017b0:	2020      	movs	r0, #32
 80017b2:	f000 f961 	bl	8001a78 <HAL_NVIC_EnableIRQ>
    HAL_I2C_Init(&I2cHandle);
 80017b6:	4620      	mov	r0, r4
 80017b8:	f002 fd90 	bl	80042dc <HAL_I2C_Init>
}
 80017bc:	b008      	add	sp, #32
 80017be:	bd70      	pop	{r4, r5, r6, pc}
 80017c0:	20000394 	.word	0x20000394
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40005400 	.word	0x40005400
 80017cc:	000186a0 	.word	0x000186a0
 80017d0:	40020400 	.word	0x40020400

080017d4 <BSP_LED_Init>:
{
 80017d4:	b570      	push	{r4, r5, r6, lr}
  LEDx_GPIO_CLK_ENABLE(Led);
 80017d6:	4604      	mov	r4, r0
{
 80017d8:	b08a      	sub	sp, #40	; 0x28
  LEDx_GPIO_CLK_ENABLE(Led);
 80017da:	b1e0      	cbz	r0, 8001816 <BSP_LED_Init+0x42>
 80017dc:	2801      	cmp	r0, #1
 80017de:	d026      	beq.n	800182e <BSP_LED_Init+0x5a>
 80017e0:	2802      	cmp	r0, #2
 80017e2:	d03e      	beq.n	8001862 <BSP_LED_Init+0x8e>
 80017e4:	2803      	cmp	r0, #3
 80017e6:	d02f      	beq.n	8001848 <BSP_LED_Init+0x74>
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80017e8:	4b24      	ldr	r3, [pc, #144]	; (800187c <BSP_LED_Init+0xa8>)
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80017ea:	4d25      	ldr	r5, [pc, #148]	; (8001880 <BSP_LED_Init+0xac>)
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80017ec:	f833 6014 	ldrh.w	r6, [r3, r4, lsl #1]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80017f0:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80017f4:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f6:	2301      	movs	r3, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80017f8:	2202      	movs	r2, #2
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80017fa:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017fc:	e9cd 3306 	strd	r3, r3, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001800:	9208      	str	r2, [sp, #32]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001802:	f000 f947 	bl	8001a94 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001806:	4631      	mov	r1, r6
 8001808:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800180c:	2200      	movs	r2, #0
 800180e:	f000 fa17 	bl	8001c40 <HAL_GPIO_WritePin>
}
 8001812:	b00a      	add	sp, #40	; 0x28
 8001814:	bd70      	pop	{r4, r5, r6, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 8001816:	4b1b      	ldr	r3, [pc, #108]	; (8001884 <BSP_LED_Init+0xb0>)
 8001818:	9001      	str	r0, [sp, #4]
 800181a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800181c:	f042 0208 	orr.w	r2, r2, #8
 8001820:	631a      	str	r2, [r3, #48]	; 0x30
 8001822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001824:	f003 0308 	and.w	r3, r3, #8
 8001828:	9301      	str	r3, [sp, #4]
 800182a:	9b01      	ldr	r3, [sp, #4]
 800182c:	e7dc      	b.n	80017e8 <BSP_LED_Init+0x14>
 800182e:	4b15      	ldr	r3, [pc, #84]	; (8001884 <BSP_LED_Init+0xb0>)
 8001830:	2200      	movs	r2, #0
 8001832:	9202      	str	r2, [sp, #8]
 8001834:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001836:	f042 0208 	orr.w	r2, r2, #8
 800183a:	631a      	str	r2, [r3, #48]	; 0x30
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	f003 0308 	and.w	r3, r3, #8
 8001842:	9302      	str	r3, [sp, #8]
 8001844:	9b02      	ldr	r3, [sp, #8]
 8001846:	e7cf      	b.n	80017e8 <BSP_LED_Init+0x14>
 8001848:	4b0e      	ldr	r3, [pc, #56]	; (8001884 <BSP_LED_Init+0xb0>)
 800184a:	2200      	movs	r2, #0
 800184c:	9204      	str	r2, [sp, #16]
 800184e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001850:	f042 0208 	orr.w	r2, r2, #8
 8001854:	631a      	str	r2, [r3, #48]	; 0x30
 8001856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001858:	f003 0308 	and.w	r3, r3, #8
 800185c:	9304      	str	r3, [sp, #16]
 800185e:	9b04      	ldr	r3, [sp, #16]
 8001860:	e7c2      	b.n	80017e8 <BSP_LED_Init+0x14>
 8001862:	4b08      	ldr	r3, [pc, #32]	; (8001884 <BSP_LED_Init+0xb0>)
 8001864:	2200      	movs	r2, #0
 8001866:	9203      	str	r2, [sp, #12]
 8001868:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800186a:	f042 0208 	orr.w	r2, r2, #8
 800186e:	631a      	str	r2, [r3, #48]	; 0x30
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	f003 0308 	and.w	r3, r3, #8
 8001876:	9303      	str	r3, [sp, #12]
 8001878:	9b03      	ldr	r3, [sp, #12]
 800187a:	e7b5      	b.n	80017e8 <BSP_LED_Init+0x14>
 800187c:	0800a12c 	.word	0x0800a12c
 8001880:	20000004 	.word	0x20000004
 8001884:	40023800 	.word	0x40023800

08001888 <BSP_LED_Off>:
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001888:	4a04      	ldr	r2, [pc, #16]	; (800189c <BSP_LED_Off+0x14>)
 800188a:	4b05      	ldr	r3, [pc, #20]	; (80018a0 <BSP_LED_Off+0x18>)
 800188c:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
 8001890:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001894:	2200      	movs	r2, #0
 8001896:	f000 b9d3 	b.w	8001c40 <HAL_GPIO_WritePin>
 800189a:	bf00      	nop
 800189c:	0800a12c 	.word	0x0800a12c
 80018a0:	20000004 	.word	0x20000004

080018a4 <COMPASSACCELERO_IO_Write>:
  * @param  DeviceAddr: the slave address to be programmed
  * @param  RegisterAddr: the COMPASS / ACCELERO register to be written
  * @param  Value: Data to be written
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 80018a4:	b510      	push	{r4, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	ab06      	add	r3, sp, #24
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 80018aa:	4c0e      	ldr	r4, [pc, #56]	; (80018e4 <COMPASSACCELERO_IO_Write+0x40>)
 80018ac:	f803 2d01 	strb.w	r2, [r3, #-1]!
 80018b0:	6824      	ldr	r4, [r4, #0]
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	2301      	movs	r3, #1
 80018b6:	460a      	mov	r2, r1
 80018b8:	9402      	str	r4, [sp, #8]
 80018ba:	4601      	mov	r1, r0
 80018bc:	9301      	str	r3, [sp, #4]
 80018be:	480a      	ldr	r0, [pc, #40]	; (80018e8 <COMPASSACCELERO_IO_Write+0x44>)
 80018c0:	f002 fde8 	bl	8004494 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 80018c4:	b908      	cbnz	r0, 80018ca <COMPASSACCELERO_IO_Write+0x26>
  /* Call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
}
 80018c6:	b006      	add	sp, #24
 80018c8:	bd10      	pop	{r4, pc}
  HAL_I2C_DeInit(&I2cHandle);
 80018ca:	4807      	ldr	r0, [pc, #28]	; (80018e8 <COMPASSACCELERO_IO_Write+0x44>)
 80018cc:	f002 fdc8 	bl	8004460 <HAL_I2C_DeInit>
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80018d0:	4805      	ldr	r0, [pc, #20]	; (80018e8 <COMPASSACCELERO_IO_Write+0x44>)
 80018d2:	f003 f857 	bl	8004984 <HAL_I2C_GetState>
 80018d6:	2800      	cmp	r0, #0
 80018d8:	d1f5      	bne.n	80018c6 <COMPASSACCELERO_IO_Write+0x22>
 80018da:	f7ff ff1f 	bl	800171c <I2Cx_Init.part.4>
}
 80018de:	b006      	add	sp, #24
 80018e0:	bd10      	pop	{r4, pc}
 80018e2:	bf00      	nop
 80018e4:	20000014 	.word	0x20000014
 80018e8:	20000394 	.word	0x20000394

080018ec <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr: the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr: the COMPASS / ACCELERO internal address register to read from
  * @retval COMPASS / ACCELERO register value
  */
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 80018ec:	b510      	push	{r4, lr}
 80018ee:	b086      	sub	sp, #24
  uint8_t value = 0;
 80018f0:	ab06      	add	r3, sp, #24
 80018f2:	2400      	movs	r4, #0
 80018f4:	f803 4d01 	strb.w	r4, [r3, #-1]!
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 80018f8:	4a0e      	ldr	r2, [pc, #56]	; (8001934 <COMPASSACCELERO_IO_Read+0x48>)
 80018fa:	6814      	ldr	r4, [r2, #0]
 80018fc:	9300      	str	r3, [sp, #0]
 80018fe:	2301      	movs	r3, #1
 8001900:	460a      	mov	r2, r1
 8001902:	9402      	str	r4, [sp, #8]
 8001904:	4601      	mov	r1, r0
 8001906:	9301      	str	r3, [sp, #4]
 8001908:	480b      	ldr	r0, [pc, #44]	; (8001938 <COMPASSACCELERO_IO_Read+0x4c>)
 800190a:	f002 feb3 	bl	8004674 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 800190e:	b918      	cbnz	r0, 8001918 <COMPASSACCELERO_IO_Read+0x2c>
  /* Call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
}
 8001910:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001914:	b006      	add	sp, #24
 8001916:	bd10      	pop	{r4, pc}
  HAL_I2C_DeInit(&I2cHandle);
 8001918:	4807      	ldr	r0, [pc, #28]	; (8001938 <COMPASSACCELERO_IO_Read+0x4c>)
 800191a:	f002 fda1 	bl	8004460 <HAL_I2C_DeInit>
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 800191e:	4806      	ldr	r0, [pc, #24]	; (8001938 <COMPASSACCELERO_IO_Read+0x4c>)
 8001920:	f003 f830 	bl	8004984 <HAL_I2C_GetState>
 8001924:	2800      	cmp	r0, #0
 8001926:	d1f3      	bne.n	8001910 <COMPASSACCELERO_IO_Read+0x24>
 8001928:	f7ff fef8 	bl	800171c <I2Cx_Init.part.4>
}
 800192c:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001930:	b006      	add	sp, #24
 8001932:	bd10      	pop	{r4, pc}
 8001934:	20000014 	.word	0x20000014
 8001938:	20000394 	.word	0x20000394

0800193c <BSP_COMPASS_Init>:
			pDataXYZ[1] = -SwitchXY;
		}
	}
}

void BSP_COMPASS_Init(uint8_t temp_enable) {
 800193c:	b510      	push	{r4, lr}

	LSM303DLHCMag_InitTypeDef init;
	if (temp_enable == 0) {
 800193e:	2800      	cmp	r0, #0
void BSP_COMPASS_Init(uint8_t temp_enable) {
 8001940:	b082      	sub	sp, #8
		init.Temperature_Sensor = LSM303DLHC_TEMPSENSOR_DISABLE;
	} else {
		init.Temperature_Sensor = LSM303DLHC_TEMPSENSOR_ENABLE;
 8001942:	bf0c      	ite	eq
 8001944:	2400      	moveq	r4, #0
 8001946:	2480      	movne	r4, #128	; 0x80
	}
	init.MagOutput_DataRate = LSM303DLHC_ODR_30_HZ;
 8001948:	2114      	movs	r1, #20
	init.Working_Mode = LSM303DLHC_CONTINUOS_CONVERSION;
 800194a:	2200      	movs	r2, #0
	init.MagFull_Scale = LSM303DLHC_FS_2_5_GA;
 800194c:	2360      	movs	r3, #96	; 0x60

	LSM303DLHC_MagInit(&init);
 800194e:	a801      	add	r0, sp, #4
 8001950:	f88d 4004 	strb.w	r4, [sp, #4]
	init.MagOutput_DataRate = LSM303DLHC_ODR_30_HZ;
 8001954:	f88d 1005 	strb.w	r1, [sp, #5]
	init.Working_Mode = LSM303DLHC_CONTINUOS_CONVERSION;
 8001958:	f88d 2006 	strb.w	r2, [sp, #6]
	init.MagFull_Scale = LSM303DLHC_FS_2_5_GA;
 800195c:	f88d 3007 	strb.w	r3, [sp, #7]
	LSM303DLHC_MagInit(&init);
 8001960:	f7ff fe76 	bl	8001650 <LSM303DLHC_MagInit>
}
 8001964:	b002      	add	sp, #8
 8001966:	bd10      	pop	{r4, pc}

08001968 <BSP_COMPASS_GetXYZ>:

void BSP_COMPASS_GetXYZ(float *output) {
	LSM303DLHC_Mag_Read(output);
 8001968:	f7ff be8c 	b.w	8001684 <LSM303DLHC_Mag_Read>

0800196c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800196c:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800196e:	4b0b      	ldr	r3, [pc, #44]	; (800199c <HAL_Init+0x30>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001976:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800197e:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001986:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001988:	2003      	movs	r0, #3
 800198a:	f000 f82d 	bl	80019e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800198e:	2000      	movs	r0, #0
 8001990:	f7ff fda6 	bl	80014e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001994:	f7ff fd46 	bl	8001424 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001998:	2000      	movs	r0, #0
 800199a:	bd08      	pop	{r3, pc}
 800199c:	40023c00 	.word	0x40023c00

080019a0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80019a0:	4a03      	ldr	r2, [pc, #12]	; (80019b0 <HAL_IncTick+0x10>)
 80019a2:	4b04      	ldr	r3, [pc, #16]	; (80019b4 <HAL_IncTick+0x14>)
 80019a4:	6811      	ldr	r1, [r2, #0]
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	440b      	add	r3, r1
 80019aa:	6013      	str	r3, [r2, #0]
}
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	20004db8 	.word	0x20004db8
 80019b4:	20000018 	.word	0x20000018

080019b8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80019b8:	4b01      	ldr	r3, [pc, #4]	; (80019c0 <HAL_GetTick+0x8>)
 80019ba:	6818      	ldr	r0, [r3, #0]
}
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	20004db8 	.word	0x20004db8

080019c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019c4:	b538      	push	{r3, r4, r5, lr}
 80019c6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80019c8:	f7ff fff6 	bl	80019b8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019cc:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80019ce:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80019d0:	d002      	beq.n	80019d8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80019d2:	4b04      	ldr	r3, [pc, #16]	; (80019e4 <HAL_Delay+0x20>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019d8:	f7ff ffee 	bl	80019b8 <HAL_GetTick>
 80019dc:	1b40      	subs	r0, r0, r5
 80019de:	42a0      	cmp	r0, r4
 80019e0:	d3fa      	bcc.n	80019d8 <HAL_Delay+0x14>
  {
  }
}
 80019e2:	bd38      	pop	{r3, r4, r5, pc}
 80019e4:	20000018 	.word	0x20000018

080019e8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019e8:	4a07      	ldr	r2, [pc, #28]	; (8001a08 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80019ea:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ec:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 80019f0:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019f2:	0200      	lsls	r0, r0, #8
 80019f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019f8:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80019fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001a00:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001a02:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a0c:	4b18      	ldr	r3, [pc, #96]	; (8001a70 <HAL_NVIC_SetPriority+0x64>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a14:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a16:	f1c3 0507 	rsb	r5, r3, #7
 8001a1a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a1c:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a20:	bf28      	it	cs
 8001a22:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a24:	2c06      	cmp	r4, #6
 8001a26:	d919      	bls.n	8001a5c <HAL_NVIC_SetPriority+0x50>
 8001a28:	3b03      	subs	r3, #3
 8001a2a:	f04f 34ff 	mov.w	r4, #4294967295
 8001a2e:	409c      	lsls	r4, r3
 8001a30:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a34:	f04f 32ff 	mov.w	r2, #4294967295
 8001a38:	40aa      	lsls	r2, r5
 8001a3a:	ea21 0102 	bic.w	r1, r1, r2
 8001a3e:	fa01 f203 	lsl.w	r2, r1, r3
 8001a42:	4322      	orrs	r2, r4
 8001a44:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 8001a46:	2800      	cmp	r0, #0
 8001a48:	b2d2      	uxtb	r2, r2
 8001a4a:	db0a      	blt.n	8001a62 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001a50:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001a54:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001a58:	bc30      	pop	{r4, r5}
 8001a5a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a5c:	2400      	movs	r4, #0
 8001a5e:	4623      	mov	r3, r4
 8001a60:	e7e8      	b.n	8001a34 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a62:	4b04      	ldr	r3, [pc, #16]	; (8001a74 <HAL_NVIC_SetPriority+0x68>)
 8001a64:	f000 000f 	and.w	r0, r0, #15
 8001a68:	4403      	add	r3, r0
 8001a6a:	761a      	strb	r2, [r3, #24]
 8001a6c:	bc30      	pop	{r4, r5}
 8001a6e:	4770      	bx	lr
 8001a70:	e000ed00 	.word	0xe000ed00
 8001a74:	e000ecfc 	.word	0xe000ecfc

08001a78 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001a78:	2800      	cmp	r0, #0
 8001a7a:	db07      	blt.n	8001a8c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a7c:	f000 011f 	and.w	r1, r0, #31
 8001a80:	2301      	movs	r3, #1
 8001a82:	0940      	lsrs	r0, r0, #5
 8001a84:	4a02      	ldr	r2, [pc, #8]	; (8001a90 <HAL_NVIC_EnableIRQ+0x18>)
 8001a86:	408b      	lsls	r3, r1
 8001a88:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	e000e100 	.word	0xe000e100

08001a94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a98:	4688      	mov	r8, r1
 8001a9a:	b083      	sub	sp, #12
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a9c:	f8d1 b000 	ldr.w	fp, [r1]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aa0:	f8df e198 	ldr.w	lr, [pc, #408]	; 8001c3c <HAL_GPIO_Init+0x1a8>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aa4:	2400      	movs	r4, #0
    ioposition = 0x01U << position;
 8001aa6:	f04f 0901 	mov.w	r9, #1
 8001aaa:	e002      	b.n	8001ab2 <HAL_GPIO_Init+0x1e>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aac:	3401      	adds	r4, #1
 8001aae:	2c10      	cmp	r4, #16
 8001ab0:	d077      	beq.n	8001ba2 <HAL_GPIO_Init+0x10e>
    ioposition = 0x01U << position;
 8001ab2:	fa09 f204 	lsl.w	r2, r9, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ab6:	ea0b 0302 	and.w	r3, fp, r2
    if(iocurrent == ioposition)
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d1f6      	bne.n	8001aac <HAL_GPIO_Init+0x18>
 8001abe:	e9d8 2601 	ldrd	r2, r6, [r8, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ac2:	f022 0c10 	bic.w	ip, r2, #16
 8001ac6:	0065      	lsls	r5, r4, #1
 8001ac8:	f10c 37ff 	add.w	r7, ip, #4294967295
 8001acc:	2103      	movs	r1, #3
 8001ace:	40a9      	lsls	r1, r5
 8001ad0:	2f01      	cmp	r7, #1
 8001ad2:	ea6f 0101 	mvn.w	r1, r1
 8001ad6:	fa06 f605 	lsl.w	r6, r6, r5
 8001ada:	d965      	bls.n	8001ba8 <HAL_GPIO_Init+0x114>
      temp = GPIOx->PUPDR;
 8001adc:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ade:	400f      	ands	r7, r1
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ae0:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 8001ae2:	60c6      	str	r6, [r0, #12]
      temp = GPIOx->MODER;
 8001ae4:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ae6:	f002 0603 	and.w	r6, r2, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001aea:	400f      	ands	r7, r1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aec:	fa06 f505 	lsl.w	r5, r6, r5
 8001af0:	433d      	orrs	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001af2:	00d7      	lsls	r7, r2, #3
      GPIOx->MODER = temp;
 8001af4:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001af6:	d5d9      	bpl.n	8001aac <HAL_GPIO_Init+0x18>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af8:	4d4b      	ldr	r5, [pc, #300]	; (8001c28 <HAL_GPIO_Init+0x194>)
 8001afa:	2100      	movs	r1, #0
 8001afc:	9101      	str	r1, [sp, #4]
 8001afe:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8001b00:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8001b04:	6469      	str	r1, [r5, #68]	; 0x44
 8001b06:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8001b08:	f024 0603 	bic.w	r6, r4, #3
 8001b0c:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001b10:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8001b14:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 8001b18:	9101      	str	r1, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b1a:	f004 0503 	and.w	r5, r4, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b1e:	9901      	ldr	r1, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001b20:	68b7      	ldr	r7, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b22:	00ad      	lsls	r5, r5, #2
 8001b24:	210f      	movs	r1, #15
 8001b26:	40a9      	lsls	r1, r5
 8001b28:	ea27 0101 	bic.w	r1, r7, r1
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b2c:	4f3f      	ldr	r7, [pc, #252]	; (8001c2c <HAL_GPIO_Init+0x198>)
 8001b2e:	42b8      	cmp	r0, r7
 8001b30:	d011      	beq.n	8001b56 <HAL_GPIO_Init+0xc2>
 8001b32:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001b36:	42b8      	cmp	r0, r7
 8001b38:	d068      	beq.n	8001c0c <HAL_GPIO_Init+0x178>
 8001b3a:	4f3d      	ldr	r7, [pc, #244]	; (8001c30 <HAL_GPIO_Init+0x19c>)
 8001b3c:	42b8      	cmp	r0, r7
 8001b3e:	d069      	beq.n	8001c14 <HAL_GPIO_Init+0x180>
 8001b40:	4f3c      	ldr	r7, [pc, #240]	; (8001c34 <HAL_GPIO_Init+0x1a0>)
 8001b42:	42b8      	cmp	r0, r7
 8001b44:	d06b      	beq.n	8001c1e <HAL_GPIO_Init+0x18a>
 8001b46:	4f3c      	ldr	r7, [pc, #240]	; (8001c38 <HAL_GPIO_Init+0x1a4>)
 8001b48:	42b8      	cmp	r0, r7
 8001b4a:	bf0c      	ite	eq
 8001b4c:	2704      	moveq	r7, #4
 8001b4e:	2707      	movne	r7, #7
 8001b50:	fa07 f505 	lsl.w	r5, r7, r5
 8001b54:	4329      	orrs	r1, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b56:	60b1      	str	r1, [r6, #8]
        temp = EXTI->IMR;
 8001b58:	f8de 1000 	ldr.w	r1, [lr]
        temp &= ~((uint32_t)iocurrent);
 8001b5c:	43dd      	mvns	r5, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b5e:	03d6      	lsls	r6, r2, #15
        temp &= ~((uint32_t)iocurrent);
 8001b60:	bf54      	ite	pl
 8001b62:	4029      	andpl	r1, r5
        {
          temp |= iocurrent;
 8001b64:	4319      	orrmi	r1, r3
        }
        EXTI->IMR = temp;
 8001b66:	f8ce 1000 	str.w	r1, [lr]

        temp = EXTI->EMR;
 8001b6a:	f8de 1004 	ldr.w	r1, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b6e:	0397      	lsls	r7, r2, #14
        temp &= ~((uint32_t)iocurrent);
 8001b70:	bf54      	ite	pl
 8001b72:	4029      	andpl	r1, r5
        {
          temp |= iocurrent;
 8001b74:	4319      	orrmi	r1, r3
        }
        EXTI->EMR = temp;
 8001b76:	f8ce 1004 	str.w	r1, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b7a:	f8de 1008 	ldr.w	r1, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b7e:	02d6      	lsls	r6, r2, #11
        temp &= ~((uint32_t)iocurrent);
 8001b80:	bf54      	ite	pl
 8001b82:	4029      	andpl	r1, r5
        {
          temp |= iocurrent;
 8001b84:	4319      	orrmi	r1, r3
        }
        EXTI->RTSR = temp;
 8001b86:	f8ce 1008 	str.w	r1, [lr, #8]

        temp = EXTI->FTSR;
 8001b8a:	f8de 100c 	ldr.w	r1, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b8e:	0292      	lsls	r2, r2, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b90:	f104 0401 	add.w	r4, r4, #1
        temp &= ~((uint32_t)iocurrent);
 8001b94:	bf54      	ite	pl
 8001b96:	4029      	andpl	r1, r5
        {
          temp |= iocurrent;
 8001b98:	4319      	orrmi	r1, r3
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b9a:	2c10      	cmp	r4, #16
        }
        EXTI->FTSR = temp;
 8001b9c:	f8ce 100c 	str.w	r1, [lr, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ba0:	d187      	bne.n	8001ab2 <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 8001ba2:	b003      	add	sp, #12
 8001ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 8001ba8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001baa:	ea07 0a01 	and.w	sl, r7, r1
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bae:	f8d8 700c 	ldr.w	r7, [r8, #12]
 8001bb2:	40af      	lsls	r7, r5
 8001bb4:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8001bb8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001bba:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001bbe:	f3c2 1700 	ubfx	r7, r2, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bc2:	ea2a 0a03 	bic.w	sl, sl, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001bc6:	40a7      	lsls	r7, r4
 8001bc8:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 8001bcc:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001bce:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bd0:	400f      	ands	r7, r1
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bd2:	433e      	orrs	r6, r7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bd4:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8001bd8:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bda:	d183      	bne.n	8001ae4 <HAL_GPIO_Init+0x50>
        temp = GPIOx->AFR[position >> 3U];
 8001bdc:	ea4f 0ad4 	mov.w	sl, r4, lsr #3
 8001be0:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001be4:	f004 0607 	and.w	r6, r4, #7
        temp = GPIOx->AFR[position >> 3U];
 8001be8:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bec:	00b6      	lsls	r6, r6, #2
 8001bee:	f04f 0c0f 	mov.w	ip, #15
 8001bf2:	fa0c fc06 	lsl.w	ip, ip, r6
 8001bf6:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bfa:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8001bfe:	fa07 f606 	lsl.w	r6, r7, r6
 8001c02:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3U] = temp;
 8001c06:	f8ca 6020 	str.w	r6, [sl, #32]
 8001c0a:	e76b      	b.n	8001ae4 <HAL_GPIO_Init+0x50>
 8001c0c:	fa09 f505 	lsl.w	r5, r9, r5
 8001c10:	4329      	orrs	r1, r5
 8001c12:	e7a0      	b.n	8001b56 <HAL_GPIO_Init+0xc2>
 8001c14:	2702      	movs	r7, #2
 8001c16:	fa07 f505 	lsl.w	r5, r7, r5
 8001c1a:	4329      	orrs	r1, r5
 8001c1c:	e79b      	b.n	8001b56 <HAL_GPIO_Init+0xc2>
 8001c1e:	2703      	movs	r7, #3
 8001c20:	fa07 f505 	lsl.w	r5, r7, r5
 8001c24:	4329      	orrs	r1, r5
 8001c26:	e796      	b.n	8001b56 <HAL_GPIO_Init+0xc2>
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	40020000 	.word	0x40020000
 8001c30:	40020800 	.word	0x40020800
 8001c34:	40020c00 	.word	0x40020c00
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	40013c00 	.word	0x40013c00

08001c40 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c40:	b902      	cbnz	r2, 8001c44 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c42:	0409      	lsls	r1, r1, #16
 8001c44:	6181      	str	r1, [r0, #24]
  }
}
 8001c46:	4770      	bx	lr

08001c48 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c4a:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c4c:	2800      	cmp	r0, #0
 8001c4e:	f000 8083 	beq.w	8001d58 <HAL_PCD_Init+0x110>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c52:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
  USBx = hpcd->Instance;
 8001c56:	6805      	ldr	r5, [r0, #0]
 8001c58:	4604      	mov	r4, r0
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c5a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c5e:	b333      	cbz	r3, 8001cae <HAL_PCD_Init+0x66>
 8001c60:	4628      	mov	r0, r5
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c62:	2303      	movs	r3, #3
 8001c64:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c68:	6beb      	ldr	r3, [r5, #60]	; 0x3c

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c6a:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c6c:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 8001c70:	bf08      	it	eq
 8001c72:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 8001c74:	f001 fc88 	bl	8003588 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c78:	f855 cb10 	ldr.w	ip, [r5], #16
 8001c7c:	462f      	mov	r7, r5
 8001c7e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8001c80:	466e      	mov	r6, sp
 8001c82:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001c84:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8001c86:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001c88:	e897 0003 	ldmia.w	r7, {r0, r1}
 8001c8c:	e886 0003 	stmia.w	r6, {r0, r1}
 8001c90:	1d26      	adds	r6, r4, #4
 8001c92:	4660      	mov	r0, ip
 8001c94:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001c98:	f001 fb88 	bl	80033ac <USB_CoreInit>
 8001c9c:	4607      	mov	r7, r0
 8001c9e:	b160      	cbz	r0, 8001cba <HAL_PCD_Init+0x72>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8001ca6:	2501      	movs	r5, #1
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8001ca8:	4628      	mov	r0, r5
 8001caa:	b00b      	add	sp, #44	; 0x2c
 8001cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8001cae:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 8001cb2:	f005 fd81 	bl	80077b8 <HAL_PCD_MspInit>
 8001cb6:	6820      	ldr	r0, [r4, #0]
 8001cb8:	e7d3      	b.n	8001c62 <HAL_PCD_Init+0x1a>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001cba:	4601      	mov	r1, r0
 8001cbc:	6820      	ldr	r0, [r4, #0]
 8001cbe:	f001 fc6b 	bl	8003598 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cc2:	6860      	ldr	r0, [r4, #4]
 8001cc4:	b360      	cbz	r0, 8001d20 <HAL_PCD_Init+0xd8>
 8001cc6:	4639      	mov	r1, r7
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001cc8:	463a      	mov	r2, r7
    hpcd->IN_ep[i].is_in = 1U;
 8001cca:	f04f 0c01 	mov.w	ip, #1
 8001cce:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8001cd2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cd6:	1c4f      	adds	r7, r1, #1
    hpcd->IN_ep[i].num = i;
 8001cd8:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001cdc:	f8a3 1042 	strh.w	r1, [r3, #66]	; 0x42
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ce0:	b2f9      	uxtb	r1, r7
 8001ce2:	4281      	cmp	r1, r0
    hpcd->IN_ep[i].is_in = 1U;
 8001ce4:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ce8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001cec:	e9c3 2211 	strd	r2, r2, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_len = 0U;
 8001cf0:	651a      	str	r2, [r3, #80]	; 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cf2:	d3ec      	bcc.n	8001cce <HAL_PCD_Init+0x86>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cf4:	2200      	movs	r2, #0
    hpcd->OUT_ep[i].is_in = 0U;
 8001cf6:	4611      	mov	r1, r2
 8001cf8:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 8001cfc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d00:	1c57      	adds	r7, r2, #1
    hpcd->OUT_ep[i].num = i;
 8001d02:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d06:	b2fa      	uxtb	r2, r7
 8001d08:	4282      	cmp	r2, r0
    hpcd->OUT_ep[i].is_in = 0U;
 8001d0a:	f883 11fd 	strb.w	r1, [r3, #509]	; 0x1fd
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d0e:	f883 11ff 	strb.w	r1, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d12:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d16:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d1a:	f8c3 1210 	str.w	r1, [r3, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d1e:	d3eb      	bcc.n	8001cf8 <HAL_PCD_Init+0xb0>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d22:	466f      	mov	r7, sp
 8001d24:	f8d4 c000 	ldr.w	ip, [r4]
 8001d28:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8001d2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d2c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8001d2e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001d32:	e887 0003 	stmia.w	r7, {r0, r1}
 8001d36:	4660      	mov	r0, ip
 8001d38:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001d3c:	f001 fc44 	bl	80035c8 <USB_DevInit>
 8001d40:	4605      	mov	r5, r0
 8001d42:	2800      	cmp	r0, #0
 8001d44:	d1ac      	bne.n	8001ca0 <HAL_PCD_Init+0x58>
  hpcd->State = HAL_PCD_STATE_READY;
 8001d46:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8001d48:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  (void)USB_DevDisconnect(hpcd->Instance);
 8001d4c:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 8001d4e:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8001d52:	f002 f81f 	bl	8003d94 <USB_DevDisconnect>
  return HAL_OK;
 8001d56:	e7a7      	b.n	8001ca8 <HAL_PCD_Init+0x60>
    return HAL_ERROR;
 8001d58:	2501      	movs	r5, #1
}
 8001d5a:	4628      	mov	r0, r5
 8001d5c:	b00b      	add	sp, #44	; 0x2c
 8001d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d60 <HAL_PCD_Start>:
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  __HAL_LOCK(hpcd);
 8001d60:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d01a      	beq.n	8001d9e <HAL_PCD_Start+0x3e>

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001d68:	6a82      	ldr	r2, [r0, #40]	; 0x28
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d6a:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hpcd);
 8001d6c:	2101      	movs	r1, #1
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001d6e:	428a      	cmp	r2, r1
{
 8001d70:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8001d72:	f880 13bc 	strb.w	r1, [r0, #956]	; 0x3bc
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001d76:	d00a      	beq.n	8001d8e <HAL_PCD_Start+0x2e>
 8001d78:	4604      	mov	r4, r0
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }

  __HAL_PCD_ENABLE(hpcd);
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f001 fbfc 	bl	8003578 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001d80:	6820      	ldr	r0, [r4, #0]
 8001d82:	f001 fff9 	bl	8003d78 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d86:	2000      	movs	r0, #0
 8001d88:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc

  return HAL_OK;
}
 8001d8c:	bd10      	pop	{r4, pc}
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001d8e:	6982      	ldr	r2, [r0, #24]
 8001d90:	428a      	cmp	r2, r1
 8001d92:	d0f1      	beq.n	8001d78 <HAL_PCD_Start+0x18>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001d94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d96:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001d9a:	639a      	str	r2, [r3, #56]	; 0x38
 8001d9c:	e7ec      	b.n	8001d78 <HAL_PCD_Start+0x18>
  __HAL_LOCK(hpcd);
 8001d9e:	2002      	movs	r0, #2
}
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop

08001da4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001da8:	6806      	ldr	r6, [r0, #0]
{
 8001daa:	b089      	sub	sp, #36	; 0x24
 8001dac:	4604      	mov	r4, r0
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001dae:	4630      	mov	r0, r6
 8001db0:	f002 f830 	bl	8003e14 <USB_GetMode>
 8001db4:	b110      	cbz	r0, 8001dbc <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
    }
  }
}
 8001db6:	b009      	add	sp, #36	; 0x24
 8001db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001dbc:	4605      	mov	r5, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001dbe:	6820      	ldr	r0, [r4, #0]
 8001dc0:	f001 fff6 	bl	8003db0 <USB_ReadInterrupts>
 8001dc4:	2800      	cmp	r0, #0
 8001dc6:	d0f6      	beq.n	8001db6 <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001dc8:	6820      	ldr	r0, [r4, #0]
 8001dca:	f001 fff1 	bl	8003db0 <USB_ReadInterrupts>
 8001dce:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001dd2:	6820      	ldr	r0, [r4, #0]
 8001dd4:	bf1e      	ittt	ne
 8001dd6:	6943      	ldrne	r3, [r0, #20]
 8001dd8:	f003 0302 	andne.w	r3, r3, #2
 8001ddc:	6143      	strne	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001dde:	f001 ffe7 	bl	8003db0 <USB_ReadInterrupts>
 8001de2:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001de6:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001de8:	d011      	beq.n	8001e0e <HAL_PCD_IRQHandler+0x6a>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001dea:	6983      	ldr	r3, [r0, #24]
 8001dec:	f023 0310 	bic.w	r3, r3, #16
 8001df0:	6183      	str	r3, [r0, #24]
      temp = USBx->GRXSTSP;
 8001df2:	6a37      	ldr	r7, [r6, #32]
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001df4:	f3c7 4343 	ubfx	r3, r7, #17, #4
 8001df8:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001dfa:	f007 080f 	and.w	r8, r7, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001dfe:	d05d      	beq.n	8001ebc <HAL_PCD_IRQHandler+0x118>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001e00:	2b06      	cmp	r3, #6
 8001e02:	f000 8283 	beq.w	800230c <HAL_PCD_IRQHandler+0x568>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e06:	6983      	ldr	r3, [r0, #24]
 8001e08:	f043 0310 	orr.w	r3, r3, #16
 8001e0c:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001e0e:	f001 ffcf 	bl	8003db0 <USB_ReadInterrupts>
 8001e12:	f410 2f00 	tst.w	r0, #524288	; 0x80000
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001e16:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001e18:	f040 81c6 	bne.w	80021a8 <HAL_PCD_IRQHandler+0x404>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001e1c:	f001 ffc8 	bl	8003db0 <USB_ReadInterrupts>
 8001e20:	f410 2f80 	tst.w	r0, #262144	; 0x40000
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001e24:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001e26:	f040 810a 	bne.w	800203e <HAL_PCD_IRQHandler+0x29a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001e2a:	f001 ffc1 	bl	8003db0 <USB_ReadInterrupts>
 8001e2e:	2800      	cmp	r0, #0
 8001e30:	db64      	blt.n	8001efc <HAL_PCD_IRQHandler+0x158>
 8001e32:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001e34:	f001 ffbc 	bl	8003db0 <USB_ReadInterrupts>
 8001e38:	0501      	lsls	r1, r0, #20
 8001e3a:	d430      	bmi.n	8001e9e <HAL_PCD_IRQHandler+0xfa>
 8001e3c:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001e3e:	f001 ffb7 	bl	8003db0 <USB_ReadInterrupts>
 8001e42:	04c3      	lsls	r3, r0, #19
 8001e44:	d46e      	bmi.n	8001f24 <HAL_PCD_IRQHandler+0x180>
 8001e46:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001e48:	f001 ffb2 	bl	8003db0 <USB_ReadInterrupts>
 8001e4c:	f410 5f00 	tst.w	r0, #8192	; 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 8001e50:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001e52:	f040 80dd 	bne.w	8002010 <HAL_PCD_IRQHandler+0x26c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001e56:	f001 ffab 	bl	8003db0 <USB_ReadInterrupts>
 8001e5a:	0707      	lsls	r7, r0, #28
 8001e5c:	f100 80cf 	bmi.w	8001ffe <HAL_PCD_IRQHandler+0x25a>
 8001e60:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e62:	f001 ffa5 	bl	8003db0 <USB_ReadInterrupts>
 8001e66:	02c6      	lsls	r6, r0, #11
 8001e68:	f100 80bf 	bmi.w	8001fea <HAL_PCD_IRQHandler+0x246>
 8001e6c:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001e6e:	f001 ff9f 	bl	8003db0 <USB_ReadInterrupts>
 8001e72:	0285      	lsls	r5, r0, #10
 8001e74:	f100 80af 	bmi.w	8001fd6 <HAL_PCD_IRQHandler+0x232>
 8001e78:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001e7a:	f001 ff99 	bl	8003db0 <USB_ReadInterrupts>
 8001e7e:	0040      	lsls	r0, r0, #1
 8001e80:	f100 80a0 	bmi.w	8001fc4 <HAL_PCD_IRQHandler+0x220>
 8001e84:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001e86:	f001 ff93 	bl	8003db0 <USB_ReadInterrupts>
 8001e8a:	0741      	lsls	r1, r0, #29
 8001e8c:	d593      	bpl.n	8001db6 <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 8001e8e:	6823      	ldr	r3, [r4, #0]
 8001e90:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001e92:	076a      	lsls	r2, r5, #29
 8001e94:	d40d      	bmi.n	8001eb2 <HAL_PCD_IRQHandler+0x10e>
      hpcd->Instance->GOTGINT |= temp;
 8001e96:	685a      	ldr	r2, [r3, #4]
 8001e98:	432a      	orrs	r2, r5
 8001e9a:	605a      	str	r2, [r3, #4]
 8001e9c:	e78b      	b.n	8001db6 <HAL_PCD_IRQHandler+0x12>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001e9e:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
 8001ea2:	07da      	lsls	r2, r3, #31
 8001ea4:	d426      	bmi.n	8001ef4 <HAL_PCD_IRQHandler+0x150>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001ea6:	6820      	ldr	r0, [r4, #0]
 8001ea8:	6943      	ldr	r3, [r0, #20]
 8001eaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001eae:	6143      	str	r3, [r0, #20]
 8001eb0:	e7c5      	b.n	8001e3e <HAL_PCD_IRQHandler+0x9a>
        HAL_PCD_DisconnectCallback(hpcd);
 8001eb2:	4620      	mov	r0, r4
 8001eb4:	f005 fd1a 	bl	80078ec <HAL_PCD_DisconnectCallback>
 8001eb8:	6823      	ldr	r3, [r4, #0]
 8001eba:	e7ec      	b.n	8001e96 <HAL_PCD_IRQHandler+0xf2>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001ebc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001ec0:	421f      	tst	r7, r3
 8001ec2:	d0a0      	beq.n	8001e06 <HAL_PCD_IRQHandler+0x62>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001ec4:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8001ec8:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8001ecc:	f3c7 170a 	ubfx	r7, r7, #4, #11
 8001ed0:	f8d8 1208 	ldr.w	r1, [r8, #520]	; 0x208
 8001ed4:	463a      	mov	r2, r7
 8001ed6:	4630      	mov	r0, r6
 8001ed8:	f001 fed2 	bl	8003c80 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001edc:	f8d8 1208 	ldr.w	r1, [r8, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ee0:	f8d8 2214 	ldr.w	r2, [r8, #532]	; 0x214
 8001ee4:	6820      	ldr	r0, [r4, #0]
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ee6:	4439      	add	r1, r7
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ee8:	443a      	add	r2, r7
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001eea:	f8c8 1208 	str.w	r1, [r8, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001eee:	f8c8 2214 	str.w	r2, [r8, #532]	; 0x214
 8001ef2:	e788      	b.n	8001e06 <HAL_PCD_IRQHandler+0x62>
        HAL_PCD_SuspendCallback(hpcd);
 8001ef4:	4620      	mov	r0, r4
 8001ef6:	f005 fcd1 	bl	800789c <HAL_PCD_SuspendCallback>
 8001efa:	e7d4      	b.n	8001ea6 <HAL_PCD_IRQHandler+0x102>
      if (hpcd->LPM_State == LPM_L1)
 8001efc:	f894 13f4 	ldrb.w	r1, [r4, #1012]	; 0x3f4
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f00:	f8d6 2804 	ldr.w	r2, [r6, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 8001f04:	2901      	cmp	r1, #1
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f06:	f022 0201 	bic.w	r2, r2, #1
 8001f0a:	f8c6 2804 	str.w	r2, [r6, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 8001f0e:	f000 81d1 	beq.w	80022b4 <HAL_PCD_IRQHandler+0x510>
        HAL_PCD_ResumeCallback(hpcd);
 8001f12:	4620      	mov	r0, r4
 8001f14:	f005 fcda 	bl	80078cc <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001f18:	6820      	ldr	r0, [r4, #0]
 8001f1a:	6943      	ldr	r3, [r0, #20]
 8001f1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001f20:	6143      	str	r3, [r0, #20]
 8001f22:	e787      	b.n	8001e34 <HAL_PCD_IRQHandler+0x90>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f24:	f506 6700 	add.w	r7, r6, #2048	; 0x800
 8001f28:	687b      	ldr	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001f2a:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f2c:	f023 0301 	bic.w	r3, r3, #1
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001f30:	2110      	movs	r1, #16
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f32:	607b      	str	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001f34:	f001 fc34 	bl	80037a0 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f38:	6860      	ldr	r0, [r4, #4]
 8001f3a:	b1f8      	cbz	r0, 8001f7c <HAL_PCD_IRQHandler+0x1d8>
 8001f3c:	f506 6310 	add.w	r3, r6, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001f40:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 8001f44:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8001f4c:	601a      	str	r2, [r3, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8001f54:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001f56:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001f5a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001f5e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8001f62:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001f66:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f6a:	3501      	adds	r5, #1
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001f6c:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f70:	4285      	cmp	r5, r0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001f72:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8001f76:	f103 0320 	add.w	r3, r3, #32
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f7a:	d1e3      	bne.n	8001f44 <HAL_PCD_IRQHandler+0x1a0>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001f7c:	69fb      	ldr	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001f7e:	6b22      	ldr	r2, [r4, #48]	; 0x30
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001f80:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001f84:	61fb      	str	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001f86:	2a00      	cmp	r2, #0
 8001f88:	f000 8189 	beq.w	800229e <HAL_PCD_IRQHandler+0x4fa>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001f8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f90:	f043 030b 	orr.w	r3, r3, #11
 8001f94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001f98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f9a:	f043 030b 	orr.w	r3, r3, #11
 8001f9e:	647b      	str	r3, [r7, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001fa0:	f8d6 3800 	ldr.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001fa4:	7c21      	ldrb	r1, [r4, #16]
 8001fa6:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001fa8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001fac:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001fb0:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001fb4:	f001 ff42 	bl	8003e3c <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001fb8:	6820      	ldr	r0, [r4, #0]
 8001fba:	6943      	ldr	r3, [r0, #20]
 8001fbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fc0:	6143      	str	r3, [r0, #20]
 8001fc2:	e741      	b.n	8001e48 <HAL_PCD_IRQHandler+0xa4>
      HAL_PCD_ConnectCallback(hpcd);
 8001fc4:	4620      	mov	r0, r4
 8001fc6:	f005 fc8d 	bl	80078e4 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001fca:	6820      	ldr	r0, [r4, #0]
 8001fcc:	6943      	ldr	r3, [r0, #20]
 8001fce:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001fd2:	6143      	str	r3, [r0, #20]
 8001fd4:	e757      	b.n	8001e86 <HAL_PCD_IRQHandler+0xe2>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001fd6:	4620      	mov	r0, r4
 8001fd8:	2100      	movs	r1, #0
 8001fda:	f005 fc7b 	bl	80078d4 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001fde:	6820      	ldr	r0, [r4, #0]
 8001fe0:	6943      	ldr	r3, [r0, #20]
 8001fe2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fe6:	6143      	str	r3, [r0, #20]
 8001fe8:	e747      	b.n	8001e7a <HAL_PCD_IRQHandler+0xd6>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001fea:	4620      	mov	r0, r4
 8001fec:	2100      	movs	r1, #0
 8001fee:	f005 fc75 	bl	80078dc <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ff2:	6820      	ldr	r0, [r4, #0]
 8001ff4:	6943      	ldr	r3, [r0, #20]
 8001ff6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ffa:	6143      	str	r3, [r0, #20]
 8001ffc:	e737      	b.n	8001e6e <HAL_PCD_IRQHandler+0xca>
      HAL_PCD_SOFCallback(hpcd);
 8001ffe:	4620      	mov	r0, r4
 8002000:	f005 fc36 	bl	8007870 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002004:	6820      	ldr	r0, [r4, #0]
 8002006:	6943      	ldr	r3, [r0, #20]
 8002008:	f003 0308 	and.w	r3, r3, #8
 800200c:	6143      	str	r3, [r0, #20]
 800200e:	e728      	b.n	8001e62 <HAL_PCD_IRQHandler+0xbe>
      (void)USB_ActivateSetup(hpcd->Instance);
 8002010:	f001 ff04 	bl	8003e1c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002014:	6820      	ldr	r0, [r4, #0]
 8002016:	f001 fbd5 	bl	80037c4 <USB_GetDevSpeed>
 800201a:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800201c:	6825      	ldr	r5, [r4, #0]
 800201e:	f000 fdf1 	bl	8002c04 <HAL_RCC_GetHCLKFreq>
 8002022:	7b22      	ldrb	r2, [r4, #12]
 8002024:	4601      	mov	r1, r0
 8002026:	4628      	mov	r0, r5
 8002028:	f001 fa2a 	bl	8003480 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 800202c:	4620      	mov	r0, r4
 800202e:	f005 fc23 	bl	8007878 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002032:	6820      	ldr	r0, [r4, #0]
 8002034:	6943      	ldr	r3, [r0, #20]
 8002036:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800203a:	6143      	str	r3, [r0, #20]
 800203c:	e70b      	b.n	8001e56 <HAL_PCD_IRQHandler+0xb2>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800203e:	f001 fec3 	bl	8003dc8 <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 8002042:	4680      	mov	r8, r0
 8002044:	6820      	ldr	r0, [r4, #0]
 8002046:	f1b8 0f00 	cmp.w	r8, #0
 800204a:	f43f aeee 	beq.w	8001e2a <HAL_PCD_IRQHandler+0x86>
 800204e:	f506 6310 	add.w	r3, r6, #2304	; 0x900
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002052:	e9cd 6503 	strd	r6, r5, [sp, #12]
 8002056:	46a3      	mov	fp, r4
      epnum = 0U;
 8002058:	f04f 0a00 	mov.w	sl, #0
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800205c:	461e      	mov	r6, r3
 800205e:	e007      	b.n	8002070 <HAL_PCD_IRQHandler+0x2cc>
      while (ep_intr != 0U)
 8002060:	ea5f 0858 	movs.w	r8, r8, lsr #1
        epnum++;
 8002064:	f10a 0a01 	add.w	sl, sl, #1
 8002068:	f10b 0b1c 	add.w	fp, fp, #28
      while (ep_intr != 0U)
 800206c:	f000 80d3 	beq.w	8002216 <HAL_PCD_IRQHandler+0x472>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002070:	f018 0f01 	tst.w	r8, #1
 8002074:	d0f4      	beq.n	8002060 <HAL_PCD_IRQHandler+0x2bc>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002076:	fa5f f98a 	uxtb.w	r9, sl
 800207a:	4649      	mov	r1, r9
 800207c:	f001 feb6 	bl	8003dec <USB_ReadDevInEPInterrupt>
 8002080:	4605      	mov	r5, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002082:	07e8      	lsls	r0, r5, #31
 8002084:	d517      	bpl.n	80020b6 <HAL_PCD_IRQHandler+0x312>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002086:	9b03      	ldr	r3, [sp, #12]
            if (hpcd->Init.dma_enable == 1U)
 8002088:	6921      	ldr	r1, [r4, #16]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800208a:	f8d3 0834 	ldr.w	r0, [r3, #2100]	; 0x834
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800208e:	2701      	movs	r7, #1
 8002090:	f00a 020f 	and.w	r2, sl, #15
 8002094:	fa07 f202 	lsl.w	r2, r7, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002098:	ea20 0002 	bic.w	r0, r0, r2
 800209c:	eb06 124a 	add.w	r2, r6, sl, lsl #5
 80020a0:	f8c3 0834 	str.w	r0, [r3, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80020a4:	4613      	mov	r3, r2
            if (hpcd->Init.dma_enable == 1U)
 80020a6:	42b9      	cmp	r1, r7
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80020a8:	609f      	str	r7, [r3, #8]
            if (hpcd->Init.dma_enable == 1U)
 80020aa:	f000 810a 	beq.w	80022c2 <HAL_PCD_IRQHandler+0x51e>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80020ae:	4649      	mov	r1, r9
 80020b0:	4620      	mov	r0, r4
 80020b2:	f005 fbd3 	bl	800785c <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80020b6:	0729      	lsls	r1, r5, #28
 80020b8:	d503      	bpl.n	80020c2 <HAL_PCD_IRQHandler+0x31e>
 80020ba:	eb06 134a 	add.w	r3, r6, sl, lsl #5
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80020be:	2208      	movs	r2, #8
 80020c0:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80020c2:	06ea      	lsls	r2, r5, #27
 80020c4:	d503      	bpl.n	80020ce <HAL_PCD_IRQHandler+0x32a>
 80020c6:	eb06 134a 	add.w	r3, r6, sl, lsl #5
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80020ca:	2210      	movs	r2, #16
 80020cc:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80020ce:	066b      	lsls	r3, r5, #25
 80020d0:	d503      	bpl.n	80020da <HAL_PCD_IRQHandler+0x336>
 80020d2:	eb06 134a 	add.w	r3, r6, sl, lsl #5
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80020d6:	2240      	movs	r2, #64	; 0x40
 80020d8:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80020da:	07af      	lsls	r7, r5, #30
 80020dc:	d503      	bpl.n	80020e6 <HAL_PCD_IRQHandler+0x342>
 80020de:	eb06 134a 	add.w	r3, r6, sl, lsl #5
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80020e2:	2202      	movs	r2, #2
 80020e4:	609a      	str	r2, [r3, #8]
 80020e6:	6827      	ldr	r7, [r4, #0]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80020e8:	062d      	lsls	r5, r5, #24
 80020ea:	4638      	mov	r0, r7
 80020ec:	d5b8      	bpl.n	8002060 <HAL_PCD_IRQHandler+0x2bc>
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 80020ee:	e9db 1314 	ldrd	r1, r3, [fp, #80]	; 0x50
 80020f2:	428b      	cmp	r3, r1
 80020f4:	d8b4      	bhi.n	8002060 <HAL_PCD_IRQHandler+0x2bc>
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020f6:	f507 6210 	add.w	r2, r7, #2304	; 0x900
 80020fa:	eb02 124a 	add.w	r2, r2, sl, lsl #5
 80020fe:	4610      	mov	r0, r2
  if (len > ep->maxpacket)
 8002100:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002104:	9005      	str	r0, [sp, #20]
  len = ep->xfer_len - ep->xfer_count;
 8002106:	1acd      	subs	r5, r1, r3
  len32b = (len + 3U) / 4U;
 8002108:	4295      	cmp	r5, r2
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800210a:	6980      	ldr	r0, [r0, #24]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800210c:	9706      	str	r7, [sp, #24]
  len32b = (len + 3U) / 4U;
 800210e:	46ac      	mov	ip, r5
 8002110:	bf28      	it	cs
 8002112:	4694      	movcs	ip, r2
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002114:	b280      	uxth	r0, r0
  len32b = (len + 3U) / 4U;
 8002116:	f10c 0c03 	add.w	ip, ip, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800211a:	ebb0 0f9c 	cmp.w	r0, ip, lsr #2
 800211e:	d331      	bcc.n	8002184 <HAL_PCD_IRQHandler+0x3e0>
 8002120:	428b      	cmp	r3, r1
 8002122:	d233      	bcs.n	800218c <HAL_PCD_IRQHandler+0x3e8>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002124:	b391      	cbz	r1, 800218c <HAL_PCD_IRQHandler+0x3e8>
 8002126:	f8cd 801c 	str.w	r8, [sp, #28]
 800212a:	f8db 1048 	ldr.w	r1, [fp, #72]	; 0x48
 800212e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8002132:	e007      	b.n	8002144 <HAL_PCD_IRQHandler+0x3a0>
 8002134:	f8db 5050 	ldr.w	r5, [fp, #80]	; 0x50
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002138:	429d      	cmp	r5, r3
 800213a:	f240 812b 	bls.w	8002394 <HAL_PCD_IRQHandler+0x5f0>
 800213e:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
 8002142:	1aed      	subs	r5, r5, r3
 8002144:	4295      	cmp	r5, r2
 8002146:	bf28      	it	cs
 8002148:	4615      	movcs	r5, r2
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800214a:	7c23      	ldrb	r3, [r4, #16]
 800214c:	9300      	str	r3, [sp, #0]
 800214e:	464a      	mov	r2, r9
 8002150:	b2ab      	uxth	r3, r5
 8002152:	4638      	mov	r0, r7
 8002154:	f001 fd7e 	bl	8003c54 <USB_WritePacket>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002158:	f8d8 2018 	ldr.w	r2, [r8, #24]
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 800215c:	f8db 1048 	ldr.w	r1, [fp, #72]	; 0x48
    ep->xfer_count += len;
 8002160:	f8db 3054 	ldr.w	r3, [fp, #84]	; 0x54
    ep->xfer_buff  += len;
 8002164:	4429      	add	r1, r5
    ep->xfer_count += len;
 8002166:	442b      	add	r3, r5
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002168:	b292      	uxth	r2, r2
    len32b = (len + 3U) / 4U;
 800216a:	3503      	adds	r5, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800216c:	ebb2 0f95 	cmp.w	r2, r5, lsr #2
    ep->xfer_buff  += len;
 8002170:	f8cb 1048 	str.w	r1, [fp, #72]	; 0x48
    ep->xfer_count += len;
 8002174:	f8cb 3054 	str.w	r3, [fp, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002178:	d2dc      	bcs.n	8002134 <HAL_PCD_IRQHandler+0x390>
 800217a:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800217e:	6827      	ldr	r7, [r4, #0]
 8002180:	f8db 1050 	ldr.w	r1, [fp, #80]	; 0x50
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002184:	4299      	cmp	r1, r3
 8002186:	4638      	mov	r0, r7
 8002188:	f63f af6a 	bhi.w	8002060 <HAL_PCD_IRQHandler+0x2bc>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800218c:	9b06      	ldr	r3, [sp, #24]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800218e:	2001      	movs	r0, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002190:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002194:	f00a 010f 	and.w	r1, sl, #15
 8002198:	fa00 f101 	lsl.w	r1, r0, r1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800219c:	ea22 0201 	bic.w	r2, r2, r1
 80021a0:	4638      	mov	r0, r7
 80021a2:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
 80021a6:	e75b      	b.n	8002060 <HAL_PCD_IRQHandler+0x2bc>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80021a8:	f001 fe06 	bl	8003db8 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 80021ac:	4607      	mov	r7, r0
 80021ae:	6820      	ldr	r0, [r4, #0]
 80021b0:	2f00      	cmp	r7, #0
 80021b2:	f43f ae33 	beq.w	8001e1c <HAL_PCD_IRQHandler+0x78>
      epnum = 0U;
 80021b6:	f04f 0800 	mov.w	r8, #0
 80021ba:	f506 6a30 	add.w	sl, r6, #2816	; 0xb00
 80021be:	e004      	b.n	80021ca <HAL_PCD_IRQHandler+0x426>
      while (ep_intr != 0U)
 80021c0:	087f      	lsrs	r7, r7, #1
        epnum++;
 80021c2:	f108 0801 	add.w	r8, r8, #1
      while (ep_intr != 0U)
 80021c6:	f43f ae29 	beq.w	8001e1c <HAL_PCD_IRQHandler+0x78>
        if ((ep_intr & 0x1U) != 0U)
 80021ca:	07fb      	lsls	r3, r7, #31
 80021cc:	d5f8      	bpl.n	80021c0 <HAL_PCD_IRQHandler+0x41c>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80021ce:	fa5f fb88 	uxtb.w	fp, r8
 80021d2:	4659      	mov	r1, fp
 80021d4:	f001 fe00 	bl	8003dd8 <USB_ReadDevOutEPInterrupt>
 80021d8:	4681      	mov	r9, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80021da:	f019 0f01 	tst.w	r9, #1
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021de:	6820      	ldr	r0, [r4, #0]
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80021e0:	d138      	bne.n	8002254 <HAL_PCD_IRQHandler+0x4b0>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80021e2:	f019 0f08 	tst.w	r9, #8
 80021e6:	d119      	bne.n	800221c <HAL_PCD_IRQHandler+0x478>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80021e8:	f019 0f10 	tst.w	r9, #16
 80021ec:	d003      	beq.n	80021f6 <HAL_PCD_IRQHandler+0x452>
 80021ee:	eb0a 1348 	add.w	r3, sl, r8, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80021f2:	2210      	movs	r2, #16
 80021f4:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80021f6:	f019 0f20 	tst.w	r9, #32
 80021fa:	d003      	beq.n	8002204 <HAL_PCD_IRQHandler+0x460>
 80021fc:	eb0a 1348 	add.w	r3, sl, r8, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002200:	2220      	movs	r2, #32
 8002202:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002204:	f419 5f00 	tst.w	r9, #8192	; 0x2000
 8002208:	d0da      	beq.n	80021c0 <HAL_PCD_IRQHandler+0x41c>
 800220a:	eb0a 1348 	add.w	r3, sl, r8, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800220e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002212:	609a      	str	r2, [r3, #8]
 8002214:	e7d4      	b.n	80021c0 <HAL_PCD_IRQHandler+0x41c>
 8002216:	e9dd 6503 	ldrd	r6, r5, [sp, #12]
 800221a:	e606      	b.n	8001e2a <HAL_PCD_IRQHandler+0x86>
 800221c:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8002220:	eb0a 0302 	add.w	r3, sl, r2
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002224:	2108      	movs	r1, #8
 8002226:	6099      	str	r1, [r3, #8]
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002228:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 800222c:	4413      	add	r3, r2
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800222e:	6c02      	ldr	r2, [r0, #64]	; 0x40

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002230:	485f      	ldr	r0, [pc, #380]	; (80023b0 <HAL_PCD_IRQHandler+0x60c>)
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002232:	6899      	ldr	r1, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002234:	4282      	cmp	r2, r0
 8002236:	d957      	bls.n	80022e8 <HAL_PCD_IRQHandler+0x544>
 8002238:	040a      	lsls	r2, r1, #16
 800223a:	d502      	bpl.n	8002242 <HAL_PCD_IRQHandler+0x49e>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800223c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002240:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002242:	4620      	mov	r0, r4
 8002244:	f005 fafa 	bl	800783c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002248:	6921      	ldr	r1, [r4, #16]
 800224a:	2901      	cmp	r1, #1
 800224c:	f000 80a6 	beq.w	800239c <HAL_PCD_IRQHandler+0x5f8>
 8002250:	6820      	ldr	r0, [r4, #0]
 8002252:	e7c9      	b.n	80021e8 <HAL_PCD_IRQHandler+0x444>
 8002254:	ea4f 1348 	mov.w	r3, r8, lsl #5
 8002258:	eb0a 0203 	add.w	r2, sl, r3
  if (hpcd->Init.dma_enable == 1U)
 800225c:	6921      	ldr	r1, [r4, #16]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800225e:	f500 6e30 	add.w	lr, r0, #2816	; 0xb00
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002262:	f04f 0c01 	mov.w	ip, #1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002266:	4473      	add	r3, lr
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002268:	f8c2 c008 	str.w	ip, [r2, #8]
  if (hpcd->Init.dma_enable == 1U)
 800226c:	2901      	cmp	r1, #1
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800226e:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002272:	689a      	ldr	r2, [r3, #8]
  if (hpcd->Init.dma_enable == 1U)
 8002274:	d03d      	beq.n	80022f2 <HAL_PCD_IRQHandler+0x54e>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002276:	494f      	ldr	r1, [pc, #316]	; (80023b4 <HAL_PCD_IRQHandler+0x610>)
 8002278:	458c      	cmp	ip, r1
 800227a:	d05a      	beq.n	8002332 <HAL_PCD_IRQHandler+0x58e>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800227c:	f1b8 0f00 	cmp.w	r8, #0
 8002280:	d107      	bne.n	8002292 <HAL_PCD_IRQHandler+0x4ee>
 8002282:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8002286:	b923      	cbnz	r3, 8002292 <HAL_PCD_IRQHandler+0x4ee>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002288:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800228c:	4641      	mov	r1, r8
 800228e:	f001 fdd5 	bl	8003e3c <USB_EP0_OutStart>
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002292:	4620      	mov	r0, r4
 8002294:	4659      	mov	r1, fp
 8002296:	f005 fad7 	bl	8007848 <HAL_PCD_DataOutStageCallback>
 800229a:	6820      	ldr	r0, [r4, #0]
 800229c:	e7a1      	b.n	80021e2 <HAL_PCD_IRQHandler+0x43e>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80022a4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80022a8:	617b      	str	r3, [r7, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	f043 030b 	orr.w	r3, r3, #11
 80022b0:	613b      	str	r3, [r7, #16]
 80022b2:	e675      	b.n	8001fa0 <HAL_PCD_IRQHandler+0x1fc>
        hpcd->LPM_State = LPM_L0;
 80022b4:	2100      	movs	r1, #0
 80022b6:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80022ba:	4620      	mov	r0, r4
 80022bc:	f000 f9ee 	bl	800269c <HAL_PCDEx_LPM_Callback>
 80022c0:	e62a      	b.n	8001f18 <HAL_PCD_IRQHandler+0x174>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80022c2:	e9db 2311 	ldrd	r2, r3, [fp, #68]	; 0x44
 80022c6:	4413      	add	r3, r2
 80022c8:	f8cb 3048 	str.w	r3, [fp, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80022cc:	f1ba 0f00 	cmp.w	sl, #0
 80022d0:	f47f aeed 	bne.w	80020ae <HAL_PCD_IRQHandler+0x30a>
 80022d4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f47f aee9 	bne.w	80020ae <HAL_PCD_IRQHandler+0x30a>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022dc:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80022e0:	6820      	ldr	r0, [r4, #0]
 80022e2:	f001 fdab 	bl	8003e3c <USB_EP0_OutStart>
 80022e6:	e6e2      	b.n	80020ae <HAL_PCD_IRQHandler+0x30a>
  HAL_PCD_SetupStageCallback(hpcd);
 80022e8:	4620      	mov	r0, r4
 80022ea:	f005 faa7 	bl	800783c <HAL_PCD_SetupStageCallback>
 80022ee:	6820      	ldr	r0, [r4, #0]
 80022f0:	e77a      	b.n	80021e8 <HAL_PCD_IRQHandler+0x444>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80022f2:	0711      	lsls	r1, r2, #28
 80022f4:	d524      	bpl.n	8002340 <HAL_PCD_IRQHandler+0x59c>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022f6:	492e      	ldr	r1, [pc, #184]	; (80023b0 <HAL_PCD_IRQHandler+0x60c>)
 80022f8:	458c      	cmp	ip, r1
 80022fa:	f67f af72 	bls.w	80021e2 <HAL_PCD_IRQHandler+0x43e>
 80022fe:	0412      	lsls	r2, r2, #16
 8002300:	f57f af6f 	bpl.w	80021e2 <HAL_PCD_IRQHandler+0x43e>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002304:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002308:	609a      	str	r2, [r3, #8]
 800230a:	e76a      	b.n	80021e2 <HAL_PCD_IRQHandler+0x43e>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800230c:	2208      	movs	r2, #8
 800230e:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8002312:	4630      	mov	r0, r6
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002314:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002318:	f001 fcb2 	bl	8003c80 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800231c:	eb04 0288 	add.w	r2, r4, r8, lsl #2
 8002320:	f3c7 130a 	ubfx	r3, r7, #4, #11
 8002324:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 8002328:	6820      	ldr	r0, [r4, #0]
 800232a:	440b      	add	r3, r1
 800232c:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 8002330:	e569      	b.n	8001e06 <HAL_PCD_IRQHandler+0x62>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002332:	0411      	lsls	r1, r2, #16
 8002334:	d4e6      	bmi.n	8002304 <HAL_PCD_IRQHandler+0x560>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002336:	0691      	lsls	r1, r2, #26
 8002338:	d5ab      	bpl.n	8002292 <HAL_PCD_IRQHandler+0x4ee>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800233a:	2220      	movs	r2, #32
 800233c:	609a      	str	r2, [r3, #8]
 800233e:	e7a8      	b.n	8002292 <HAL_PCD_IRQHandler+0x4ee>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002340:	0691      	lsls	r1, r2, #26
 8002342:	d431      	bmi.n	80023a8 <HAL_PCD_IRQHandler+0x604>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002344:	f012 0f28 	tst.w	r2, #40	; 0x28
 8002348:	f47f af4b 	bne.w	80021e2 <HAL_PCD_IRQHandler+0x43e>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800234c:	4918      	ldr	r1, [pc, #96]	; (80023b0 <HAL_PCD_IRQHandler+0x60c>)
 800234e:	458c      	cmp	ip, r1
 8002350:	d901      	bls.n	8002356 <HAL_PCD_IRQHandler+0x5b2>
 8002352:	0412      	lsls	r2, r2, #16
 8002354:	d4d6      	bmi.n	8002304 <HAL_PCD_IRQHandler+0x560>
 8002356:	ebc8 02c8 	rsb	r2, r8, r8, lsl #3
 800235a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800235e:	6919      	ldr	r1, [r3, #16]
          hpcd->OUT_ep[epnum].maxpacket -
 8002360:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002364:	f3c1 0112 	ubfx	r1, r1, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002368:	eba3 0c01 	sub.w	ip, r3, r1
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800236c:	f8d2 1208 	ldr.w	r1, [r2, #520]	; 0x208
        hpcd->OUT_ep[epnum].xfer_count =
 8002370:	f8c2 c214 	str.w	ip, [r2, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002374:	440b      	add	r3, r1
 8002376:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800237a:	f1b8 0f00 	cmp.w	r8, #0
 800237e:	d188      	bne.n	8002292 <HAL_PCD_IRQHandler+0x4ee>
 8002380:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8002384:	2b00      	cmp	r3, #0
 8002386:	d184      	bne.n	8002292 <HAL_PCD_IRQHandler+0x4ee>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002388:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800238c:	2101      	movs	r1, #1
 800238e:	f001 fd55 	bl	8003e3c <USB_EP0_OutStart>
 8002392:	e77e      	b.n	8002292 <HAL_PCD_IRQHandler+0x4ee>
 8002394:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8002398:	6827      	ldr	r7, [r4, #0]
 800239a:	e6f7      	b.n	800218c <HAL_PCD_IRQHandler+0x3e8>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800239c:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80023a0:	6820      	ldr	r0, [r4, #0]
 80023a2:	f001 fd4b 	bl	8003e3c <USB_EP0_OutStart>
 80023a6:	e753      	b.n	8002250 <HAL_PCD_IRQHandler+0x4ac>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023a8:	2220      	movs	r2, #32
 80023aa:	609a      	str	r2, [r3, #8]
 80023ac:	e719      	b.n	80021e2 <HAL_PCD_IRQHandler+0x43e>
 80023ae:	bf00      	nop
 80023b0:	4f54300a 	.word	0x4f54300a
 80023b4:	4f54310a 	.word	0x4f54310a

080023b8 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 80023b8:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 80023bc:	2a01      	cmp	r2, #1
 80023be:	d00d      	beq.n	80023dc <HAL_PCD_SetAddress+0x24>
{
 80023c0:	b510      	push	{r4, lr}
 80023c2:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80023c4:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 80023c6:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  __HAL_LOCK(hpcd);
 80023ca:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80023ce:	6800      	ldr	r0, [r0, #0]
 80023d0:	f001 fcc2 	bl	8003d58 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80023d4:	2000      	movs	r0, #0
 80023d6:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 80023da:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80023dc:	2002      	movs	r0, #2
}
 80023de:	4770      	bx	lr

080023e0 <HAL_PCD_EP_Open>:
{
 80023e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023e2:	f001 050f 	and.w	r5, r1, #15
 80023e6:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
    ep->is_in = 1U;
 80023ea:	ebc5 06c5 	rsb	r6, r5, r5, lsl #3
  if ((ep_addr & 0x80U) == 0x80U)
 80023ee:	0609      	lsls	r1, r1, #24
 80023f0:	ea4f 0484 	mov.w	r4, r4, lsl #2
    ep->is_in = 1U;
 80023f4:	eb00 0686 	add.w	r6, r0, r6, lsl #2
  if ((ep_addr & 0x80U) == 0x80U)
 80023f8:	d41e      	bmi.n	8002438 <HAL_PCD_EP_Open+0x58>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023fa:	f504 74fe 	add.w	r4, r4, #508	; 0x1fc
    ep->is_in = 0U;
 80023fe:	2700      	movs	r7, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002400:	1901      	adds	r1, r0, r4
    ep->is_in = 0U;
 8002402:	f886 71fd 	strb.w	r7, [r6, #509]	; 0x1fd
  if (ep->is_in != 0U)
 8002406:	784c      	ldrb	r4, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002408:	700d      	strb	r5, [r1, #0]
  ep->maxpacket = ep_mps;
 800240a:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 800240c:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 800240e:	b104      	cbz	r4, 8002412 <HAL_PCD_EP_Open+0x32>
    ep->tx_fifo_num = ep->num;
 8002410:	80cd      	strh	r5, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 8002412:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8002414:	bf04      	itt	eq
 8002416:	2300      	moveq	r3, #0
 8002418:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 800241a:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800241e:	2b01      	cmp	r3, #1
 8002420:	d010      	beq.n	8002444 <HAL_PCD_EP_Open+0x64>
 8002422:	2301      	movs	r3, #1
 8002424:	4604      	mov	r4, r0
 8002426:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800242a:	6800      	ldr	r0, [r0, #0]
 800242c:	f001 f9d6 	bl	80037dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002430:	2000      	movs	r0, #0
 8002432:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8002436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002438:	343c      	adds	r4, #60	; 0x3c
    ep->is_in = 1U;
 800243a:	2701      	movs	r7, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800243c:	1901      	adds	r1, r0, r4
    ep->is_in = 1U;
 800243e:	f886 703d 	strb.w	r7, [r6, #61]	; 0x3d
 8002442:	e7e0      	b.n	8002406 <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 8002444:	2002      	movs	r0, #2
}
 8002446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002448 <HAL_PCD_EP_Close>:
{
 8002448:	f001 020f 	and.w	r2, r1, #15
 800244c:	b538      	push	{r3, r4, r5, lr}
  if ((ep_addr & 0x80U) == 0x80U)
 800244e:	0609      	lsls	r1, r1, #24
 8002450:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
    ep->is_in = 1U;
 8002454:	ebc2 04c2 	rsb	r4, r2, r2, lsl #3
 8002458:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800245c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  if ((ep_addr & 0x80U) == 0x80U)
 8002460:	d415      	bmi.n	800248e <HAL_PCD_EP_Close+0x46>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002462:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002466:	18c1      	adds	r1, r0, r3
    ep->is_in = 0U;
 8002468:	2500      	movs	r5, #0
 800246a:	f884 51fd 	strb.w	r5, [r4, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 800246e:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8002470:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8002474:	2b01      	cmp	r3, #1
 8002476:	d014      	beq.n	80024a2 <HAL_PCD_EP_Close+0x5a>
 8002478:	2301      	movs	r3, #1
 800247a:	4604      	mov	r4, r0
 800247c:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002480:	6800      	ldr	r0, [r0, #0]
 8002482:	f001 f9ef 	bl	8003864 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002486:	2000      	movs	r0, #0
 8002488:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800248c:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800248e:	333c      	adds	r3, #60	; 0x3c
 8002490:	18c1      	adds	r1, r0, r3
    ep->is_in = 1U;
 8002492:	2501      	movs	r5, #1
 8002494:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002498:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800249a:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d1ea      	bne.n	8002478 <HAL_PCD_EP_Close+0x30>
 80024a2:	2002      	movs	r0, #2
}
 80024a4:	bd38      	pop	{r3, r4, r5, pc}
 80024a6:	bf00      	nop

080024a8 <HAL_PCD_EP_Receive>:
{
 80024a8:	b538      	push	{r3, r4, r5, lr}
 80024aa:	f001 050f 	and.w	r5, r1, #15
  ep->xfer_buff = pBuf;
 80024ae:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
 80024b2:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  ep->xfer_count = 0U;
 80024b6:	2100      	movs	r1, #0
  ep->xfer_buff = pBuf;
 80024b8:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_count = 0U;
 80024bc:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
  ep->is_in = 0U;
 80024c0:	f884 11fd 	strb.w	r1, [r4, #509]	; 0x1fd
  ep->xfer_len = len;
 80024c4:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->num = ep_addr & EP_ADDR_MSK;
 80024c8:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  if (hpcd->Init.dma_enable == 1U)
 80024cc:	6903      	ldr	r3, [r0, #16]
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024ce:	211c      	movs	r1, #28
 80024d0:	fb01 0105 	mla	r1, r1, r5, r0
  if (hpcd->Init.dma_enable == 1U)
 80024d4:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 80024d6:	bf08      	it	eq
 80024d8:	f8c4 220c 	streq.w	r2, [r4, #524]	; 0x20c
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024dc:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
 80024e0:	6800      	ldr	r0, [r0, #0]
 80024e2:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80024e4:	b11d      	cbz	r5, 80024ee <HAL_PCD_EP_Receive+0x46>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80024e6:	f001 fa1d 	bl	8003924 <USB_EPStartXfer>
}
 80024ea:	2000      	movs	r0, #0
 80024ec:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80024ee:	f001 fb2b 	bl	8003b48 <USB_EP0StartXfer>
}
 80024f2:	2000      	movs	r0, #0
 80024f4:	bd38      	pop	{r3, r4, r5, pc}
 80024f6:	bf00      	nop

080024f8 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80024f8:	f001 010f 	and.w	r1, r1, #15
 80024fc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8002500:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 8002504:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop

0800250c <HAL_PCD_EP_Transmit>:
{
 800250c:	b570      	push	{r4, r5, r6, lr}
 800250e:	f001 050f 	and.w	r5, r1, #15
  ep->xfer_buff = pBuf;
 8002512:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
 8002516:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  ep->is_in = 1U;
 800251a:	2101      	movs	r1, #1
  ep->xfer_count = 0U;
 800251c:	2600      	movs	r6, #0
  ep->xfer_buff = pBuf;
 800251e:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->is_in = 1U;
 8002520:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  ep->xfer_len = len;
 8002524:	6523      	str	r3, [r4, #80]	; 0x50
  ep->num = ep_addr & EP_ADDR_MSK;
 8002526:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 800252a:	6566      	str	r6, [r4, #84]	; 0x54
  if (hpcd->Init.dma_enable == 1U)
 800252c:	6903      	ldr	r3, [r0, #16]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800252e:	211c      	movs	r1, #28
 8002530:	fb01 0105 	mla	r1, r1, r5, r0
  if (hpcd->Init.dma_enable == 1U)
 8002534:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8002536:	bf08      	it	eq
 8002538:	64e2      	streq	r2, [r4, #76]	; 0x4c
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800253a:	313c      	adds	r1, #60	; 0x3c
 800253c:	6800      	ldr	r0, [r0, #0]
 800253e:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002540:	b11d      	cbz	r5, 800254a <HAL_PCD_EP_Transmit+0x3e>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002542:	f001 f9ef 	bl	8003924 <USB_EPStartXfer>
}
 8002546:	2000      	movs	r0, #0
 8002548:	bd70      	pop	{r4, r5, r6, pc}
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800254a:	f001 fafd 	bl	8003b48 <USB_EP0StartXfer>
}
 800254e:	2000      	movs	r0, #0
 8002550:	bd70      	pop	{r4, r5, r6, pc}
 8002552:	bf00      	nop

08002554 <HAL_PCD_EP_SetStall>:
{
 8002554:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002556:	6843      	ldr	r3, [r0, #4]
 8002558:	f001 050f 	and.w	r5, r1, #15
 800255c:	429d      	cmp	r5, r3
 800255e:	d81f      	bhi.n	80025a0 <HAL_PCD_EP_SetStall+0x4c>
  if ((0x80U & ep_addr) == 0x80U)
 8002560:	060b      	lsls	r3, r1, #24
 8002562:	d41f      	bmi.n	80025a4 <HAL_PCD_EP_SetStall+0x50>
    ep->is_in = 0U;
 8002564:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 8002568:	241c      	movs	r4, #28
 800256a:	fb04 0101 	mla	r1, r4, r1, r0
    ep->is_in = 0U;
 800256e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8002572:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8002574:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8002578:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 800257c:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800257e:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8002580:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8002582:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8002586:	429a      	cmp	r2, r3
 8002588:	d01e      	beq.n	80025c8 <HAL_PCD_EP_SetStall+0x74>
 800258a:	4604      	mov	r4, r0
 800258c:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002590:	6800      	ldr	r0, [r0, #0]
 8002592:	f001 fb89 	bl	8003ca8 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002596:	b1cd      	cbz	r5, 80025cc <HAL_PCD_EP_SetStall+0x78>
  __HAL_UNLOCK(hpcd);
 8002598:	2000      	movs	r0, #0
 800259a:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800259e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80025a0:	2001      	movs	r0, #1
}
 80025a2:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 80025a4:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025a8:	211c      	movs	r1, #28
 80025aa:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 80025ae:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80025b2:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025b4:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 80025b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  ep->is_stall = 1U;
 80025ba:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80025bc:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 80025be:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 80025c0:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d1e0      	bne.n	800258a <HAL_PCD_EP_SetStall+0x36>
 80025c8:	2002      	movs	r0, #2
}
 80025ca:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80025cc:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80025d0:	7c21      	ldrb	r1, [r4, #16]
 80025d2:	6820      	ldr	r0, [r4, #0]
 80025d4:	f001 fc32 	bl	8003e3c <USB_EP0_OutStart>
 80025d8:	e7de      	b.n	8002598 <HAL_PCD_EP_SetStall+0x44>
 80025da:	bf00      	nop

080025dc <HAL_PCD_EP_ClrStall>:
{
 80025dc:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80025de:	6843      	ldr	r3, [r0, #4]
 80025e0:	f001 020f 	and.w	r2, r1, #15
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d821      	bhi.n	800262c <HAL_PCD_EP_ClrStall+0x50>
 80025e8:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
    ep->is_in = 1U;
 80025ec:	ebc2 04c2 	rsb	r4, r2, r2, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 80025f0:	0609      	lsls	r1, r1, #24
 80025f2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    ep->is_in = 1U;
 80025f6:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  if ((0x80U & ep_addr) == 0x80U)
 80025fa:	d419      	bmi.n	8002630 <HAL_PCD_EP_ClrStall+0x54>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025fc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002600:	18c1      	adds	r1, r0, r3
    ep->is_in = 0U;
 8002602:	2500      	movs	r5, #0
 8002604:	f884 51fd 	strb.w	r5, [r4, #509]	; 0x1fd
  ep->is_stall = 0U;
 8002608:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 800260a:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 800260c:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800260e:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8002612:	2b01      	cmp	r3, #1
 8002614:	d018      	beq.n	8002648 <HAL_PCD_EP_ClrStall+0x6c>
 8002616:	4604      	mov	r4, r0
 8002618:	2301      	movs	r3, #1
 800261a:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800261e:	6800      	ldr	r0, [r0, #0]
 8002620:	f001 fb6e 	bl	8003d00 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002624:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
  return HAL_OK;
 8002628:	4628      	mov	r0, r5
}
 800262a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800262c:	2001      	movs	r0, #1
}
 800262e:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002630:	333c      	adds	r3, #60	; 0x3c
 8002632:	18c1      	adds	r1, r0, r3
    ep->is_in = 1U;
 8002634:	2501      	movs	r5, #1
 8002636:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  ep->is_stall = 0U;
 800263a:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 800263c:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 800263e:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8002640:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8002644:	2b01      	cmp	r3, #1
 8002646:	d1e6      	bne.n	8002616 <HAL_PCD_EP_ClrStall+0x3a>
 8002648:	2002      	movs	r0, #2
}
 800264a:	bd38      	pop	{r3, r4, r5, pc}

0800264c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800264c:	b430      	push	{r4, r5}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800264e:	6805      	ldr	r5, [r0, #0]
 8002650:	0412      	lsls	r2, r2, #16
 8002652:	6a6c      	ldr	r4, [r5, #36]	; 0x24

  if (fifo == 0U)
 8002654:	b1c1      	cbz	r1, 8002688 <HAL_PCDEx_SetTxFiFo+0x3c>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002656:	6aab      	ldr	r3, [r5, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8002658:	3901      	subs	r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800265a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800265e:	d00b      	beq.n	8002678 <HAL_PCDEx_SetTxFiFo+0x2c>
 8002660:	2300      	movs	r3, #0
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002662:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8002666:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 800266a:	3301      	adds	r3, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800266c:	6840      	ldr	r0, [r0, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 800266e:	b2db      	uxtb	r3, r3
 8002670:	428b      	cmp	r3, r1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002672:	eb04 4410 	add.w	r4, r4, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8002676:	d3f4      	bcc.n	8002662 <HAL_PCDEx_SetTxFiFo+0x16>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002678:	3140      	adds	r1, #64	; 0x40
 800267a:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 800267e:	4314      	orrs	r4, r2
 8002680:	604c      	str	r4, [r1, #4]
  }

  return HAL_OK;
}
 8002682:	2000      	movs	r0, #0
 8002684:	bc30      	pop	{r4, r5}
 8002686:	4770      	bx	lr
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002688:	4314      	orrs	r4, r2
 800268a:	62ac      	str	r4, [r5, #40]	; 0x28
}
 800268c:	2000      	movs	r0, #0
 800268e:	bc30      	pop	{r4, r5}
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop

08002694 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8002694:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 8002696:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8002698:	6259      	str	r1, [r3, #36]	; 0x24
}
 800269a:	4770      	bx	lr

0800269c <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop

080026a0 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026a0:	2800      	cmp	r0, #0
 80026a2:	f000 8132 	beq.w	800290a <HAL_RCC_OscConfig+0x26a>
{
 80026a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026aa:	6803      	ldr	r3, [r0, #0]
 80026ac:	07dd      	lsls	r5, r3, #31
{
 80026ae:	b082      	sub	sp, #8
 80026b0:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026b2:	d52f      	bpl.n	8002714 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026b4:	49ac      	ldr	r1, [pc, #688]	; (8002968 <HAL_RCC_OscConfig+0x2c8>)
 80026b6:	688a      	ldr	r2, [r1, #8]
 80026b8:	f002 020c 	and.w	r2, r2, #12
 80026bc:	2a04      	cmp	r2, #4
 80026be:	f000 80ea 	beq.w	8002896 <HAL_RCC_OscConfig+0x1f6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026c2:	688a      	ldr	r2, [r1, #8]
 80026c4:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026c8:	2a08      	cmp	r2, #8
 80026ca:	f000 80e0 	beq.w	800288e <HAL_RCC_OscConfig+0x1ee>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026ce:	6863      	ldr	r3, [r4, #4]
 80026d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026d4:	f000 80e9 	beq.w	80028aa <HAL_RCC_OscConfig+0x20a>
 80026d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026dc:	f000 8178 	beq.w	80029d0 <HAL_RCC_OscConfig+0x330>
 80026e0:	4da1      	ldr	r5, [pc, #644]	; (8002968 <HAL_RCC_OscConfig+0x2c8>)
 80026e2:	682a      	ldr	r2, [r5, #0]
 80026e4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80026e8:	602a      	str	r2, [r5, #0]
 80026ea:	682a      	ldr	r2, [r5, #0]
 80026ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026f0:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f040 80de 	bne.w	80028b4 <HAL_RCC_OscConfig+0x214>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f8:	f7ff f95e 	bl	80019b8 <HAL_GetTick>
 80026fc:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026fe:	e005      	b.n	800270c <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002700:	f7ff f95a 	bl	80019b8 <HAL_GetTick>
 8002704:	1b80      	subs	r0, r0, r6
 8002706:	2864      	cmp	r0, #100	; 0x64
 8002708:	f200 80f2 	bhi.w	80028f0 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800270c:	682b      	ldr	r3, [r5, #0]
 800270e:	039b      	lsls	r3, r3, #14
 8002710:	d4f6      	bmi.n	8002700 <HAL_RCC_OscConfig+0x60>
 8002712:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002714:	079f      	lsls	r7, r3, #30
 8002716:	d475      	bmi.n	8002804 <HAL_RCC_OscConfig+0x164>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002718:	071a      	lsls	r2, r3, #28
 800271a:	d515      	bpl.n	8002748 <HAL_RCC_OscConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800271c:	6963      	ldr	r3, [r4, #20]
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 80a5 	beq.w	800286e <HAL_RCC_OscConfig+0x1ce>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002724:	4b91      	ldr	r3, [pc, #580]	; (800296c <HAL_RCC_OscConfig+0x2cc>)

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002726:	4d90      	ldr	r5, [pc, #576]	; (8002968 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_ENABLE();
 8002728:	2201      	movs	r2, #1
 800272a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800272c:	f7ff f944 	bl	80019b8 <HAL_GetTick>
 8002730:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002732:	e005      	b.n	8002740 <HAL_RCC_OscConfig+0xa0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002734:	f7ff f940 	bl	80019b8 <HAL_GetTick>
 8002738:	1b80      	subs	r0, r0, r6
 800273a:	2802      	cmp	r0, #2
 800273c:	f200 80d8 	bhi.w	80028f0 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002740:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002742:	079b      	lsls	r3, r3, #30
 8002744:	d5f6      	bpl.n	8002734 <HAL_RCC_OscConfig+0x94>
 8002746:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002748:	0758      	lsls	r0, r3, #29
 800274a:	d53b      	bpl.n	80027c4 <HAL_RCC_OscConfig+0x124>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800274c:	4a86      	ldr	r2, [pc, #536]	; (8002968 <HAL_RCC_OscConfig+0x2c8>)
 800274e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002750:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8002754:	f040 80db 	bne.w	800290e <HAL_RCC_OscConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002758:	9301      	str	r3, [sp, #4]
 800275a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800275c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002760:	6413      	str	r3, [r2, #64]	; 0x40
 8002762:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002768:	9301      	str	r3, [sp, #4]
 800276a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800276c:	2601      	movs	r6, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800276e:	4d80      	ldr	r5, [pc, #512]	; (8002970 <HAL_RCC_OscConfig+0x2d0>)
 8002770:	682a      	ldr	r2, [r5, #0]
 8002772:	05d1      	lsls	r1, r2, #23
 8002774:	f140 80ac 	bpl.w	80028d0 <HAL_RCC_OscConfig+0x230>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002778:	68a3      	ldr	r3, [r4, #8]
 800277a:	2b01      	cmp	r3, #1
 800277c:	f000 80c9 	beq.w	8002912 <HAL_RCC_OscConfig+0x272>
 8002780:	2b05      	cmp	r3, #5
 8002782:	f000 812f 	beq.w	80029e4 <HAL_RCC_OscConfig+0x344>
 8002786:	4d78      	ldr	r5, [pc, #480]	; (8002968 <HAL_RCC_OscConfig+0x2c8>)
 8002788:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800278a:	f022 0201 	bic.w	r2, r2, #1
 800278e:	672a      	str	r2, [r5, #112]	; 0x70
 8002790:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002792:	f022 0204 	bic.w	r2, r2, #4
 8002796:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002798:	2b00      	cmp	r3, #0
 800279a:	f040 80bf 	bne.w	800291c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800279e:	f7ff f90b 	bl	80019b8 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027a2:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80027a6:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027a8:	e006      	b.n	80027b8 <HAL_RCC_OscConfig+0x118>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027aa:	f7ff f905 	bl	80019b8 <HAL_GetTick>
 80027ae:	eba0 0008 	sub.w	r0, r0, r8
 80027b2:	42b8      	cmp	r0, r7
 80027b4:	f200 809c 	bhi.w	80028f0 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80027ba:	0798      	lsls	r0, r3, #30
 80027bc:	d4f5      	bmi.n	80027aa <HAL_RCC_OscConfig+0x10a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027be:	2e00      	cmp	r6, #0
 80027c0:	f040 80dc 	bne.w	800297c <HAL_RCC_OscConfig+0x2dc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027c4:	69a0      	ldr	r0, [r4, #24]
 80027c6:	b1c8      	cbz	r0, 80027fc <HAL_RCC_OscConfig+0x15c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027c8:	4d67      	ldr	r5, [pc, #412]	; (8002968 <HAL_RCC_OscConfig+0x2c8>)
 80027ca:	68aa      	ldr	r2, [r5, #8]
 80027cc:	f002 020c 	and.w	r2, r2, #12
 80027d0:	2a08      	cmp	r2, #8
 80027d2:	f000 80d9 	beq.w	8002988 <HAL_RCC_OscConfig+0x2e8>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027d6:	4a67      	ldr	r2, [pc, #412]	; (8002974 <HAL_RCC_OscConfig+0x2d4>)
 80027d8:	2100      	movs	r1, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027da:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80027dc:	6011      	str	r1, [r2, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027de:	f000 810b 	beq.w	80029f8 <HAL_RCC_OscConfig+0x358>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e2:	f7ff f8e9 	bl	80019b8 <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027e6:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 80027e8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ea:	e004      	b.n	80027f6 <HAL_RCC_OscConfig+0x156>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ec:	f7ff f8e4 	bl	80019b8 <HAL_GetTick>
 80027f0:	1b40      	subs	r0, r0, r5
 80027f2:	2802      	cmp	r0, #2
 80027f4:	d87c      	bhi.n	80028f0 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027f6:	6823      	ldr	r3, [r4, #0]
 80027f8:	019b      	lsls	r3, r3, #6
 80027fa:	d4f7      	bmi.n	80027ec <HAL_RCC_OscConfig+0x14c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80027fc:	2000      	movs	r0, #0
}
 80027fe:	b002      	add	sp, #8
 8002800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002804:	4a58      	ldr	r2, [pc, #352]	; (8002968 <HAL_RCC_OscConfig+0x2c8>)
 8002806:	6891      	ldr	r1, [r2, #8]
 8002808:	f011 0f0c 	tst.w	r1, #12
 800280c:	d024      	beq.n	8002858 <HAL_RCC_OscConfig+0x1b8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800280e:	6891      	ldr	r1, [r2, #8]
 8002810:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002814:	2908      	cmp	r1, #8
 8002816:	d01c      	beq.n	8002852 <HAL_RCC_OscConfig+0x1b2>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002818:	68e3      	ldr	r3, [r4, #12]
 800281a:	2b00      	cmp	r3, #0
 800281c:	f000 8092 	beq.w	8002944 <HAL_RCC_OscConfig+0x2a4>
        __HAL_RCC_HSI_ENABLE();
 8002820:	4b55      	ldr	r3, [pc, #340]	; (8002978 <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002822:	4d51      	ldr	r5, [pc, #324]	; (8002968 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_ENABLE();
 8002824:	2201      	movs	r2, #1
 8002826:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002828:	f7ff f8c6 	bl	80019b8 <HAL_GetTick>
 800282c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800282e:	e004      	b.n	800283a <HAL_RCC_OscConfig+0x19a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002830:	f7ff f8c2 	bl	80019b8 <HAL_GetTick>
 8002834:	1b80      	subs	r0, r0, r6
 8002836:	2802      	cmp	r0, #2
 8002838:	d85a      	bhi.n	80028f0 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800283a:	682b      	ldr	r3, [r5, #0]
 800283c:	0798      	lsls	r0, r3, #30
 800283e:	d5f7      	bpl.n	8002830 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002840:	682b      	ldr	r3, [r5, #0]
 8002842:	6922      	ldr	r2, [r4, #16]
 8002844:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002848:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800284c:	602b      	str	r3, [r5, #0]
 800284e:	6823      	ldr	r3, [r4, #0]
 8002850:	e762      	b.n	8002718 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002852:	6852      	ldr	r2, [r2, #4]
 8002854:	0256      	lsls	r6, r2, #9
 8002856:	d4df      	bmi.n	8002818 <HAL_RCC_OscConfig+0x178>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002858:	4a43      	ldr	r2, [pc, #268]	; (8002968 <HAL_RCC_OscConfig+0x2c8>)
 800285a:	6812      	ldr	r2, [r2, #0]
 800285c:	0795      	lsls	r5, r2, #30
 800285e:	d54b      	bpl.n	80028f8 <HAL_RCC_OscConfig+0x258>
 8002860:	68e2      	ldr	r2, [r4, #12]
 8002862:	2a01      	cmp	r2, #1
 8002864:	d048      	beq.n	80028f8 <HAL_RCC_OscConfig+0x258>
        return HAL_ERROR;
 8002866:	2001      	movs	r0, #1
}
 8002868:	b002      	add	sp, #8
 800286a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 800286e:	4a3f      	ldr	r2, [pc, #252]	; (800296c <HAL_RCC_OscConfig+0x2cc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002870:	4d3d      	ldr	r5, [pc, #244]	; (8002968 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_DISABLE();
 8002872:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002874:	f7ff f8a0 	bl	80019b8 <HAL_GetTick>
 8002878:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800287a:	e004      	b.n	8002886 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800287c:	f7ff f89c 	bl	80019b8 <HAL_GetTick>
 8002880:	1b80      	subs	r0, r0, r6
 8002882:	2802      	cmp	r0, #2
 8002884:	d834      	bhi.n	80028f0 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002886:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002888:	079f      	lsls	r7, r3, #30
 800288a:	d4f7      	bmi.n	800287c <HAL_RCC_OscConfig+0x1dc>
 800288c:	e75b      	b.n	8002746 <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800288e:	684a      	ldr	r2, [r1, #4]
 8002890:	0250      	lsls	r0, r2, #9
 8002892:	f57f af1c 	bpl.w	80026ce <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002896:	4a34      	ldr	r2, [pc, #208]	; (8002968 <HAL_RCC_OscConfig+0x2c8>)
 8002898:	6812      	ldr	r2, [r2, #0]
 800289a:	0391      	lsls	r1, r2, #14
 800289c:	f57f af3a 	bpl.w	8002714 <HAL_RCC_OscConfig+0x74>
 80028a0:	6862      	ldr	r2, [r4, #4]
 80028a2:	2a00      	cmp	r2, #0
 80028a4:	f47f af36 	bne.w	8002714 <HAL_RCC_OscConfig+0x74>
 80028a8:	e7dd      	b.n	8002866 <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028aa:	4a2f      	ldr	r2, [pc, #188]	; (8002968 <HAL_RCC_OscConfig+0x2c8>)
 80028ac:	6813      	ldr	r3, [r2, #0]
 80028ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80028b4:	f7ff f880 	bl	80019b8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b8:	4d2b      	ldr	r5, [pc, #172]	; (8002968 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80028ba:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028bc:	e004      	b.n	80028c8 <HAL_RCC_OscConfig+0x228>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028be:	f7ff f87b 	bl	80019b8 <HAL_GetTick>
 80028c2:	1b80      	subs	r0, r0, r6
 80028c4:	2864      	cmp	r0, #100	; 0x64
 80028c6:	d813      	bhi.n	80028f0 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c8:	682b      	ldr	r3, [r5, #0]
 80028ca:	039a      	lsls	r2, r3, #14
 80028cc:	d5f7      	bpl.n	80028be <HAL_RCC_OscConfig+0x21e>
 80028ce:	e720      	b.n	8002712 <HAL_RCC_OscConfig+0x72>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028d0:	682a      	ldr	r2, [r5, #0]
 80028d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028d6:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 80028d8:	f7ff f86e 	bl	80019b8 <HAL_GetTick>
 80028dc:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028de:	682b      	ldr	r3, [r5, #0]
 80028e0:	05da      	lsls	r2, r3, #23
 80028e2:	f53f af49 	bmi.w	8002778 <HAL_RCC_OscConfig+0xd8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028e6:	f7ff f867 	bl	80019b8 <HAL_GetTick>
 80028ea:	1bc0      	subs	r0, r0, r7
 80028ec:	2802      	cmp	r0, #2
 80028ee:	d9f6      	bls.n	80028de <HAL_RCC_OscConfig+0x23e>
            return HAL_TIMEOUT;
 80028f0:	2003      	movs	r0, #3
}
 80028f2:	b002      	add	sp, #8
 80028f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f8:	491b      	ldr	r1, [pc, #108]	; (8002968 <HAL_RCC_OscConfig+0x2c8>)
 80028fa:	6920      	ldr	r0, [r4, #16]
 80028fc:	680a      	ldr	r2, [r1, #0]
 80028fe:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002902:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8002906:	600a      	str	r2, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002908:	e706      	b.n	8002718 <HAL_RCC_OscConfig+0x78>
    return HAL_ERROR;
 800290a:	2001      	movs	r0, #1
}
 800290c:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 800290e:	2600      	movs	r6, #0
 8002910:	e72d      	b.n	800276e <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002912:	4a15      	ldr	r2, [pc, #84]	; (8002968 <HAL_RCC_OscConfig+0x2c8>)
 8002914:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002916:	f043 0301 	orr.w	r3, r3, #1
 800291a:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 800291c:	f7ff f84c 	bl	80019b8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002920:	4d11      	ldr	r5, [pc, #68]	; (8002968 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8002922:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002924:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002928:	e005      	b.n	8002936 <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800292a:	f7ff f845 	bl	80019b8 <HAL_GetTick>
 800292e:	eba0 0008 	sub.w	r0, r0, r8
 8002932:	42b8      	cmp	r0, r7
 8002934:	d8dc      	bhi.n	80028f0 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002936:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002938:	079b      	lsls	r3, r3, #30
 800293a:	d5f6      	bpl.n	800292a <HAL_RCC_OscConfig+0x28a>
    if(pwrclkchanged == SET)
 800293c:	2e00      	cmp	r6, #0
 800293e:	f43f af41 	beq.w	80027c4 <HAL_RCC_OscConfig+0x124>
 8002942:	e01b      	b.n	800297c <HAL_RCC_OscConfig+0x2dc>
        __HAL_RCC_HSI_DISABLE();
 8002944:	4a0c      	ldr	r2, [pc, #48]	; (8002978 <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002946:	4d08      	ldr	r5, [pc, #32]	; (8002968 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_DISABLE();
 8002948:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800294a:	f7ff f835 	bl	80019b8 <HAL_GetTick>
 800294e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002950:	e004      	b.n	800295c <HAL_RCC_OscConfig+0x2bc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002952:	f7ff f831 	bl	80019b8 <HAL_GetTick>
 8002956:	1b80      	subs	r0, r0, r6
 8002958:	2802      	cmp	r0, #2
 800295a:	d8c9      	bhi.n	80028f0 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800295c:	682b      	ldr	r3, [r5, #0]
 800295e:	0799      	lsls	r1, r3, #30
 8002960:	d4f7      	bmi.n	8002952 <HAL_RCC_OscConfig+0x2b2>
 8002962:	6823      	ldr	r3, [r4, #0]
 8002964:	e6d8      	b.n	8002718 <HAL_RCC_OscConfig+0x78>
 8002966:	bf00      	nop
 8002968:	40023800 	.word	0x40023800
 800296c:	42470e80 	.word	0x42470e80
 8002970:	40007000 	.word	0x40007000
 8002974:	42470060 	.word	0x42470060
 8002978:	42470000 	.word	0x42470000
      __HAL_RCC_PWR_CLK_DISABLE();
 800297c:	4a35      	ldr	r2, [pc, #212]	; (8002a54 <HAL_RCC_OscConfig+0x3b4>)
 800297e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002980:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002984:	6413      	str	r3, [r2, #64]	; 0x40
 8002986:	e71d      	b.n	80027c4 <HAL_RCC_OscConfig+0x124>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002988:	2801      	cmp	r0, #1
 800298a:	f43f af6d 	beq.w	8002868 <HAL_RCC_OscConfig+0x1c8>
        pll_config = RCC->PLLCFGR;
 800298e:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002990:	69e2      	ldr	r2, [r4, #28]
 8002992:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8002996:	4291      	cmp	r1, r2
 8002998:	f47f af65 	bne.w	8002866 <HAL_RCC_OscConfig+0x1c6>
 800299c:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800299e:	f003 013f 	and.w	r1, r3, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029a2:	4291      	cmp	r1, r2
 80029a4:	f47f af5f 	bne.w	8002866 <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80029a8:	f647 72c0 	movw	r2, #32704	; 0x7fc0
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80029ae:	401a      	ands	r2, r3
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029b0:	428a      	cmp	r2, r1
 80029b2:	f47f af58 	bne.w	8002866 <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80029b6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80029b8:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80029bc:	4291      	cmp	r1, r2
 80029be:	f47f af52 	bne.w	8002866 <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80029c2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80029c4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    return HAL_ERROR;
 80029c8:	1a18      	subs	r0, r3, r0
 80029ca:	bf18      	it	ne
 80029cc:	2001      	movne	r0, #1
 80029ce:	e74b      	b.n	8002868 <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029d0:	4b20      	ldr	r3, [pc, #128]	; (8002a54 <HAL_RCC_OscConfig+0x3b4>)
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80029d8:	601a      	str	r2, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	e767      	b.n	80028b4 <HAL_RCC_OscConfig+0x214>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029e4:	4b1b      	ldr	r3, [pc, #108]	; (8002a54 <HAL_RCC_OscConfig+0x3b4>)
 80029e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80029e8:	f042 0204 	orr.w	r2, r2, #4
 80029ec:	671a      	str	r2, [r3, #112]	; 0x70
 80029ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80029f0:	f042 0201 	orr.w	r2, r2, #1
 80029f4:	671a      	str	r2, [r3, #112]	; 0x70
 80029f6:	e791      	b.n	800291c <HAL_RCC_OscConfig+0x27c>
        tickstart = HAL_GetTick();
 80029f8:	f7fe ffde 	bl	80019b8 <HAL_GetTick>
 80029fc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029fe:	e005      	b.n	8002a0c <HAL_RCC_OscConfig+0x36c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a00:	f7fe ffda 	bl	80019b8 <HAL_GetTick>
 8002a04:	1b80      	subs	r0, r0, r6
 8002a06:	2802      	cmp	r0, #2
 8002a08:	f63f af72 	bhi.w	80028f0 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a0c:	682b      	ldr	r3, [r5, #0]
 8002a0e:	0199      	lsls	r1, r3, #6
 8002a10:	d4f6      	bmi.n	8002a00 <HAL_RCC_OscConfig+0x360>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a12:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
 8002a16:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 8002a1a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a1c:	4c0d      	ldr	r4, [pc, #52]	; (8002a54 <HAL_RCC_OscConfig+0x3b4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a1e:	4333      	orrs	r3, r6
 8002a20:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002a24:	0852      	lsrs	r2, r2, #1
 8002a26:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002a2a:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8002a2c:	490a      	ldr	r1, [pc, #40]	; (8002a58 <HAL_RCC_OscConfig+0x3b8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8002a32:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a34:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002a36:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 8002a38:	f7fe ffbe 	bl	80019b8 <HAL_GetTick>
 8002a3c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a3e:	e005      	b.n	8002a4c <HAL_RCC_OscConfig+0x3ac>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a40:	f7fe ffba 	bl	80019b8 <HAL_GetTick>
 8002a44:	1b40      	subs	r0, r0, r5
 8002a46:	2802      	cmp	r0, #2
 8002a48:	f63f af52 	bhi.w	80028f0 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a4c:	6823      	ldr	r3, [r4, #0]
 8002a4e:	019a      	lsls	r2, r3, #6
 8002a50:	d5f6      	bpl.n	8002a40 <HAL_RCC_OscConfig+0x3a0>
 8002a52:	e6d3      	b.n	80027fc <HAL_RCC_OscConfig+0x15c>
 8002a54:	40023800 	.word	0x40023800
 8002a58:	42470060 	.word	0x42470060

08002a5c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a5c:	4917      	ldr	r1, [pc, #92]	; (8002abc <HAL_RCC_GetSysClockFreq+0x60>)
{
 8002a5e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a60:	688b      	ldr	r3, [r1, #8]
 8002a62:	f003 030c 	and.w	r3, r3, #12
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	d01b      	beq.n	8002aa2 <HAL_RCC_GetSysClockFreq+0x46>
 8002a6a:	2b08      	cmp	r3, #8
 8002a6c:	d117      	bne.n	8002a9e <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a6e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a70:	684b      	ldr	r3, [r1, #4]
 8002a72:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a76:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a7a:	d114      	bne.n	8002aa6 <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a7c:	6849      	ldr	r1, [r1, #4]
 8002a7e:	4810      	ldr	r0, [pc, #64]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x64>)
 8002a80:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002a84:	fba1 0100 	umull	r0, r1, r1, r0
 8002a88:	f7fe f8e6 	bl	8000c58 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a8c:	4b0b      	ldr	r3, [pc, #44]	; (8002abc <HAL_RCC_GetSysClockFreq+0x60>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002a94:	3301      	adds	r3, #1
 8002a96:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002a98:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002a9c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8002a9e:	4808      	ldr	r0, [pc, #32]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8002aa0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8002aa2:	4808      	ldr	r0, [pc, #32]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x68>)
}
 8002aa4:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aa6:	684b      	ldr	r3, [r1, #4]
 8002aa8:	4806      	ldr	r0, [pc, #24]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x68>)
 8002aaa:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002aae:	fba3 0100 	umull	r0, r1, r3, r0
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	f7fe f8d0 	bl	8000c58 <__aeabi_uldivmod>
 8002ab8:	e7e8      	b.n	8002a8c <HAL_RCC_GetSysClockFreq+0x30>
 8002aba:	bf00      	nop
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	00f42400 	.word	0x00f42400
 8002ac4:	007a1200 	.word	0x007a1200

08002ac8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002ac8:	b160      	cbz	r0, 8002ae4 <HAL_RCC_ClockConfig+0x1c>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002aca:	4a49      	ldr	r2, [pc, #292]	; (8002bf0 <HAL_RCC_ClockConfig+0x128>)
 8002acc:	6813      	ldr	r3, [r2, #0]
 8002ace:	f003 030f 	and.w	r3, r3, #15
 8002ad2:	428b      	cmp	r3, r1
 8002ad4:	d208      	bcs.n	8002ae8 <HAL_RCC_ClockConfig+0x20>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ad6:	b2cb      	uxtb	r3, r1
 8002ad8:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ada:	6813      	ldr	r3, [r2, #0]
 8002adc:	f003 030f 	and.w	r3, r3, #15
 8002ae0:	428b      	cmp	r3, r1
 8002ae2:	d001      	beq.n	8002ae8 <HAL_RCC_ClockConfig+0x20>
    return HAL_ERROR;
 8002ae4:	2001      	movs	r0, #1
}
 8002ae6:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ae8:	6803      	ldr	r3, [r0, #0]
{
 8002aea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aee:	079d      	lsls	r5, r3, #30
 8002af0:	d514      	bpl.n	8002b1c <HAL_RCC_ClockConfig+0x54>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002af2:	075c      	lsls	r4, r3, #29
 8002af4:	d504      	bpl.n	8002b00 <HAL_RCC_ClockConfig+0x38>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002af6:	4c3f      	ldr	r4, [pc, #252]	; (8002bf4 <HAL_RCC_ClockConfig+0x12c>)
 8002af8:	68a2      	ldr	r2, [r4, #8]
 8002afa:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8002afe:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b00:	071a      	lsls	r2, r3, #28
 8002b02:	d504      	bpl.n	8002b0e <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b04:	4c3b      	ldr	r4, [pc, #236]	; (8002bf4 <HAL_RCC_ClockConfig+0x12c>)
 8002b06:	68a2      	ldr	r2, [r4, #8]
 8002b08:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8002b0c:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b0e:	4c39      	ldr	r4, [pc, #228]	; (8002bf4 <HAL_RCC_ClockConfig+0x12c>)
 8002b10:	6885      	ldr	r5, [r0, #8]
 8002b12:	68a2      	ldr	r2, [r4, #8]
 8002b14:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002b18:	432a      	orrs	r2, r5
 8002b1a:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b1c:	07df      	lsls	r7, r3, #31
 8002b1e:	4604      	mov	r4, r0
 8002b20:	460d      	mov	r5, r1
 8002b22:	d522      	bpl.n	8002b6a <HAL_RCC_ClockConfig+0xa2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b24:	6842      	ldr	r2, [r0, #4]
 8002b26:	2a01      	cmp	r2, #1
 8002b28:	d057      	beq.n	8002bda <HAL_RCC_ClockConfig+0x112>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b2a:	1e93      	subs	r3, r2, #2
 8002b2c:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b2e:	4b31      	ldr	r3, [pc, #196]	; (8002bf4 <HAL_RCC_ClockConfig+0x12c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b32:	d959      	bls.n	8002be8 <HAL_RCC_ClockConfig+0x120>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b34:	0799      	lsls	r1, r3, #30
 8002b36:	d525      	bpl.n	8002b84 <HAL_RCC_ClockConfig+0xbc>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b38:	4e2e      	ldr	r6, [pc, #184]	; (8002bf4 <HAL_RCC_ClockConfig+0x12c>)
 8002b3a:	68b3      	ldr	r3, [r6, #8]
 8002b3c:	f023 0303 	bic.w	r3, r3, #3
 8002b40:	4313      	orrs	r3, r2
 8002b42:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002b44:	f7fe ff38 	bl	80019b8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b48:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002b4c:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b4e:	e005      	b.n	8002b5c <HAL_RCC_ClockConfig+0x94>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b50:	f7fe ff32 	bl	80019b8 <HAL_GetTick>
 8002b54:	eba0 0008 	sub.w	r0, r0, r8
 8002b58:	42b8      	cmp	r0, r7
 8002b5a:	d843      	bhi.n	8002be4 <HAL_RCC_ClockConfig+0x11c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b5c:	68b3      	ldr	r3, [r6, #8]
 8002b5e:	6862      	ldr	r2, [r4, #4]
 8002b60:	f003 030c 	and.w	r3, r3, #12
 8002b64:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002b68:	d1f2      	bne.n	8002b50 <HAL_RCC_ClockConfig+0x88>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b6a:	4a21      	ldr	r2, [pc, #132]	; (8002bf0 <HAL_RCC_ClockConfig+0x128>)
 8002b6c:	6813      	ldr	r3, [r2, #0]
 8002b6e:	f003 030f 	and.w	r3, r3, #15
 8002b72:	42ab      	cmp	r3, r5
 8002b74:	d909      	bls.n	8002b8a <HAL_RCC_ClockConfig+0xc2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b76:	b2eb      	uxtb	r3, r5
 8002b78:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b7a:	6813      	ldr	r3, [r2, #0]
 8002b7c:	f003 030f 	and.w	r3, r3, #15
 8002b80:	42ab      	cmp	r3, r5
 8002b82:	d002      	beq.n	8002b8a <HAL_RCC_ClockConfig+0xc2>
    return HAL_ERROR;
 8002b84:	2001      	movs	r0, #1
}
 8002b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b8a:	6823      	ldr	r3, [r4, #0]
 8002b8c:	075a      	lsls	r2, r3, #29
 8002b8e:	d506      	bpl.n	8002b9e <HAL_RCC_ClockConfig+0xd6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b90:	4918      	ldr	r1, [pc, #96]	; (8002bf4 <HAL_RCC_ClockConfig+0x12c>)
 8002b92:	68e0      	ldr	r0, [r4, #12]
 8002b94:	688a      	ldr	r2, [r1, #8]
 8002b96:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8002b9a:	4302      	orrs	r2, r0
 8002b9c:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b9e:	071b      	lsls	r3, r3, #28
 8002ba0:	d412      	bmi.n	8002bc8 <HAL_RCC_ClockConfig+0x100>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ba2:	f7ff ff5b 	bl	8002a5c <HAL_RCC_GetSysClockFreq>
 8002ba6:	4b13      	ldr	r3, [pc, #76]	; (8002bf4 <HAL_RCC_ClockConfig+0x12c>)
 8002ba8:	4c13      	ldr	r4, [pc, #76]	; (8002bf8 <HAL_RCC_ClockConfig+0x130>)
 8002baa:	689b      	ldr	r3, [r3, #8]
  HAL_InitTick (uwTickPrio);
 8002bac:	4913      	ldr	r1, [pc, #76]	; (8002bfc <HAL_RCC_ClockConfig+0x134>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bae:	4a14      	ldr	r2, [pc, #80]	; (8002c00 <HAL_RCC_ClockConfig+0x138>)
 8002bb0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002bb4:	5ce3      	ldrb	r3, [r4, r3]
 8002bb6:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (uwTickPrio);
 8002bba:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bbc:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 8002bbe:	f7fe fc8f 	bl	80014e0 <HAL_InitTick>
  return HAL_OK;
 8002bc2:	2000      	movs	r0, #0
}
 8002bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bc8:	4a0a      	ldr	r2, [pc, #40]	; (8002bf4 <HAL_RCC_ClockConfig+0x12c>)
 8002bca:	6921      	ldr	r1, [r4, #16]
 8002bcc:	6893      	ldr	r3, [r2, #8]
 8002bce:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002bd2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002bd6:	6093      	str	r3, [r2, #8]
 8002bd8:	e7e3      	b.n	8002ba2 <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bda:	4b06      	ldr	r3, [pc, #24]	; (8002bf4 <HAL_RCC_ClockConfig+0x12c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	039e      	lsls	r6, r3, #14
 8002be0:	d4aa      	bmi.n	8002b38 <HAL_RCC_ClockConfig+0x70>
 8002be2:	e7cf      	b.n	8002b84 <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 8002be4:	2003      	movs	r0, #3
 8002be6:	e7ed      	b.n	8002bc4 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002be8:	0198      	lsls	r0, r3, #6
 8002bea:	d4a5      	bmi.n	8002b38 <HAL_RCC_ClockConfig+0x70>
 8002bec:	e7ca      	b.n	8002b84 <HAL_RCC_ClockConfig+0xbc>
 8002bee:	bf00      	nop
 8002bf0:	40023c00 	.word	0x40023c00
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	0800a114 	.word	0x0800a114
 8002bfc:	2000001c 	.word	0x2000001c
 8002c00:	20000000 	.word	0x20000000

08002c04 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8002c04:	4b01      	ldr	r3, [pc, #4]	; (8002c0c <HAL_RCC_GetHCLKFreq+0x8>)
}
 8002c06:	6818      	ldr	r0, [r3, #0]
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	20000000 	.word	0x20000000

08002c10 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c10:	4b04      	ldr	r3, [pc, #16]	; (8002c24 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002c12:	4a05      	ldr	r2, [pc, #20]	; (8002c28 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002c14:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8002c16:	4905      	ldr	r1, [pc, #20]	; (8002c2c <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c18:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002c1c:	6808      	ldr	r0, [r1, #0]
 8002c1e:	5cd3      	ldrb	r3, [r2, r3]
}
 8002c20:	40d8      	lsrs	r0, r3
 8002c22:	4770      	bx	lr
 8002c24:	40023800 	.word	0x40023800
 8002c28:	0800a124 	.word	0x0800a124
 8002c2c:	20000000 	.word	0x20000000

08002c30 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c30:	4b04      	ldr	r3, [pc, #16]	; (8002c44 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002c32:	4a05      	ldr	r2, [pc, #20]	; (8002c48 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002c34:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8002c36:	4905      	ldr	r1, [pc, #20]	; (8002c4c <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c38:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002c3c:	6808      	ldr	r0, [r1, #0]
 8002c3e:	5cd3      	ldrb	r3, [r2, r3]
}
 8002c40:	40d8      	lsrs	r0, r3
 8002c42:	4770      	bx	lr
 8002c44:	40023800 	.word	0x40023800
 8002c48:	0800a124 	.word	0x0800a124
 8002c4c:	20000000 	.word	0x20000000

08002c50 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002c50:	4b0e      	ldr	r3, [pc, #56]	; (8002c8c <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c52:	220f      	movs	r2, #15
 8002c54:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	f002 0203 	and.w	r2, r2, #3
 8002c5c:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002c64:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8002c6c:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	08db      	lsrs	r3, r3, #3
{
 8002c72:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002c74:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002c78:	4c05      	ldr	r4, [pc, #20]	; (8002c90 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002c7a:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002c7c:	6823      	ldr	r3, [r4, #0]
}
 8002c7e:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002c82:	f003 030f 	and.w	r3, r3, #15
 8002c86:	600b      	str	r3, [r1, #0]
}
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	40023c00 	.word	0x40023c00

08002c94 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c94:	2800      	cmp	r0, #0
 8002c96:	d046      	beq.n	8002d26 <HAL_TIM_Base_Init+0x92>
{
 8002c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c9a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002c9e:	4604      	mov	r4, r0
 8002ca0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002ca4:	b333      	cbz	r3, 8002cf4 <HAL_TIM_Base_Init+0x60>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ca6:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ca8:	4d28      	ldr	r5, [pc, #160]	; (8002d4c <HAL_TIM_Base_Init+0xb8>)
 8002caa:	69a6      	ldr	r6, [r4, #24]
 8002cac:	68e0      	ldr	r0, [r4, #12]
 8002cae:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cb6:	42aa      	cmp	r2, r5
  tmpcr1 = TIMx->CR1;
 8002cb8:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cba:	d036      	beq.n	8002d2a <HAL_TIM_Base_Init+0x96>
 8002cbc:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8002cc0:	d01d      	beq.n	8002cfe <HAL_TIM_Base_Init+0x6a>
 8002cc2:	f5a5 457c 	sub.w	r5, r5, #64512	; 0xfc00
 8002cc6:	42aa      	cmp	r2, r5
 8002cc8:	d019      	beq.n	8002cfe <HAL_TIM_Base_Init+0x6a>
 8002cca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002cce:	42aa      	cmp	r2, r5
 8002cd0:	d015      	beq.n	8002cfe <HAL_TIM_Base_Init+0x6a>
 8002cd2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002cd6:	42aa      	cmp	r2, r5
 8002cd8:	d011      	beq.n	8002cfe <HAL_TIM_Base_Init+0x6a>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cda:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 8002cde:	42aa      	cmp	r2, r5
 8002ce0:	d011      	beq.n	8002d06 <HAL_TIM_Base_Init+0x72>
 8002ce2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002ce6:	42aa      	cmp	r2, r5
 8002ce8:	d00d      	beq.n	8002d06 <HAL_TIM_Base_Init+0x72>
 8002cea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002cee:	42aa      	cmp	r2, r5
 8002cf0:	d10d      	bne.n	8002d0e <HAL_TIM_Base_Init+0x7a>
 8002cf2:	e008      	b.n	8002d06 <HAL_TIM_Base_Init+0x72>
    htim->Lock = HAL_UNLOCKED;
 8002cf4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002cf8:	f7fe fbb0 	bl	800145c <HAL_TIM_Base_MspInit>
 8002cfc:	e7d3      	b.n	8002ca6 <HAL_TIM_Base_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 8002cfe:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002d04:	432b      	orrs	r3, r5
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d06:	6925      	ldr	r5, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d0c:	432b      	orrs	r3, r5
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d12:	4333      	orrs	r3, r6

  TIMx->CR1 = tmpcr1;
 8002d14:	6013      	str	r3, [r2, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d16:	62d0      	str	r0, [r2, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d18:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 8002d1e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002d20:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8002d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8002d26:	2001      	movs	r0, #1
}
 8002d28:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8002d2a:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d2c:	6925      	ldr	r5, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002d32:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d38:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d3e:	4333      	orrs	r3, r6
  TIMx->CR1 = tmpcr1;
 8002d40:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d42:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002d44:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8002d46:	6963      	ldr	r3, [r4, #20]
 8002d48:	6313      	str	r3, [r2, #48]	; 0x30
 8002d4a:	e7e6      	b.n	8002d1a <HAL_TIM_Base_Init+0x86>
 8002d4c:	40010000 	.word	0x40010000

08002d50 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d50:	6803      	ldr	r3, [r0, #0]
 8002d52:	68da      	ldr	r2, [r3, #12]
 8002d54:	f042 0201 	orr.w	r2, r2, #1
 8002d58:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d60:	2a06      	cmp	r2, #6
 8002d62:	d003      	beq.n	8002d6c <HAL_TIM_Base_Start_IT+0x1c>
    __HAL_TIM_ENABLE(htim);
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	f042 0201 	orr.w	r2, r2, #1
 8002d6a:	601a      	str	r2, [r3, #0]
}
 8002d6c:	2000      	movs	r0, #0
 8002d6e:	4770      	bx	lr

08002d70 <HAL_TIM_PWM_MspInit>:
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop

08002d74 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8002d74:	2800      	cmp	r0, #0
 8002d76:	d046      	beq.n	8002e06 <HAL_TIM_PWM_Init+0x92>
{
 8002d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8002d7a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002d7e:	4604      	mov	r4, r0
 8002d80:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002d84:	b333      	cbz	r3, 8002dd4 <HAL_TIM_PWM_Init+0x60>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d86:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d88:	4d28      	ldr	r5, [pc, #160]	; (8002e2c <HAL_TIM_PWM_Init+0xb8>)
 8002d8a:	69a6      	ldr	r6, [r4, #24]
 8002d8c:	68e0      	ldr	r0, [r4, #12]
 8002d8e:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 8002d90:	2302      	movs	r3, #2
 8002d92:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d96:	42aa      	cmp	r2, r5
  tmpcr1 = TIMx->CR1;
 8002d98:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d9a:	d036      	beq.n	8002e0a <HAL_TIM_PWM_Init+0x96>
 8002d9c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8002da0:	d01d      	beq.n	8002dde <HAL_TIM_PWM_Init+0x6a>
 8002da2:	f5a5 457c 	sub.w	r5, r5, #64512	; 0xfc00
 8002da6:	42aa      	cmp	r2, r5
 8002da8:	d019      	beq.n	8002dde <HAL_TIM_PWM_Init+0x6a>
 8002daa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002dae:	42aa      	cmp	r2, r5
 8002db0:	d015      	beq.n	8002dde <HAL_TIM_PWM_Init+0x6a>
 8002db2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002db6:	42aa      	cmp	r2, r5
 8002db8:	d011      	beq.n	8002dde <HAL_TIM_PWM_Init+0x6a>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dba:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 8002dbe:	42aa      	cmp	r2, r5
 8002dc0:	d011      	beq.n	8002de6 <HAL_TIM_PWM_Init+0x72>
 8002dc2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002dc6:	42aa      	cmp	r2, r5
 8002dc8:	d00d      	beq.n	8002de6 <HAL_TIM_PWM_Init+0x72>
 8002dca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002dce:	42aa      	cmp	r2, r5
 8002dd0:	d10d      	bne.n	8002dee <HAL_TIM_PWM_Init+0x7a>
 8002dd2:	e008      	b.n	8002de6 <HAL_TIM_PWM_Init+0x72>
    htim->Lock = HAL_UNLOCKED;
 8002dd4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002dd8:	f7ff ffca 	bl	8002d70 <HAL_TIM_PWM_MspInit>
 8002ddc:	e7d3      	b.n	8002d86 <HAL_TIM_PWM_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 8002dde:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002de4:	432b      	orrs	r3, r5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002de6:	6925      	ldr	r5, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002de8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dec:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002df2:	4333      	orrs	r3, r6
  TIMx->CR1 = tmpcr1;
 8002df4:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002df6:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002df8:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 8002dfe:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002e00:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8002e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8002e06:	2001      	movs	r0, #1
}
 8002e08:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8002e0a:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e0c:	6925      	ldr	r5, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002e12:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e18:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e1e:	4333      	orrs	r3, r6
  TIMx->CR1 = tmpcr1;
 8002e20:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e22:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002e24:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8002e26:	6963      	ldr	r3, [r4, #20]
 8002e28:	6313      	str	r3, [r2, #48]	; 0x30
 8002e2a:	e7e6      	b.n	8002dfa <HAL_TIM_PWM_Init+0x86>
 8002e2c:	40010000 	.word	0x40010000

08002e30 <HAL_TIM_PWM_Start>:
 8002e30:	6803      	ldr	r3, [r0, #0]
 8002e32:	2201      	movs	r2, #1
 8002e34:	6a18      	ldr	r0, [r3, #32]
 8002e36:	f001 011f 	and.w	r1, r1, #31
 8002e3a:	fa02 f101 	lsl.w	r1, r2, r1
 8002e3e:	ea20 0001 	bic.w	r0, r0, r1
 8002e42:	b410      	push	{r4}
 8002e44:	6218      	str	r0, [r3, #32]
 8002e46:	6a1a      	ldr	r2, [r3, #32]
 8002e48:	4c0b      	ldr	r4, [pc, #44]	; (8002e78 <HAL_TIM_PWM_Start+0x48>)
 8002e4a:	4311      	orrs	r1, r2
 8002e4c:	42a3      	cmp	r3, r4
 8002e4e:	6219      	str	r1, [r3, #32]
 8002e50:	d00c      	beq.n	8002e6c <HAL_TIM_PWM_Start+0x3c>
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	f002 0207 	and.w	r2, r2, #7
 8002e58:	2a06      	cmp	r2, #6
 8002e5a:	d003      	beq.n	8002e64 <HAL_TIM_PWM_Start+0x34>
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	f042 0201 	orr.w	r2, r2, #1
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	2000      	movs	r0, #0
 8002e66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e6a:	4770      	bx	lr
 8002e6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e72:	645a      	str	r2, [r3, #68]	; 0x44
 8002e74:	e7ed      	b.n	8002e52 <HAL_TIM_PWM_Start+0x22>
 8002e76:	bf00      	nop
 8002e78:	40010000 	.word	0x40010000

08002e7c <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8002e7c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	f000 80c8 	beq.w	8003016 <HAL_TIM_PWM_ConfigChannel+0x19a>
{
 8002e86:	b5f0      	push	{r4, r5, r6, r7, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 8002e88:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8002e8a:	2401      	movs	r4, #1
 8002e8c:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002e90:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8002e94:	2a0c      	cmp	r2, #12
 8002e96:	d837      	bhi.n	8002f08 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8002e98:	e8df f002 	tbb	[pc, r2]
 8002e9c:	3636363e 	.word	0x3636363e
 8002ea0:	36363668 	.word	0x36363668
 8002ea4:	36363693 	.word	0x36363693
 8002ea8:	07          	.byte	0x07
 8002ea9:	00          	.byte	0x00
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002eaa:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002eac:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002eae:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002eb0:	680e      	ldr	r6, [r1, #0]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eb2:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 8003074 <HAL_TIM_PWM_ConfigChannel+0x1f8>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002eb6:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 8002eba:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8002ebc:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8002ebe:	f8d3 e004 	ldr.w	lr, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8002ec2:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8002ec4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ec8:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ecc:	4563      	cmp	r3, ip
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ece:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ed2:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ed6:	d104      	bne.n	8002ee2 <HAL_TIM_PWM_ConfigChannel+0x66>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ed8:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002eda:	f42e 4e80 	bic.w	lr, lr, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ede:	ea4e 1e85 	orr.w	lr, lr, r5, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ee2:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002ee4:	f8c3 e004 	str.w	lr, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002ee8:	61dc      	str	r4, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8002eea:	641d      	str	r5, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eec:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002eee:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ef0:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ef2:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8002ef6:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ef8:	69d9      	ldr	r1, [r3, #28]
 8002efa:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002efe:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f00:	69da      	ldr	r2, [r3, #28]
 8002f02:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8002f06:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8002f08:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002f10:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8002f14:	4618      	mov	r0, r3
}
 8002f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f18:	6803      	ldr	r3, [r0, #0]
  tmpccer |= OC_Config->OCPolarity;
 8002f1a:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f1e:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8002f20:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f22:	4e54      	ldr	r6, [pc, #336]	; (8003074 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f24:	f025 0501 	bic.w	r5, r5, #1
 8002f28:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8002f2a:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8002f2c:	f8d3 c004 	ldr.w	ip, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8002f30:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 8002f32:	f022 0202 	bic.w	r2, r2, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f36:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f3a:	42b3      	cmp	r3, r6
  tmpccer |= OC_Config->OCPolarity;
 8002f3c:	ea42 020e 	orr.w	r2, r2, lr
  tmpccmrx |= OC_Config->OCMode;
 8002f40:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f44:	d078      	beq.n	8003038 <HAL_TIM_PWM_ConfigChannel+0x1bc>
  TIMx->CCR1 = OC_Config->Pulse;
 8002f46:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002f48:	f8c3 c004 	str.w	ip, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002f4c:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8002f4e:	635d      	str	r5, [r3, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8002f50:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f52:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f54:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f56:	f044 0408 	orr.w	r4, r4, #8
 8002f5a:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f5c:	6999      	ldr	r1, [r3, #24]
 8002f5e:	f021 0104 	bic.w	r1, r1, #4
 8002f62:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f64:	699a      	ldr	r2, [r3, #24]
 8002f66:	432a      	orrs	r2, r5
 8002f68:	619a      	str	r2, [r3, #24]
      break;
 8002f6a:	e7cd      	b.n	8002f08 <HAL_TIM_PWM_ConfigChannel+0x8c>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f6c:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f6e:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f70:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f72:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f74:	f8df e0fc 	ldr.w	lr, [pc, #252]	; 8003074 <HAL_TIM_PWM_ConfigChannel+0x1f8>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f78:	f025 0510 	bic.w	r5, r5, #16
 8002f7c:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8002f7e:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8002f80:	f8d3 c004 	ldr.w	ip, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8002f84:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8002f86:	f022 0220 	bic.w	r2, r2, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f8a:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f8e:	4573      	cmp	r3, lr
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f90:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f94:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f98:	d05c      	beq.n	8003054 <HAL_TIM_PWM_ConfigChannel+0x1d8>
  TIMx->CCR2 = OC_Config->Pulse;
 8002f9a:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002f9c:	f8c3 c004 	str.w	ip, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002fa0:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002fa2:	639d      	str	r5, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002fa4:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fa6:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002fa8:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002faa:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8002fae:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002fb0:	6999      	ldr	r1, [r3, #24]
 8002fb2:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002fb6:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002fb8:	699a      	ldr	r2, [r3, #24]
 8002fba:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8002fbe:	619a      	str	r2, [r3, #24]
      break;
 8002fc0:	e7a2      	b.n	8002f08 <HAL_TIM_PWM_ConfigChannel+0x8c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002fc2:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002fc4:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002fc6:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8002fc8:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002fca:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 8003074 <HAL_TIM_PWM_ConfigChannel+0x1f8>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002fce:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 8002fd2:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8002fd4:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8002fd6:	f8d3 c004 	ldr.w	ip, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8002fda:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8002fdc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002fe0:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002fe4:	4573      	cmp	r3, lr
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002fe6:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 8002fea:	ea44 0406 	orr.w	r4, r4, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002fee:	d014      	beq.n	800301a <HAL_TIM_PWM_ConfigChannel+0x19e>
  TIMx->CCR3 = OC_Config->Pulse;
 8002ff0:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002ff2:	f8c3 c004 	str.w	ip, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002ff6:	61dc      	str	r4, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8002ff8:	63dd      	str	r5, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8002ffa:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ffc:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ffe:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003000:	f044 0408 	orr.w	r4, r4, #8
 8003004:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003006:	69d9      	ldr	r1, [r3, #28]
 8003008:	f021 0104 	bic.w	r1, r1, #4
 800300c:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800300e:	69da      	ldr	r2, [r3, #28]
 8003010:	432a      	orrs	r2, r5
 8003012:	61da      	str	r2, [r3, #28]
      break;
 8003014:	e778      	b.n	8002f08 <HAL_TIM_PWM_ConfigChannel+0x8c>
  __HAL_LOCK(htim);
 8003016:	2002      	movs	r0, #2
}
 8003018:	4770      	bx	lr
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800301a:	e9d1 7505 	ldrd	r7, r5, [r1, #20]
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800301e:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8003020:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003024:	f42c 5c40 	bic.w	ip, ip, #12288	; 0x3000
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003028:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800302c:	433d      	orrs	r5, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 800302e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003032:	ea4c 1c05 	orr.w	ip, ip, r5, lsl #4
 8003036:	e7db      	b.n	8002ff0 <HAL_TIM_PWM_ConfigChannel+0x174>
    tmpcr2 |= OC_Config->OCNIdleState;
 8003038:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpccer |= OC_Config->OCNPolarity;
 800303c:	68cf      	ldr	r7, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800303e:	f022 0208 	bic.w	r2, r2, #8
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003042:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    tmpccer |= OC_Config->OCNPolarity;
 8003046:	433a      	orrs	r2, r7
    tmpcr2 |= OC_Config->OCNIdleState;
 8003048:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 800304a:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800304e:	ea45 0c0c 	orr.w	ip, r5, ip
 8003052:	e778      	b.n	8002f46 <HAL_TIM_PWM_ConfigChannel+0xca>
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003054:	e9d1 7505 	ldrd	r7, r5, [r1, #20]
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003058:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800305a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800305e:	f42c 6c40 	bic.w	ip, ip, #3072	; 0xc00
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003062:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003066:	433d      	orrs	r5, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 8003068:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800306c:	ea4c 0c85 	orr.w	ip, ip, r5, lsl #2
 8003070:	e793      	b.n	8002f9a <HAL_TIM_PWM_ConfigChannel+0x11e>
 8003072:	bf00      	nop
 8003074:	40010000 	.word	0x40010000

08003078 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003078:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800307c:	2b01      	cmp	r3, #1
 800307e:	d05a      	beq.n	8003136 <HAL_TIM_ConfigClockSource+0xbe>
  htim->State = HAL_TIM_STATE_BUSY;
 8003080:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 8003082:	6803      	ldr	r3, [r0, #0]
{
 8003084:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 8003086:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800308a:	689a      	ldr	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 800308c:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800308e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003092:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  __HAL_LOCK(htim);
 8003096:	2501      	movs	r5, #1
  switch (sClockSourceConfig->ClockSource)
 8003098:	2c40      	cmp	r4, #64	; 0x40
  __HAL_LOCK(htim);
 800309a:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 800309e:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80030a0:	d074      	beq.n	800318c <HAL_TIM_ConfigClockSource+0x114>
 80030a2:	d94a      	bls.n	800313a <HAL_TIM_ConfigClockSource+0xc2>
 80030a4:	2c60      	cmp	r4, #96	; 0x60
 80030a6:	d02d      	beq.n	8003104 <HAL_TIM_ConfigClockSource+0x8c>
 80030a8:	d956      	bls.n	8003158 <HAL_TIM_ConfigClockSource+0xe0>
 80030aa:	2c70      	cmp	r4, #112	; 0x70
 80030ac:	d01a      	beq.n	80030e4 <HAL_TIM_ConfigClockSource+0x6c>
 80030ae:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 80030b2:	d10e      	bne.n	80030d2 <HAL_TIM_ConfigClockSource+0x5a>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030b4:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 80030b8:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 80030ba:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030bc:	432a      	orrs	r2, r5
 80030be:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030c2:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030c6:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030c8:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030d0:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 80030d2:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80030d4:	2201      	movs	r2, #1
 80030d6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80030da:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 80030de:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 80030e0:	4618      	mov	r0, r3
}
 80030e2:	4770      	bx	lr
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030e4:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 80030e8:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 80030ea:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030ec:	432a      	orrs	r2, r5
 80030ee:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030f2:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030f6:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 80030f8:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 80030fa:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030fc:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003100:	609a      	str	r2, [r3, #8]
      break;
 8003102:	e7e6      	b.n	80030d2 <HAL_TIM_ConfigClockSource+0x5a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003104:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003106:	684d      	ldr	r5, [r1, #4]
 8003108:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800310a:	f024 0410 	bic.w	r4, r4, #16
 800310e:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003110:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8003112:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003114:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003118:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800311c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003120:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003124:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8003126:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8003128:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800312a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800312e:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8003132:	609a      	str	r2, [r3, #8]
 8003134:	e7cd      	b.n	80030d2 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8003136:	2002      	movs	r0, #2
}
 8003138:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800313a:	2c10      	cmp	r4, #16
 800313c:	d004      	beq.n	8003148 <HAL_TIM_ConfigClockSource+0xd0>
 800313e:	d93d      	bls.n	80031bc <HAL_TIM_ConfigClockSource+0x144>
 8003140:	2c20      	cmp	r4, #32
 8003142:	d001      	beq.n	8003148 <HAL_TIM_ConfigClockSource+0xd0>
 8003144:	2c30      	cmp	r4, #48	; 0x30
 8003146:	d1c4      	bne.n	80030d2 <HAL_TIM_ConfigClockSource+0x5a>
  tmpsmcr = TIMx->SMCR;
 8003148:	689a      	ldr	r2, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800314a:	f044 0407 	orr.w	r4, r4, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 800314e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003152:	4314      	orrs	r4, r2
  TIMx->SMCR = tmpsmcr;
 8003154:	609c      	str	r4, [r3, #8]
 8003156:	e7bc      	b.n	80030d2 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8003158:	2c50      	cmp	r4, #80	; 0x50
 800315a:	d1ba      	bne.n	80030d2 <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 800315c:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800315e:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003160:	684c      	ldr	r4, [r1, #4]
 8003162:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003164:	f026 0601 	bic.w	r6, r6, #1
 8003168:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800316a:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800316c:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003170:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003174:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8003178:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 800317a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800317c:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800317e:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003180:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003184:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8003188:	609a      	str	r2, [r3, #8]
 800318a:	e7a2      	b.n	80030d2 <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 800318c:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800318e:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003190:	684c      	ldr	r4, [r1, #4]
 8003192:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003194:	f026 0601 	bic.w	r6, r6, #1
 8003198:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800319a:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800319c:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031a0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031a4:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 80031a8:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80031aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031ac:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 80031ae:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80031b0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031b4:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80031b8:	609a      	str	r2, [r3, #8]
 80031ba:	e78a      	b.n	80030d2 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80031bc:	2c00      	cmp	r4, #0
 80031be:	d0c3      	beq.n	8003148 <HAL_TIM_ConfigClockSource+0xd0>
 80031c0:	e787      	b.n	80030d2 <HAL_TIM_ConfigClockSource+0x5a>
 80031c2:	bf00      	nop

080031c4 <HAL_TIM_OC_DelayElapsedCallback>:
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop

080031c8 <HAL_TIM_IC_CaptureCallback>:
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop

080031cc <HAL_TIM_PWM_PulseFinishedCallback>:
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop

080031d0 <HAL_TIM_TriggerCallback>:
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop

080031d4 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031d4:	6803      	ldr	r3, [r0, #0]
 80031d6:	691a      	ldr	r2, [r3, #16]
 80031d8:	0791      	lsls	r1, r2, #30
{
 80031da:	b510      	push	{r4, lr}
 80031dc:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031de:	d502      	bpl.n	80031e6 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031e0:	68da      	ldr	r2, [r3, #12]
 80031e2:	0792      	lsls	r2, r2, #30
 80031e4:	d45f      	bmi.n	80032a6 <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031e6:	691a      	ldr	r2, [r3, #16]
 80031e8:	0750      	lsls	r0, r2, #29
 80031ea:	d502      	bpl.n	80031f2 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031ec:	68da      	ldr	r2, [r3, #12]
 80031ee:	0751      	lsls	r1, r2, #29
 80031f0:	d446      	bmi.n	8003280 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031f2:	691a      	ldr	r2, [r3, #16]
 80031f4:	0712      	lsls	r2, r2, #28
 80031f6:	d502      	bpl.n	80031fe <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031f8:	68da      	ldr	r2, [r3, #12]
 80031fa:	0710      	lsls	r0, r2, #28
 80031fc:	d42e      	bmi.n	800325c <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031fe:	691a      	ldr	r2, [r3, #16]
 8003200:	06d2      	lsls	r2, r2, #27
 8003202:	d502      	bpl.n	800320a <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003204:	68da      	ldr	r2, [r3, #12]
 8003206:	06d0      	lsls	r0, r2, #27
 8003208:	d418      	bmi.n	800323c <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800320a:	691a      	ldr	r2, [r3, #16]
 800320c:	07d1      	lsls	r1, r2, #31
 800320e:	d502      	bpl.n	8003216 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	07d2      	lsls	r2, r2, #31
 8003214:	d45d      	bmi.n	80032d2 <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003216:	691a      	ldr	r2, [r3, #16]
 8003218:	0610      	lsls	r0, r2, #24
 800321a:	d502      	bpl.n	8003222 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800321c:	68da      	ldr	r2, [r3, #12]
 800321e:	0611      	lsls	r1, r2, #24
 8003220:	d45f      	bmi.n	80032e2 <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003222:	691a      	ldr	r2, [r3, #16]
 8003224:	0652      	lsls	r2, r2, #25
 8003226:	d502      	bpl.n	800322e <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003228:	68da      	ldr	r2, [r3, #12]
 800322a:	0650      	lsls	r0, r2, #25
 800322c:	d461      	bmi.n	80032f2 <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800322e:	691a      	ldr	r2, [r3, #16]
 8003230:	0691      	lsls	r1, r2, #26
 8003232:	d502      	bpl.n	800323a <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003234:	68da      	ldr	r2, [r3, #12]
 8003236:	0692      	lsls	r2, r2, #26
 8003238:	d443      	bmi.n	80032c2 <HAL_TIM_IRQHandler+0xee>
}
 800323a:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800323c:	f06f 0210 	mvn.w	r2, #16
 8003240:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003242:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003244:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003246:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800324a:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800324c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800324e:	d064      	beq.n	800331a <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8003250:	f7ff ffba 	bl	80031c8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003254:	2200      	movs	r2, #0
 8003256:	6823      	ldr	r3, [r4, #0]
 8003258:	7722      	strb	r2, [r4, #28]
 800325a:	e7d6      	b.n	800320a <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800325c:	f06f 0208 	mvn.w	r2, #8
 8003260:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003262:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003264:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003266:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003268:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800326a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800326c:	d152      	bne.n	8003314 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800326e:	f7ff ffa9 	bl	80031c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003272:	4620      	mov	r0, r4
 8003274:	f7ff ffaa 	bl	80031cc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003278:	2200      	movs	r2, #0
 800327a:	6823      	ldr	r3, [r4, #0]
 800327c:	7722      	strb	r2, [r4, #28]
 800327e:	e7be      	b.n	80031fe <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003280:	f06f 0204 	mvn.w	r2, #4
 8003284:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003286:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003288:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800328a:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800328e:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8003290:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003292:	d13c      	bne.n	800330e <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003294:	f7ff ff96 	bl	80031c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003298:	4620      	mov	r0, r4
 800329a:	f7ff ff97 	bl	80031cc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800329e:	2200      	movs	r2, #0
 80032a0:	6823      	ldr	r3, [r4, #0]
 80032a2:	7722      	strb	r2, [r4, #28]
 80032a4:	e7a5      	b.n	80031f2 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032a6:	f06f 0202 	mvn.w	r2, #2
 80032aa:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032ac:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032ae:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032b0:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032b2:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032b4:	d025      	beq.n	8003302 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 80032b6:	f7ff ff87 	bl	80031c8 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ba:	2200      	movs	r2, #0
 80032bc:	6823      	ldr	r3, [r4, #0]
 80032be:	7722      	strb	r2, [r4, #28]
 80032c0:	e791      	b.n	80031e6 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032c2:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80032c6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032c8:	611a      	str	r2, [r3, #16]
}
 80032ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80032ce:	f000 b869 	b.w	80033a4 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032d2:	f06f 0201 	mvn.w	r2, #1
 80032d6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80032d8:	4620      	mov	r0, r4
 80032da:	f7fd ffa9 	bl	8001230 <HAL_TIM_PeriodElapsedCallback>
 80032de:	6823      	ldr	r3, [r4, #0]
 80032e0:	e799      	b.n	8003216 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032e2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032e6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80032e8:	4620      	mov	r0, r4
 80032ea:	f000 f85d 	bl	80033a8 <HAL_TIMEx_BreakCallback>
 80032ee:	6823      	ldr	r3, [r4, #0]
 80032f0:	e797      	b.n	8003222 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032f6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80032f8:	4620      	mov	r0, r4
 80032fa:	f7ff ff69 	bl	80031d0 <HAL_TIM_TriggerCallback>
 80032fe:	6823      	ldr	r3, [r4, #0]
 8003300:	e795      	b.n	800322e <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003302:	f7ff ff5f 	bl	80031c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003306:	4620      	mov	r0, r4
 8003308:	f7ff ff60 	bl	80031cc <HAL_TIM_PWM_PulseFinishedCallback>
 800330c:	e7d5      	b.n	80032ba <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 800330e:	f7ff ff5b 	bl	80031c8 <HAL_TIM_IC_CaptureCallback>
 8003312:	e7c4      	b.n	800329e <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8003314:	f7ff ff58 	bl	80031c8 <HAL_TIM_IC_CaptureCallback>
 8003318:	e7ae      	b.n	8003278 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800331a:	f7ff ff53 	bl	80031c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800331e:	4620      	mov	r0, r4
 8003320:	f7ff ff54 	bl	80031cc <HAL_TIM_PWM_PulseFinishedCallback>
 8003324:	e796      	b.n	8003254 <HAL_TIM_IRQHandler+0x80>
 8003326:	bf00      	nop

08003328 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003328:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800332c:	2b01      	cmp	r3, #1
 800332e:	d032      	beq.n	8003396 <HAL_TIMEx_MasterConfigSynchronization+0x6e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003330:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003332:	2202      	movs	r2, #2
{
 8003334:	b470      	push	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_BUSY;
 8003336:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 800333a:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800333c:	680e      	ldr	r6, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800333e:	4d17      	ldr	r5, [pc, #92]	; (800339c <HAL_TIMEx_MasterConfigSynchronization+0x74>)
  tmpsmcr = htim->Instance->SMCR;
 8003340:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003342:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003346:	4332      	orrs	r2, r6
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003348:	42ab      	cmp	r3, r5
  __HAL_LOCK(htim);
 800334a:	f04f 0601 	mov.w	r6, #1
 800334e:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c
  htim->Instance->CR2 = tmpcr2;
 8003352:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003354:	d011      	beq.n	800337a <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8003356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800335a:	d00e      	beq.n	800337a <HAL_TIMEx_MasterConfigSynchronization+0x52>
 800335c:	4a10      	ldr	r2, [pc, #64]	; (80033a0 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d00b      	beq.n	800337a <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8003362:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003366:	4293      	cmp	r3, r2
 8003368:	d007      	beq.n	800337a <HAL_TIMEx_MasterConfigSynchronization+0x52>
 800336a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800336e:	4293      	cmp	r3, r2
 8003370:	d003      	beq.n	800337a <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8003372:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8003376:	4293      	cmp	r3, r2
 8003378:	d104      	bne.n	8003384 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800337a:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800337c:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003380:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003382:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8003384:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8003386:	2201      	movs	r2, #1
 8003388:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800338c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8003390:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 8003392:	4618      	mov	r0, r3
}
 8003394:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003396:	2002      	movs	r0, #2
}
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	40010000 	.word	0x40010000
 80033a0:	40000400 	.word	0x40000400

080033a4 <HAL_TIMEx_CommutCallback>:
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop

080033a8 <HAL_TIMEx_BreakCallback>:
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop

080033ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80033ac:	b084      	sub	sp, #16
 80033ae:	b430      	push	{r4, r5}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80033b0:	9d08      	ldr	r5, [sp, #32]
{
 80033b2:	ac03      	add	r4, sp, #12
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80033b4:	2d01      	cmp	r5, #1
{
 80033b6:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80033ba:	d132      	bne.n	8003422 <USB_CoreInit+0x76>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80033bc:	6b83      	ldr	r3, [r0, #56]	; 0x38
    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
    if (cfg.use_external_vbus == 1U)
 80033be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80033c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033c4:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80033c6:	68c3      	ldr	r3, [r0, #12]
 80033c8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80033cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033d0:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80033d2:	68c3      	ldr	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 80033d4:	2a01      	cmp	r2, #1
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80033d6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80033da:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 80033dc:	d044      	beq.n	8003468 <USB_CoreInit+0xbc>
{
 80033de:	4b27      	ldr	r3, [pc, #156]	; (800347c <USB_CoreInit+0xd0>)
 80033e0:	e001      	b.n	80033e6 <USB_CoreInit+0x3a>
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80033e2:	3b01      	subs	r3, #1
 80033e4:	d045      	beq.n	8003472 <USB_CoreInit+0xc6>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80033e6:	6902      	ldr	r2, [r0, #16]
 80033e8:	2a00      	cmp	r2, #0
 80033ea:	dafa      	bge.n	80033e2 <USB_CoreInit+0x36>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80033ec:	6903      	ldr	r3, [r0, #16]
 80033ee:	4a23      	ldr	r2, [pc, #140]	; (800347c <USB_CoreInit+0xd0>)
 80033f0:	f043 0301 	orr.w	r3, r3, #1
 80033f4:	6103      	str	r3, [r0, #16]
 80033f6:	e001      	b.n	80033fc <USB_CoreInit+0x50>

  do
  {
    if (++count > 200000U)
 80033f8:	3a01      	subs	r2, #1
 80033fa:	d03a      	beq.n	8003472 <USB_CoreInit+0xc6>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80033fc:	6903      	ldr	r3, [r0, #16]
 80033fe:	f013 0301 	ands.w	r3, r3, #1
 8003402:	d1f9      	bne.n	80033f8 <USB_CoreInit+0x4c>
  if (cfg.dma_enable == 1U)
 8003404:	9a06      	ldr	r2, [sp, #24]
 8003406:	2a01      	cmp	r2, #1
 8003408:	d107      	bne.n	800341a <USB_CoreInit+0x6e>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800340a:	6882      	ldr	r2, [r0, #8]
 800340c:	f042 0206 	orr.w	r2, r2, #6
 8003410:	6082      	str	r2, [r0, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003412:	6882      	ldr	r2, [r0, #8]
 8003414:	f042 0220 	orr.w	r2, r2, #32
 8003418:	6082      	str	r2, [r0, #8]
}
 800341a:	bc30      	pop	{r4, r5}
 800341c:	4618      	mov	r0, r3
 800341e:	b004      	add	sp, #16
 8003420:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003422:	68c2      	ldr	r2, [r0, #12]
 8003424:	4b15      	ldr	r3, [pc, #84]	; (800347c <USB_CoreInit+0xd0>)
 8003426:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800342a:	60c2      	str	r2, [r0, #12]
 800342c:	e001      	b.n	8003432 <USB_CoreInit+0x86>
    if (++count > 200000U)
 800342e:	3b01      	subs	r3, #1
 8003430:	d021      	beq.n	8003476 <USB_CoreInit+0xca>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003432:	6902      	ldr	r2, [r0, #16]
 8003434:	2a00      	cmp	r2, #0
 8003436:	dafa      	bge.n	800342e <USB_CoreInit+0x82>
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003438:	6903      	ldr	r3, [r0, #16]
 800343a:	4a10      	ldr	r2, [pc, #64]	; (800347c <USB_CoreInit+0xd0>)
 800343c:	f043 0301 	orr.w	r3, r3, #1
 8003440:	6103      	str	r3, [r0, #16]
 8003442:	e001      	b.n	8003448 <USB_CoreInit+0x9c>
    if (++count > 200000U)
 8003444:	3a01      	subs	r2, #1
 8003446:	d016      	beq.n	8003476 <USB_CoreInit+0xca>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003448:	6903      	ldr	r3, [r0, #16]
 800344a:	f013 0301 	ands.w	r3, r3, #1
 800344e:	d1f9      	bne.n	8003444 <USB_CoreInit+0x98>
    if (cfg.battery_charging_enable == 0U)
 8003450:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003452:	b922      	cbnz	r2, 800345e <USB_CoreInit+0xb2>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003454:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8003456:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800345a:	6382      	str	r2, [r0, #56]	; 0x38
 800345c:	e7d2      	b.n	8003404 <USB_CoreInit+0x58>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800345e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8003460:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003464:	6382      	str	r2, [r0, #56]	; 0x38
 8003466:	e7cd      	b.n	8003404 <USB_CoreInit+0x58>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003468:	68c3      	ldr	r3, [r0, #12]
 800346a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800346e:	60c3      	str	r3, [r0, #12]
 8003470:	e7b5      	b.n	80033de <USB_CoreInit+0x32>
      return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e7c6      	b.n	8003404 <USB_CoreInit+0x58>
 8003476:	2303      	movs	r3, #3
 8003478:	e7ea      	b.n	8003450 <USB_CoreInit+0xa4>
 800347a:	bf00      	nop
 800347c:	00030d40 	.word	0x00030d40

08003480 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8003480:	2a02      	cmp	r2, #2
 8003482:	d00a      	beq.n	800349a <USB_SetTurnaroundTime+0x1a>
 8003484:	f44f 5110 	mov.w	r1, #9216	; 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003488:	68c2      	ldr	r2, [r0, #12]
 800348a:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 800348e:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003490:	68c3      	ldr	r3, [r0, #12]
 8003492:	430b      	orrs	r3, r1
 8003494:	60c3      	str	r3, [r0, #12]
}
 8003496:	2000      	movs	r0, #0
 8003498:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800349a:	4b2d      	ldr	r3, [pc, #180]	; (8003550 <USB_SetTurnaroundTime+0xd0>)
 800349c:	4a2d      	ldr	r2, [pc, #180]	; (8003554 <USB_SetTurnaroundTime+0xd4>)
 800349e:	440b      	add	r3, r1
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d943      	bls.n	800352c <USB_SetTurnaroundTime+0xac>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80034a4:	4b2c      	ldr	r3, [pc, #176]	; (8003558 <USB_SetTurnaroundTime+0xd8>)
 80034a6:	4a2d      	ldr	r2, [pc, #180]	; (800355c <USB_SetTurnaroundTime+0xdc>)
 80034a8:	440b      	add	r3, r1
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d93b      	bls.n	8003526 <USB_SetTurnaroundTime+0xa6>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80034ae:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 80034b2:	4a2b      	ldr	r2, [pc, #172]	; (8003560 <USB_SetTurnaroundTime+0xe0>)
 80034b4:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d93a      	bls.n	8003532 <USB_SetTurnaroundTime+0xb2>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80034bc:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 80034c0:	f502 32c3 	add.w	r2, r2, #99840	; 0x18600
 80034c4:	32a0      	adds	r2, #160	; 0xa0
 80034c6:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d934      	bls.n	8003538 <USB_SetTurnaroundTime+0xb8>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80034ce:	4b25      	ldr	r3, [pc, #148]	; (8003564 <USB_SetTurnaroundTime+0xe4>)
 80034d0:	4a25      	ldr	r2, [pc, #148]	; (8003568 <USB_SetTurnaroundTime+0xe8>)
 80034d2:	440b      	add	r3, r1
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d932      	bls.n	800353e <USB_SetTurnaroundTime+0xbe>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80034d8:	4b24      	ldr	r3, [pc, #144]	; (800356c <USB_SetTurnaroundTime+0xec>)
 80034da:	f502 2292 	add.w	r2, r2, #299008	; 0x49000
 80034de:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 80034e2:	440b      	add	r3, r1
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d92d      	bls.n	8003544 <USB_SetTurnaroundTime+0xc4>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80034e8:	4b21      	ldr	r3, [pc, #132]	; (8003570 <USB_SetTurnaroundTime+0xf0>)
 80034ea:	f502 22c3 	add.w	r2, r2, #399360	; 0x61800
 80034ee:	f502 7220 	add.w	r2, r2, #640	; 0x280
 80034f2:	440b      	add	r3, r1
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d9c5      	bls.n	8003484 <USB_SetTurnaroundTime+0x4>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80034f8:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 80034fc:	f502 12b7 	add.w	r2, r2, #1499136	; 0x16e000
 8003500:	f502 7258 	add.w	r2, r2, #864	; 0x360
 8003504:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 8003508:	4293      	cmp	r3, r2
 800350a:	d91e      	bls.n	800354a <USB_SetTurnaroundTime+0xca>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800350c:	4b19      	ldr	r3, [pc, #100]	; (8003574 <USB_SetTurnaroundTime+0xf4>)
 800350e:	f502 2212 	add.w	r2, r2, #598016	; 0x92000
 8003512:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
 8003516:	440b      	add	r3, r1
 8003518:	4293      	cmp	r3, r2
 800351a:	bf8c      	ite	hi
 800351c:	f44f 51c0 	movhi.w	r1, #6144	; 0x1800
 8003520:	f44f 51e0 	movls.w	r1, #7168	; 0x1c00
 8003524:	e7b0      	b.n	8003488 <USB_SetTurnaroundTime+0x8>
 8003526:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 800352a:	e7ad      	b.n	8003488 <USB_SetTurnaroundTime+0x8>
 800352c:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 8003530:	e7aa      	b.n	8003488 <USB_SetTurnaroundTime+0x8>
 8003532:	f44f 5150 	mov.w	r1, #13312	; 0x3400
 8003536:	e7a7      	b.n	8003488 <USB_SetTurnaroundTime+0x8>
 8003538:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800353c:	e7a4      	b.n	8003488 <USB_SetTurnaroundTime+0x8>
 800353e:	f44f 5130 	mov.w	r1, #11264	; 0x2c00
 8003542:	e7a1      	b.n	8003488 <USB_SetTurnaroundTime+0x8>
 8003544:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8003548:	e79e      	b.n	8003488 <USB_SetTurnaroundTime+0x8>
 800354a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800354e:	e79b      	b.n	8003488 <USB_SetTurnaroundTime+0x8>
 8003550:	ff275340 	.word	0xff275340
 8003554:	000c34ff 	.word	0x000c34ff
 8003558:	ff1b1e40 	.word	0xff1b1e40
 800355c:	000f423f 	.word	0x000f423f
 8003560:	00124f7f 	.word	0x00124f7f
 8003564:	fee5b660 	.word	0xfee5b660
 8003568:	0016e35f 	.word	0x0016e35f
 800356c:	feced300 	.word	0xfeced300
 8003570:	feb35bc0 	.word	0xfeb35bc0
 8003574:	fe5954e0 	.word	0xfe5954e0

08003578 <USB_EnableGlobalInt>:
{
 8003578:	4602      	mov	r2, r0
}
 800357a:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800357c:	6893      	ldr	r3, [r2, #8]
 800357e:	f043 0301 	orr.w	r3, r3, #1
 8003582:	6093      	str	r3, [r2, #8]
}
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop

08003588 <USB_DisableGlobalInt>:
{
 8003588:	4602      	mov	r2, r0
}
 800358a:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800358c:	6893      	ldr	r3, [r2, #8]
 800358e:	f023 0301 	bic.w	r3, r3, #1
 8003592:	6093      	str	r3, [r2, #8]
}
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop

08003598 <USB_SetCurrentMode>:
{
 8003598:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800359a:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800359c:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800359e:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80035a2:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80035a4:	d00b      	beq.n	80035be <USB_SetCurrentMode+0x26>
  else if (mode == USB_DEVICE_MODE)
 80035a6:	b941      	cbnz	r1, 80035ba <USB_SetCurrentMode+0x22>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80035a8:	68c3      	ldr	r3, [r0, #12]
 80035aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80035ae:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 80035b0:	2032      	movs	r0, #50	; 0x32
 80035b2:	f7fe fa07 	bl	80019c4 <HAL_Delay>
  return HAL_OK;
 80035b6:	2000      	movs	r0, #0
}
 80035b8:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 80035ba:	2001      	movs	r0, #1
}
 80035bc:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80035be:	68c3      	ldr	r3, [r0, #12]
 80035c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80035c4:	60c3      	str	r3, [r0, #12]
 80035c6:	e7f3      	b.n	80035b0 <USB_SetCurrentMode+0x18>

080035c8 <USB_DevInit>:
{
 80035c8:	b084      	sub	sp, #16
 80035ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80035ce:	ac08      	add	r4, sp, #32
 80035d0:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 80035d4:	9e12      	ldr	r6, [sp, #72]	; 0x48
    USBx->DIEPTXF[i] = 0U;
 80035d6:	2200      	movs	r2, #0
 80035d8:	f8c0 2104 	str.w	r2, [r0, #260]	; 0x104
{
 80035dc:	4603      	mov	r3, r0
    USBx->DIEPTXF[i] = 0U;
 80035de:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
 80035e2:	460f      	mov	r7, r1
 80035e4:	f8c0 210c 	str.w	r2, [r0, #268]	; 0x10c
 80035e8:	f500 6500 	add.w	r5, r0, #2048	; 0x800
 80035ec:	f8c0 2110 	str.w	r2, [r0, #272]	; 0x110
 80035f0:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
 80035f4:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
 80035f8:	f8c0 211c 	str.w	r2, [r0, #284]	; 0x11c
 80035fc:	f8c0 2120 	str.w	r2, [r0, #288]	; 0x120
 8003600:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
 8003604:	f8c0 2128 	str.w	r2, [r0, #296]	; 0x128
 8003608:	f8c0 212c 	str.w	r2, [r0, #300]	; 0x12c
 800360c:	f8c0 2130 	str.w	r2, [r0, #304]	; 0x130
 8003610:	f8c0 2134 	str.w	r2, [r0, #308]	; 0x134
 8003614:	f8c0 2138 	str.w	r2, [r0, #312]	; 0x138
 8003618:	f8c0 213c 	str.w	r2, [r0, #316]	; 0x13c
  if (cfg.vbus_sensing_enable == 0U)
 800361c:	2e00      	cmp	r6, #0
 800361e:	f040 809a 	bne.w	8003756 <USB_DevInit+0x18e>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003622:	686a      	ldr	r2, [r5, #4]
 8003624:	f042 0202 	orr.w	r2, r2, #2
 8003628:	606a      	str	r2, [r5, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800362a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800362c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003630:	6382      	str	r2, [r0, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003632:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8003634:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8003638:	6382      	str	r2, [r0, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800363a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800363c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003640:	6382      	str	r2, [r0, #56]	; 0x38
  USBx_PCGCCTL = 0U;
 8003642:	2200      	movs	r2, #0
 8003644:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003648:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800364a:	f8d3 1800 	ldr.w	r1, [r3, #2048]	; 0x800
 800364e:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003652:	2a01      	cmp	r2, #1
 8003654:	f000 8088 	beq.w	8003768 <USB_DevInit+0x1a0>
  USBx_DEVICE->DCFG |= speed;
 8003658:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 800365c:	f042 0203 	orr.w	r2, r2, #3
 8003660:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003664:	f44f 6284 	mov.w	r2, #1056	; 0x420
 8003668:	611a      	str	r2, [r3, #16]
 800366a:	4a4b      	ldr	r2, [pc, #300]	; (8003798 <USB_DevInit+0x1d0>)
 800366c:	e002      	b.n	8003674 <USB_DevInit+0xac>
    if (++count > 200000U)
 800366e:	3a01      	subs	r2, #1
 8003670:	f000 8088 	beq.w	8003784 <USB_DevInit+0x1bc>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003674:	6918      	ldr	r0, [r3, #16]
 8003676:	f010 0020 	ands.w	r0, r0, #32
 800367a:	d1f8      	bne.n	800366e <USB_DevInit+0xa6>
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800367c:	2210      	movs	r2, #16
 800367e:	611a      	str	r2, [r3, #16]
 8003680:	4a45      	ldr	r2, [pc, #276]	; (8003798 <USB_DevInit+0x1d0>)
 8003682:	e001      	b.n	8003688 <USB_DevInit+0xc0>
    if (++count > 200000U)
 8003684:	3a01      	subs	r2, #1
 8003686:	d07f      	beq.n	8003788 <USB_DevInit+0x1c0>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003688:	6919      	ldr	r1, [r3, #16]
 800368a:	06c9      	lsls	r1, r1, #27
 800368c:	d4fa      	bmi.n	8003684 <USB_DevInit+0xbc>
  USBx_DEVICE->DIEPMSK = 0U;
 800368e:	2100      	movs	r1, #0
 8003690:	6129      	str	r1, [r5, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003692:	6169      	str	r1, [r5, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003694:	61e9      	str	r1, [r5, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003696:	b1e7      	cbz	r7, 80036d2 <USB_DevInit+0x10a>
      USBx_INEP(i)->DIEPCTL = 0U;
 8003698:	468c      	mov	ip, r1
 800369a:	f503 6210 	add.w	r2, r3, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800369e:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80036a2:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80036a6:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 80036aa:	e00a      	b.n	80036c2 <USB_DevInit+0xfa>
      USBx_INEP(i)->DIEPCTL = 0U;
 80036ac:	f8c2 c000 	str.w	ip, [r2]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80036b0:	3101      	adds	r1, #1
 80036b2:	42b9      	cmp	r1, r7
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80036b4:	f8c2 c010 	str.w	ip, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80036b8:	f8c2 e008 	str.w	lr, [r2, #8]
 80036bc:	f102 0220 	add.w	r2, r2, #32
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80036c0:	d02c      	beq.n	800371c <USB_DevInit+0x154>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80036c2:	6814      	ldr	r4, [r2, #0]
 80036c4:	2c00      	cmp	r4, #0
 80036c6:	daf1      	bge.n	80036ac <USB_DevInit+0xe4>
      if (i == 0U)
 80036c8:	2900      	cmp	r1, #0
 80036ca:	d062      	beq.n	8003792 <USB_DevInit+0x1ca>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80036cc:	f8c2 8000 	str.w	r8, [r2]
 80036d0:	e7ee      	b.n	80036b0 <USB_DevInit+0xe8>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80036d2:	692a      	ldr	r2, [r5, #16]
  if (cfg.dma_enable == 0U)
 80036d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80036d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036da:	612a      	str	r2, [r5, #16]
  USBx->GINTMSK = 0U;
 80036dc:	2400      	movs	r4, #0
  USBx->GINTSTS = 0xBFFFFFFFU;
 80036de:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
  USBx->GINTMSK = 0U;
 80036e2:	619c      	str	r4, [r3, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80036e4:	615a      	str	r2, [r3, #20]
  if (cfg.dma_enable == 0U)
 80036e6:	b919      	cbnz	r1, 80036f0 <USB_DevInit+0x128>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80036e8:	699a      	ldr	r2, [r3, #24]
 80036ea:	f042 0210 	orr.w	r2, r2, #16
 80036ee:	619a      	str	r2, [r3, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80036f0:	699c      	ldr	r4, [r3, #24]
 80036f2:	4a2a      	ldr	r2, [pc, #168]	; (800379c <USB_DevInit+0x1d4>)
  if (cfg.Sof_enable != 0U)
 80036f4:	990e      	ldr	r1, [sp, #56]	; 0x38
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80036f6:	4322      	orrs	r2, r4
 80036f8:	619a      	str	r2, [r3, #24]
  if (cfg.Sof_enable != 0U)
 80036fa:	b119      	cbz	r1, 8003704 <USB_DevInit+0x13c>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80036fc:	699a      	ldr	r2, [r3, #24]
 80036fe:	f042 0208 	orr.w	r2, r2, #8
 8003702:	619a      	str	r2, [r3, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8003704:	2e01      	cmp	r6, #1
 8003706:	d105      	bne.n	8003714 <USB_DevInit+0x14c>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003708:	699a      	ldr	r2, [r3, #24]
 800370a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800370e:	f042 0204 	orr.w	r2, r2, #4
 8003712:	619a      	str	r2, [r3, #24]
}
 8003714:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003718:	b004      	add	sp, #16
 800371a:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800371c:	2400      	movs	r4, #0
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800371e:	46a4      	mov	ip, r4
 8003720:	f503 6230 	add.w	r2, r3, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003724:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003728:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800372c:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 8003730:	e00a      	b.n	8003748 <USB_DevInit+0x180>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003732:	f8c2 c000 	str.w	ip, [r2]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003736:	3401      	adds	r4, #1
 8003738:	428c      	cmp	r4, r1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800373a:	f8c2 c010 	str.w	ip, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800373e:	f8c2 e008 	str.w	lr, [r2, #8]
 8003742:	f102 0220 	add.w	r2, r2, #32
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003746:	d0c4      	beq.n	80036d2 <USB_DevInit+0x10a>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003748:	6817      	ldr	r7, [r2, #0]
 800374a:	2f00      	cmp	r7, #0
 800374c:	daf1      	bge.n	8003732 <USB_DevInit+0x16a>
      if (i == 0U)
 800374e:	b1ec      	cbz	r4, 800378c <USB_DevInit+0x1c4>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003750:	f8c2 8000 	str.w	r8, [r2]
 8003754:	e7ef      	b.n	8003736 <USB_DevInit+0x16e>
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003756:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8003758:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800375c:	6382      	str	r2, [r0, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800375e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8003760:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003764:	6382      	str	r2, [r0, #56]	; 0x38
 8003766:	e76c      	b.n	8003642 <USB_DevInit+0x7a>
    if (cfg.speed == USBD_HS_SPEED)
 8003768:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800376a:	b922      	cbnz	r2, 8003776 <USB_DevInit+0x1ae>
  USBx_DEVICE->DCFG |= speed;
 800376c:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8003770:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
 8003774:	e776      	b.n	8003664 <USB_DevInit+0x9c>
 8003776:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 800377a:	f042 0201 	orr.w	r2, r2, #1
 800377e:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
 8003782:	e76f      	b.n	8003664 <USB_DevInit+0x9c>
    ret = HAL_ERROR;
 8003784:	2001      	movs	r0, #1
 8003786:	e779      	b.n	800367c <USB_DevInit+0xb4>
    ret = HAL_ERROR;
 8003788:	2001      	movs	r0, #1
 800378a:	e780      	b.n	800368e <USB_DevInit+0xc6>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800378c:	f8c2 9000 	str.w	r9, [r2]
 8003790:	e7d1      	b.n	8003736 <USB_DevInit+0x16e>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003792:	f8c2 9000 	str.w	r9, [r2]
 8003796:	e78b      	b.n	80036b0 <USB_DevInit+0xe8>
 8003798:	00030d40 	.word	0x00030d40
 800379c:	803c3800 	.word	0x803c3800

080037a0 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80037a0:	0189      	lsls	r1, r1, #6
 80037a2:	f041 0120 	orr.w	r1, r1, #32
 80037a6:	6101      	str	r1, [r0, #16]
 80037a8:	4a05      	ldr	r2, [pc, #20]	; (80037c0 <USB_FlushTxFifo+0x20>)
 80037aa:	e001      	b.n	80037b0 <USB_FlushTxFifo+0x10>
    if (++count > 200000U)
 80037ac:	3a01      	subs	r2, #1
 80037ae:	d005      	beq.n	80037bc <USB_FlushTxFifo+0x1c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80037b0:	6903      	ldr	r3, [r0, #16]
 80037b2:	f013 0320 	ands.w	r3, r3, #32
 80037b6:	d1f9      	bne.n	80037ac <USB_FlushTxFifo+0xc>
  return HAL_OK;
 80037b8:	4618      	mov	r0, r3
 80037ba:	4770      	bx	lr
      return HAL_TIMEOUT;
 80037bc:	2003      	movs	r0, #3
}
 80037be:	4770      	bx	lr
 80037c0:	00030d40 	.word	0x00030d40

080037c4 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80037c4:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80037c8:	f013 0006 	ands.w	r0, r3, #6
 80037cc:	d004      	beq.n	80037d8 <USB_GetDevSpeed+0x14>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80037ce:	f013 0f02 	tst.w	r3, #2
    speed = 0xFU;
 80037d2:	bf14      	ite	ne
 80037d4:	2002      	movne	r0, #2
 80037d6:	200f      	moveq	r0, #15
}
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop

080037dc <USB_ActivateEndpoint>:
{
 80037dc:	b430      	push	{r4, r5}
  uint32_t epnum = (uint32_t)ep->num;
 80037de:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 80037e0:	784d      	ldrb	r5, [r1, #1]
 80037e2:	f002 040f 	and.w	r4, r2, #15
 80037e6:	2301      	movs	r3, #1
 80037e8:	2d01      	cmp	r5, #1
 80037ea:	fa03 f304 	lsl.w	r3, r3, r4
 80037ee:	eb00 1442 	add.w	r4, r0, r2, lsl #5
 80037f2:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80037f6:	d019      	beq.n	800382c <USB_ActivateEndpoint+0x50>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80037f8:	69c2      	ldr	r2, [r0, #28]
 80037fa:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80037fe:	61c3      	str	r3, [r0, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003800:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 8003804:	041b      	lsls	r3, r3, #16
 8003806:	d40e      	bmi.n	8003826 <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003808:	688a      	ldr	r2, [r1, #8]
                                    ((uint32_t)ep->type << 18) |
 800380a:	78c8      	ldrb	r0, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800380c:	f8d4 1b00 	ldr.w	r1, [r4, #2816]	; 0xb00
 8003810:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8003814:	f042 5380 	orr.w	r3, r2, #268435456	; 0x10000000
 8003818:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800381c:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
 8003820:	430b      	orrs	r3, r1
 8003822:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
}
 8003826:	2000      	movs	r0, #0
 8003828:	bc30      	pop	{r4, r5}
 800382a:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800382c:	69c5      	ldr	r5, [r0, #28]
 800382e:	432b      	orrs	r3, r5
 8003830:	61c3      	str	r3, [r0, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003832:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8003836:	0418      	lsls	r0, r3, #16
 8003838:	d4f5      	bmi.n	8003826 <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800383a:	688b      	ldr	r3, [r1, #8]
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800383c:	78c8      	ldrb	r0, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800383e:	f8d4 1900 	ldr.w	r1, [r4, #2304]	; 0x900
 8003842:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800384a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800384e:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
 8003852:	ea43 5282 	orr.w	r2, r3, r2, lsl #22
 8003856:	430a      	orrs	r2, r1
 8003858:	f8c4 2900 	str.w	r2, [r4, #2304]	; 0x900
}
 800385c:	2000      	movs	r0, #0
 800385e:	bc30      	pop	{r4, r5}
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop

08003864 <USB_DeactivateEndpoint>:
{
 8003864:	b410      	push	{r4}
  if (ep->is_in == 1U)
 8003866:	784c      	ldrb	r4, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8003868:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800386a:	2c01      	cmp	r4, #1
 800386c:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 8003870:	d02a      	beq.n	80038c8 <USB_DeactivateEndpoint+0x64>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003872:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	; 0xb00
 8003876:	2900      	cmp	r1, #0
 8003878:	db19      	blt.n	80038ae <USB_DeactivateEndpoint+0x4a>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800387a:	f003 010f 	and.w	r1, r3, #15
 800387e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003882:	f8d0 483c 	ldr.w	r4, [r0, #2108]	; 0x83c
 8003886:	408b      	lsls	r3, r1
 8003888:	43db      	mvns	r3, r3
 800388a:	401c      	ands	r4, r3
 800388c:	f8c0 483c 	str.w	r4, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003890:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003894:	4921      	ldr	r1, [pc, #132]	; (800391c <USB_DeactivateEndpoint+0xb8>)
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003896:	4023      	ands	r3, r4
 8003898:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800389c:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
}
 80038a0:	f85d 4b04 	ldr.w	r4, [sp], #4
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80038a4:	4019      	ands	r1, r3
}
 80038a6:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80038a8:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
}
 80038ac:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80038ae:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	; 0xb00
 80038b2:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 80038b6:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80038ba:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	; 0xb00
 80038be:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80038c2:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
 80038c6:	e7d8      	b.n	800387a <USB_DeactivateEndpoint+0x16>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80038c8:	f8d2 1900 	ldr.w	r1, [r2, #2304]	; 0x900
 80038cc:	2900      	cmp	r1, #0
 80038ce:	da0b      	bge.n	80038e8 <USB_DeactivateEndpoint+0x84>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80038d0:	f8d2 1900 	ldr.w	r1, [r2, #2304]	; 0x900
 80038d4:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 80038d8:	f8c2 1900 	str.w	r1, [r2, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80038dc:	f8d2 1900 	ldr.w	r1, [r2, #2304]	; 0x900
 80038e0:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80038e4:	f8c2 1900 	str.w	r1, [r2, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80038e8:	f003 010f 	and.w	r1, r3, #15
 80038ec:	2301      	movs	r3, #1
 80038ee:	f8d0 483c 	ldr.w	r4, [r0, #2108]	; 0x83c
 80038f2:	408b      	lsls	r3, r1
 80038f4:	43db      	mvns	r3, r3
 80038f6:	401c      	ands	r4, r3
 80038f8:	f8c0 483c 	str.w	r4, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80038fc:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003900:	4907      	ldr	r1, [pc, #28]	; (8003920 <USB_DeactivateEndpoint+0xbc>)
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003902:	4023      	ands	r3, r4
 8003904:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003908:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
}
 800390c:	f85d 4b04 	ldr.w	r4, [sp], #4
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003910:	4019      	ands	r1, r3
}
 8003912:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003914:	f8c2 1900 	str.w	r1, [r2, #2304]	; 0x900
}
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	eff37800 	.word	0xeff37800
 8003920:	ec337800 	.word	0xec337800

08003924 <USB_EPStartXfer>:
{
 8003924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (ep->is_in == 1U)
 8003928:	f891 c001 	ldrb.w	ip, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800392c:	780e      	ldrb	r6, [r1, #0]
 800392e:	694b      	ldr	r3, [r1, #20]
 8003930:	78cf      	ldrb	r7, [r1, #3]
  if (ep->is_in == 1U)
 8003932:	f1bc 0f01 	cmp.w	ip, #1
 8003936:	eb00 1546 	add.w	r5, r0, r6, lsl #5
 800393a:	d04e      	beq.n	80039da <USB_EPStartXfer+0xb6>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800393c:	f505 6430 	add.w	r4, r5, #2816	; 0xb00
 8003940:	6926      	ldr	r6, [r4, #16]
 8003942:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8003946:	0cf6      	lsrs	r6, r6, #19
 8003948:	04f6      	lsls	r6, r6, #19
 800394a:	6126      	str	r6, [r4, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800394c:	6926      	ldr	r6, [r4, #16]
 800394e:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 8003952:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 8003956:	6126      	str	r6, [r4, #16]
    if (ep->xfer_len == 0U)
 8003958:	b37b      	cbz	r3, 80039ba <USB_EPStartXfer+0x96>
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800395a:	f8df e1e8 	ldr.w	lr, [pc, #488]	; 8003b44 <USB_EPStartXfer+0x220>
 800395e:	f8d4 8010 	ldr.w	r8, [r4, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003962:	eb03 060c 	add.w	r6, r3, ip
 8003966:	3e01      	subs	r6, #1
 8003968:	fbb6 f6fc 	udiv	r6, r6, ip
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800396c:	ea0e 43c6 	and.w	r3, lr, r6, lsl #19
 8003970:	ea43 0308 	orr.w	r3, r3, r8
 8003974:	6123      	str	r3, [r4, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003976:	b2b6      	uxth	r6, r6
 8003978:	fb0c f306 	mul.w	r3, ip, r6
 800397c:	6926      	ldr	r6, [r4, #16]
 800397e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003982:	4333      	orrs	r3, r6
    if (dma == 1U)
 8003984:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003986:	6123      	str	r3, [r4, #16]
    if (dma == 1U)
 8003988:	d022      	beq.n	80039d0 <USB_EPStartXfer+0xac>
    if (ep->type == EP_TYPE_ISOC)
 800398a:	2f01      	cmp	r7, #1
 800398c:	d10c      	bne.n	80039a8 <USB_EPStartXfer+0x84>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800398e:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8003992:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003996:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	; 0xb00
 800399a:	bf0c      	ite	eq
 800399c:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80039a0:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 80039a4:	f8c5 3b00 	str.w	r3, [r5, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80039a8:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	; 0xb00
 80039ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80039b0:	f8c5 3b00 	str.w	r3, [r5, #2816]	; 0xb00
}
 80039b4:	2000      	movs	r0, #0
 80039b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80039ba:	6926      	ldr	r6, [r4, #16]
 80039bc:	f3cc 0312 	ubfx	r3, ip, #0, #19
 80039c0:	4333      	orrs	r3, r6
 80039c2:	6123      	str	r3, [r4, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80039c4:	6923      	ldr	r3, [r4, #16]
    if (dma == 1U)
 80039c6:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80039c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80039cc:	6123      	str	r3, [r4, #16]
    if (dma == 1U)
 80039ce:	d1dc      	bne.n	800398a <USB_EPStartXfer+0x66>
      if ((uint32_t)ep->xfer_buff != 0U)
 80039d0:	68cb      	ldr	r3, [r1, #12]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d0d9      	beq.n	800398a <USB_EPStartXfer+0x66>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80039d6:	6163      	str	r3, [r4, #20]
 80039d8:	e7d7      	b.n	800398a <USB_EPStartXfer+0x66>
 80039da:	f505 6410 	add.w	r4, r5, #2304	; 0x900
    if (ep->xfer_len == 0U)
 80039de:	b3f3      	cbz	r3, 8003a5e <USB_EPStartXfer+0x13a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80039e0:	f8d4 8010 	ldr.w	r8, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80039e4:	f8d1 a008 	ldr.w	sl, [r1, #8]
 80039e8:	f8df e158 	ldr.w	lr, [pc, #344]	; 8003b44 <USB_EPStartXfer+0x220>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80039ec:	ea4f 48d8 	mov.w	r8, r8, lsr #19
 80039f0:	ea4f 48c8 	mov.w	r8, r8, lsl #19
 80039f4:	f8c4 8010 	str.w	r8, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80039f8:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80039fc:	f028 58ff 	bic.w	r8, r8, #534773760	; 0x1fe00000
 8003a00:	f428 18c0 	bic.w	r8, r8, #1572864	; 0x180000
 8003a04:	f8c4 8010 	str.w	r8, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003a08:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8003a0c:	eb0a 0803 	add.w	r8, sl, r3
 8003a10:	f108 38ff 	add.w	r8, r8, #4294967295
 8003a14:	fbb8 f8fa 	udiv	r8, r8, sl
 8003a18:	ea0e 4ec8 	and.w	lr, lr, r8, lsl #19
 8003a1c:	ea4e 0e09 	orr.w	lr, lr, r9
 8003a20:	f8c4 e010 	str.w	lr, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003a24:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8003a28:	f3c3 0e12 	ubfx	lr, r3, #0, #19
 8003a2c:	ea4e 0e08 	orr.w	lr, lr, r8
      if (ep->type == EP_TYPE_ISOC)
 8003a30:	2f01      	cmp	r7, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003a32:	f8c4 e010 	str.w	lr, [r4, #16]
      if (ep->type == EP_TYPE_ISOC)
 8003a36:	d054      	beq.n	8003ae2 <USB_EPStartXfer+0x1be>
    if (dma == 1U)
 8003a38:	2a01      	cmp	r2, #1
 8003a3a:	d060      	beq.n	8003afe <USB_EPStartXfer+0x1da>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003a3c:	f8d5 3900 	ldr.w	r3, [r5, #2304]	; 0x900
 8003a40:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003a44:	f8c5 3900 	str.w	r3, [r5, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003a48:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 8003a4c:	f006 060f 	and.w	r6, r6, #15
 8003a50:	fa0c fc06 	lsl.w	ip, ip, r6
 8003a54:	ea4c 0303 	orr.w	r3, ip, r3
 8003a58:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
  return HAL_OK;
 8003a5c:	e7aa      	b.n	80039b4 <USB_EPStartXfer+0x90>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003a5e:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8003a62:	f02c 5cff 	bic.w	ip, ip, #534773760	; 0x1fe00000
 8003a66:	f42c 1cc0 	bic.w	ip, ip, #1572864	; 0x180000
 8003a6a:	f8c4 c010 	str.w	ip, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003a6e:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8003a72:	f44c 2c00 	orr.w	ip, ip, #524288	; 0x80000
 8003a76:	f8c4 c010 	str.w	ip, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003a7a:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8003a7e:	ea4f 4cdc 	mov.w	ip, ip, lsr #19
 8003a82:	ea4f 4ccc 	mov.w	ip, ip, lsl #19
    if (dma == 1U)
 8003a86:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003a88:	f8c4 c010 	str.w	ip, [r4, #16]
    if (dma == 1U)
 8003a8c:	d037      	beq.n	8003afe <USB_EPStartXfer+0x1da>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003a8e:	f8d5 4900 	ldr.w	r4, [r5, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8003a92:	2f01      	cmp	r7, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003a94:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8003a98:	f8c5 4900 	str.w	r4, [r5, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8003a9c:	d18a      	bne.n	80039b4 <USB_EPStartXfer+0x90>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003a9e:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 8003aa2:	f414 7f80 	tst.w	r4, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003aa6:	f8d5 4900 	ldr.w	r4, [r5, #2304]	; 0x900
 8003aaa:	bf0c      	ite	eq
 8003aac:	f044 5400 	orreq.w	r4, r4, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003ab0:	f044 5480 	orrne.w	r4, r4, #268435456	; 0x10000000
 8003ab4:	f8c5 4900 	str.w	r4, [r5, #2304]	; 0x900
  if (dma == 0U)
 8003ab8:	2a00      	cmp	r2, #0
 8003aba:	f47f af7b 	bne.w	80039b4 <USB_EPStartXfer+0x90>
    count32b = ((uint32_t)len + 3U) / 4U;
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 8003ac2:	089a      	lsrs	r2, r3, #2
 8003ac4:	f43f af76 	beq.w	80039b4 <USB_EPStartXfer+0x90>
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003ac8:	68cb      	ldr	r3, [r1, #12]
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003aca:	eb00 3006 	add.w	r0, r0, r6, lsl #12
 8003ace:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8003ad2:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8003ad6:	f853 1b04 	ldr.w	r1, [r3], #4
 8003ada:	6001      	str	r1, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d1fa      	bne.n	8003ad6 <USB_EPStartXfer+0x1b2>
 8003ae0:	e768      	b.n	80039b4 <USB_EPStartXfer+0x90>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003ae2:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8003ae6:	f02c 4cc0 	bic.w	ip, ip, #1610612736	; 0x60000000
 8003aea:	f8c4 c010 	str.w	ip, [r4, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003aee:	f8d4 c010 	ldr.w	ip, [r4, #16]
    if (dma == 1U)
 8003af2:	2a01      	cmp	r2, #1
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003af4:	f04c 5c00 	orr.w	ip, ip, #536870912	; 0x20000000
 8003af8:	f8c4 c010 	str.w	ip, [r4, #16]
    if (dma == 1U)
 8003afc:	d11a      	bne.n	8003b34 <USB_EPStartXfer+0x210>
      if ((uint32_t)ep->dma_addr != 0U)
 8003afe:	690b      	ldr	r3, [r1, #16]
 8003b00:	b103      	cbz	r3, 8003b04 <USB_EPStartXfer+0x1e0>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003b02:	6163      	str	r3, [r4, #20]
      if (ep->type == EP_TYPE_ISOC)
 8003b04:	2f01      	cmp	r7, #1
 8003b06:	d10c      	bne.n	8003b22 <USB_EPStartXfer+0x1fe>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003b08:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8003b0c:	f413 7f80 	tst.w	r3, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003b10:	f8d5 3900 	ldr.w	r3, [r5, #2304]	; 0x900
 8003b14:	bf0c      	ite	eq
 8003b16:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003b1a:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8003b1e:	f8c5 3900 	str.w	r3, [r5, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003b22:	f8d5 3900 	ldr.w	r3, [r5, #2304]	; 0x900
 8003b26:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003b2a:	f8c5 3900 	str.w	r3, [r5, #2304]	; 0x900
}
 8003b2e:	2000      	movs	r0, #0
 8003b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003b34:	f8d5 4900 	ldr.w	r4, [r5, #2304]	; 0x900
 8003b38:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8003b3c:	f8c5 4900 	str.w	r4, [r5, #2304]	; 0x900
 8003b40:	e7ad      	b.n	8003a9e <USB_EPStartXfer+0x17a>
 8003b42:	bf00      	nop
 8003b44:	1ff80000 	.word	0x1ff80000

08003b48 <USB_EP0StartXfer>:
  if (ep->is_in == 1U)
 8003b48:	784b      	ldrb	r3, [r1, #1]
{
 8003b4a:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t epnum = (uint32_t)ep->num;
 8003b4c:	780d      	ldrb	r5, [r1, #0]
 8003b4e:	694e      	ldr	r6, [r1, #20]
  if (ep->is_in == 1U)
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	eb00 1445 	add.w	r4, r0, r5, lsl #5
 8003b56:	d027      	beq.n	8003ba8 <USB_EP0StartXfer+0x60>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003b58:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 8003b5c:	691d      	ldr	r5, [r3, #16]
 8003b5e:	6888      	ldr	r0, [r1, #8]
 8003b60:	0ced      	lsrs	r5, r5, #19
 8003b62:	04ed      	lsls	r5, r5, #19
 8003b64:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003b66:	691d      	ldr	r5, [r3, #16]
 8003b68:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8003b6c:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8003b70:	611d      	str	r5, [r3, #16]
    if (ep->xfer_len > 0U)
 8003b72:	b106      	cbz	r6, 8003b76 <USB_EP0StartXfer+0x2e>
      ep->xfer_len = ep->maxpacket;
 8003b74:	6148      	str	r0, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003b76:	691d      	ldr	r5, [r3, #16]
 8003b78:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8003b7c:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003b7e:	691d      	ldr	r5, [r3, #16]
 8003b80:	f3c0 0012 	ubfx	r0, r0, #0, #19
 8003b84:	4328      	orrs	r0, r5
    if (dma == 1U)
 8003b86:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003b88:	6118      	str	r0, [r3, #16]
    if (dma == 1U)
 8003b8a:	d008      	beq.n	8003b9e <USB_EP0StartXfer+0x56>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003b8c:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 8003b90:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003b94:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
}
 8003b98:	2000      	movs	r0, #0
 8003b9a:	bcf0      	pop	{r4, r5, r6, r7}
 8003b9c:	4770      	bx	lr
      if ((uint32_t)ep->xfer_buff != 0U)
 8003b9e:	68ca      	ldr	r2, [r1, #12]
 8003ba0:	2a00      	cmp	r2, #0
 8003ba2:	d0f3      	beq.n	8003b8c <USB_EP0StartXfer+0x44>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003ba4:	615a      	str	r2, [r3, #20]
 8003ba6:	e7f1      	b.n	8003b8c <USB_EP0StartXfer+0x44>
 8003ba8:	f504 6310 	add.w	r3, r4, #2304	; 0x900
    if (ep->xfer_len == 0U)
 8003bac:	b39e      	cbz	r6, 8003c16 <USB_EP0StartXfer+0xce>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003bae:	691f      	ldr	r7, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 8003bb0:	f8d1 c008 	ldr.w	ip, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003bb4:	0cff      	lsrs	r7, r7, #19
 8003bb6:	04ff      	lsls	r7, r7, #19
 8003bb8:	611f      	str	r7, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003bba:	691f      	ldr	r7, [r3, #16]
 8003bbc:	f027 57ff 	bic.w	r7, r7, #534773760	; 0x1fe00000
 8003bc0:	f427 17c0 	bic.w	r7, r7, #1572864	; 0x180000
 8003bc4:	611f      	str	r7, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003bc6:	691f      	ldr	r7, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 8003bc8:	45b4      	cmp	ip, r6
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003bca:	f447 2700 	orr.w	r7, r7, #524288	; 0x80000
        ep->xfer_len = ep->maxpacket;
 8003bce:	bf38      	it	cc
 8003bd0:	f8c1 c014 	strcc.w	ip, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003bd4:	611f      	str	r7, [r3, #16]
        ep->xfer_len = ep->maxpacket;
 8003bd6:	bf38      	it	cc
 8003bd8:	4666      	movcc	r6, ip
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003bda:	f8d3 c010 	ldr.w	ip, [r3, #16]
 8003bde:	f3c6 0712 	ubfx	r7, r6, #0, #19
 8003be2:	ea47 070c 	orr.w	r7, r7, ip
    if (dma == 1U)
 8003be6:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003be8:	611f      	str	r7, [r3, #16]
    if (dma == 1U)
 8003bea:	d02d      	beq.n	8003c48 <USB_EP0StartXfer+0x100>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003bec:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8003bf0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003bf4:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 8003bf8:	2e00      	cmp	r6, #0
 8003bfa:	d0cd      	beq.n	8003b98 <USB_EP0StartXfer+0x50>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003bfc:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8003c00:	f005 050f 	and.w	r5, r5, #15
 8003c04:	2301      	movs	r3, #1
 8003c06:	fa03 f505 	lsl.w	r5, r3, r5
 8003c0a:	4315      	orrs	r5, r2
 8003c0c:	f8c0 5834 	str.w	r5, [r0, #2100]	; 0x834
}
 8003c10:	2000      	movs	r0, #0
 8003c12:	bcf0      	pop	{r4, r5, r6, r7}
 8003c14:	4770      	bx	lr
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003c16:	6918      	ldr	r0, [r3, #16]
 8003c18:	f020 50ff 	bic.w	r0, r0, #534773760	; 0x1fe00000
 8003c1c:	f420 10c0 	bic.w	r0, r0, #1572864	; 0x180000
 8003c20:	6118      	str	r0, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003c22:	6918      	ldr	r0, [r3, #16]
 8003c24:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
 8003c28:	6118      	str	r0, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003c2a:	6918      	ldr	r0, [r3, #16]
 8003c2c:	0cc0      	lsrs	r0, r0, #19
 8003c2e:	04c0      	lsls	r0, r0, #19
    if (dma == 1U)
 8003c30:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003c32:	6118      	str	r0, [r3, #16]
    if (dma == 1U)
 8003c34:	d008      	beq.n	8003c48 <USB_EP0StartXfer+0x100>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003c36:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8003c3a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c3e:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
}
 8003c42:	2000      	movs	r0, #0
 8003c44:	bcf0      	pop	{r4, r5, r6, r7}
 8003c46:	4770      	bx	lr
      if ((uint32_t)ep->dma_addr != 0U)
 8003c48:	690a      	ldr	r2, [r1, #16]
 8003c4a:	2a00      	cmp	r2, #0
 8003c4c:	d0f3      	beq.n	8003c36 <USB_EP0StartXfer+0xee>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003c4e:	615a      	str	r2, [r3, #20]
 8003c50:	e7f1      	b.n	8003c36 <USB_EP0StartXfer+0xee>
 8003c52:	bf00      	nop

08003c54 <USB_WritePacket>:
{
 8003c54:	b410      	push	{r4}
 8003c56:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 8003c5a:	b96c      	cbnz	r4, 8003c78 <USB_WritePacket+0x24>
    count32b = ((uint32_t)len + 3U) / 4U;
 8003c5c:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 8003c5e:	089b      	lsrs	r3, r3, #2
 8003c60:	d00a      	beq.n	8003c78 <USB_WritePacket+0x24>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003c62:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8003c66:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8003c6a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8003c6e:	f851 2b04 	ldr.w	r2, [r1], #4
 8003c72:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8003c74:	428b      	cmp	r3, r1
 8003c76:	d1fa      	bne.n	8003c6e <USB_WritePacket+0x1a>
}
 8003c78:	2000      	movs	r0, #0
 8003c7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8003c80:	3203      	adds	r2, #3
  for (i = 0U; i < count32b; i++)
 8003c82:	0892      	lsrs	r2, r2, #2
 8003c84:	d00d      	beq.n	8003ca2 <USB_ReadPacket+0x22>
{
 8003c86:	b410      	push	{r4}
 8003c88:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8003c8c:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
  uint32_t *pDest = (uint32_t *)dest;
 8003c90:	4608      	mov	r0, r1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003c92:	6823      	ldr	r3, [r4, #0]
 8003c94:	f840 3b04 	str.w	r3, [r0], #4
  for (i = 0U; i < count32b; i++)
 8003c98:	4282      	cmp	r2, r0
 8003c9a:	d1fa      	bne.n	8003c92 <USB_ReadPacket+0x12>
}
 8003c9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ca0:	4770      	bx	lr
  uint32_t *pDest = (uint32_t *)dest;
 8003ca2:	4608      	mov	r0, r1
}
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop

08003ca8 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 8003ca8:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8003caa:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8003cac:	2a01      	cmp	r2, #1
 8003cae:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003cb2:	d012      	beq.n	8003cda <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003cb4:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8003cb8:	2a00      	cmp	r2, #0
 8003cba:	db06      	blt.n	8003cca <USB_EPSetStall+0x22>
 8003cbc:	b12b      	cbz	r3, 8003cca <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003cbe:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003cc2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003cc6:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003cca:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003cce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003cd2:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8003cd6:	2000      	movs	r0, #0
 8003cd8:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003cda:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8003cde:	2a00      	cmp	r2, #0
 8003ce0:	db06      	blt.n	8003cf0 <USB_EPSetStall+0x48>
 8003ce2:	b12b      	cbz	r3, 8003cf0 <USB_EPSetStall+0x48>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003ce4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003ce8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003cec:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003cf0:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003cf4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003cf8:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8003cfc:	2000      	movs	r0, #0
 8003cfe:	4770      	bx	lr

08003d00 <USB_EPClearStall>:
{
 8003d00:	78cb      	ldrb	r3, [r1, #3]
 8003d02:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8003d04:	7849      	ldrb	r1, [r1, #1]
 8003d06:	3b02      	subs	r3, #2
 8003d08:	2901      	cmp	r1, #1
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8003d10:	d011      	beq.n	8003d36 <USB_EPClearStall+0x36>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003d12:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003d16:	2b01      	cmp	r3, #1
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003d18:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003d1c:	f8c0 2b00 	str.w	r2, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003d20:	d901      	bls.n	8003d26 <USB_EPClearStall+0x26>
}
 8003d22:	2000      	movs	r0, #0
 8003d24:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003d26:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003d2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d2e:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8003d32:	2000      	movs	r0, #0
 8003d34:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003d36:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003d3a:	2b01      	cmp	r3, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003d3c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003d40:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003d44:	d8ed      	bhi.n	8003d22 <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003d46:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003d4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d4e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8003d52:	2000      	movs	r0, #0
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop

08003d58 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003d58:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8003d5c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003d60:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003d64:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8003d68:	0109      	lsls	r1, r1, #4
 8003d6a:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8003d6e:	4319      	orrs	r1, r3
 8003d70:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8003d74:	2000      	movs	r0, #0
 8003d76:	4770      	bx	lr

08003d78 <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003d78:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8003d7c:	f023 0303 	bic.w	r3, r3, #3
 8003d80:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003d84:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8003d88:	f023 0302 	bic.w	r3, r3, #2
 8003d8c:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8003d90:	2000      	movs	r0, #0
 8003d92:	4770      	bx	lr

08003d94 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003d94:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8003d98:	f023 0303 	bic.w	r3, r3, #3
 8003d9c:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003da0:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8003da4:	f043 0302 	orr.w	r3, r3, #2
 8003da8:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8003dac:	2000      	movs	r0, #0
 8003dae:	4770      	bx	lr

08003db0 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8003db0:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8003db2:	6980      	ldr	r0, [r0, #24]
}
 8003db4:	4010      	ands	r0, r2
 8003db6:	4770      	bx	lr

08003db8 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8003db8:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8003dbc:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003dc0:	69c0      	ldr	r0, [r0, #28]
 8003dc2:	4018      	ands	r0, r3
}
 8003dc4:	0c00      	lsrs	r0, r0, #16
 8003dc6:	4770      	bx	lr

08003dc8 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8003dc8:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8003dcc:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003dd0:	69c0      	ldr	r0, [r0, #28]
 8003dd2:	4018      	ands	r0, r3
}
 8003dd4:	b280      	uxth	r0, r0
 8003dd6:	4770      	bx	lr

08003dd8 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003dd8:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003ddc:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003de0:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003de4:	6940      	ldr	r0, [r0, #20]
}
 8003de6:	4010      	ands	r0, r2
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop

08003dec <USB_ReadDevInEPInterrupt>:
{
 8003dec:	b410      	push	{r4}
  msk = USBx_DEVICE->DIEPMSK;
 8003dee:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003df2:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003df6:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003dfa:	f001 010f 	and.w	r1, r1, #15
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003dfe:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003e02:	40cb      	lsrs	r3, r1
 8003e04:	01db      	lsls	r3, r3, #7
 8003e06:	b2db      	uxtb	r3, r3
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003e08:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003e0a:	4323      	orrs	r3, r4
}
 8003e0c:	4018      	ands	r0, r3
 8003e0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8003e14:	6940      	ldr	r0, [r0, #20]
}
 8003e16:	f000 0001 	and.w	r0, r0, #1
 8003e1a:	4770      	bx	lr

08003e1c <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003e1c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003e20:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003e24:	f023 0307 	bic.w	r3, r3, #7
 8003e28:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003e2c:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8003e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e34:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8003e38:	2000      	movs	r0, #0
 8003e3a:	4770      	bx	lr

08003e3c <USB_EP0_OutStart>:
{
 8003e3c:	b430      	push	{r4, r5}
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003e3e:	4c12      	ldr	r4, [pc, #72]	; (8003e88 <USB_EP0_OutStart+0x4c>)
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003e40:	6c05      	ldr	r5, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003e42:	42a5      	cmp	r5, r4
 8003e44:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8003e48:	d903      	bls.n	8003e52 <USB_EP0_OutStart+0x16>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e4a:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	; 0xb00
 8003e4e:	2c00      	cmp	r4, #0
 8003e50:	db16      	blt.n	8003e80 <USB_EP0_OutStart+0x44>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003e52:	2400      	movs	r4, #0
 8003e54:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003e56:	691c      	ldr	r4, [r3, #16]
 8003e58:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8003e5c:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8003e5e:	691c      	ldr	r4, [r3, #16]
 8003e60:	f044 0418 	orr.w	r4, r4, #24
 8003e64:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8003e66:	691c      	ldr	r4, [r3, #16]
  if (dma == 1U)
 8003e68:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8003e6a:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 8003e6e:	611c      	str	r4, [r3, #16]
  if (dma == 1U)
 8003e70:	d106      	bne.n	8003e80 <USB_EP0_OutStart+0x44>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8003e72:	615a      	str	r2, [r3, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8003e74:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003e78:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8003e7c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8003e80:	2000      	movs	r0, #0
 8003e82:	bc30      	pop	{r4, r5}
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	4f54300a 	.word	0x4f54300a

08003e8c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e8c:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8003e90:	4604      	mov	r4, r0
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e92:	6800      	ldr	r0, [r0, #0]
{
 8003e94:	b082      	sub	sp, #8
 8003e96:	4689      	mov	r9, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e98:	6801      	ldr	r1, [r0, #0]
{
 8003e9a:	9d08      	ldr	r5, [sp, #32]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e9c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
{
 8003ea0:	4616      	mov	r6, r2
 8003ea2:	461f      	mov	r7, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ea4:	6001      	str	r1, [r0, #0]
 8003ea6:	1c6a      	adds	r2, r5, #1
 8003ea8:	d140      	bne.n	8003f2c <I2C_RequestMemoryWrite+0xa0>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003eaa:	6943      	ldr	r3, [r0, #20]
 8003eac:	07db      	lsls	r3, r3, #31
 8003eae:	d5fc      	bpl.n	8003eaa <I2C_RequestMemoryWrite+0x1e>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003eb0:	f009 01fe 	and.w	r1, r9, #254	; 0xfe
 8003eb4:	6101      	str	r1, [r0, #16]
 8003eb6:	1c6b      	adds	r3, r5, #1
 8003eb8:	d014      	beq.n	8003ee4 <I2C_RequestMemoryWrite+0x58>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003eba:	6943      	ldr	r3, [r0, #20]
 8003ebc:	079b      	lsls	r3, r3, #30
 8003ebe:	d414      	bmi.n	8003eea <I2C_RequestMemoryWrite+0x5e>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ec0:	6943      	ldr	r3, [r0, #20]
 8003ec2:	055a      	lsls	r2, r3, #21
 8003ec4:	d456      	bmi.n	8003f74 <I2C_RequestMemoryWrite+0xe8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ec6:	f7fd fd77 	bl	80019b8 <HAL_GetTick>
 8003eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ecc:	1ac0      	subs	r0, r0, r3
 8003ece:	4285      	cmp	r5, r0
 8003ed0:	f0c0 80a0 	bcc.w	8004014 <I2C_RequestMemoryWrite+0x188>
 8003ed4:	2d00      	cmp	r5, #0
 8003ed6:	f000 809d 	beq.w	8004014 <I2C_RequestMemoryWrite+0x188>
 8003eda:	6820      	ldr	r0, [r4, #0]
 8003edc:	e7eb      	b.n	8003eb6 <I2C_RequestMemoryWrite+0x2a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ede:	6943      	ldr	r3, [r0, #20]
 8003ee0:	055a      	lsls	r2, r3, #21
 8003ee2:	d447      	bmi.n	8003f74 <I2C_RequestMemoryWrite+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ee4:	6943      	ldr	r3, [r0, #20]
 8003ee6:	0799      	lsls	r1, r3, #30
 8003ee8:	d5f9      	bpl.n	8003ede <I2C_RequestMemoryWrite+0x52>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eea:	2300      	movs	r3, #0
 8003eec:	9301      	str	r3, [sp, #4]
 8003eee:	6943      	ldr	r3, [r0, #20]
 8003ef0:	9301      	str	r3, [sp, #4]
 8003ef2:	6983      	ldr	r3, [r0, #24]
 8003ef4:	9301      	str	r3, [sp, #4]
 8003ef6:	9b01      	ldr	r3, [sp, #4]
 8003ef8:	1c6a      	adds	r2, r5, #1
 8003efa:	d003      	beq.n	8003f04 <I2C_RequestMemoryWrite+0x78>
 8003efc:	e06c      	b.n	8003fd8 <I2C_RequestMemoryWrite+0x14c>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003efe:	6943      	ldr	r3, [r0, #20]
 8003f00:	0559      	lsls	r1, r3, #21
 8003f02:	d44f      	bmi.n	8003fa4 <I2C_RequestMemoryWrite+0x118>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f04:	6943      	ldr	r3, [r0, #20]
 8003f06:	061b      	lsls	r3, r3, #24
 8003f08:	d5f9      	bpl.n	8003efe <I2C_RequestMemoryWrite+0x72>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f0a:	2f01      	cmp	r7, #1
 8003f0c:	d00a      	beq.n	8003f24 <I2C_RequestMemoryWrite+0x98>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f0e:	0a33      	lsrs	r3, r6, #8
 8003f10:	6103      	str	r3, [r0, #16]
 8003f12:	1c6f      	adds	r7, r5, #1
 8003f14:	d003      	beq.n	8003f1e <I2C_RequestMemoryWrite+0x92>
 8003f16:	e06e      	b.n	8003ff6 <I2C_RequestMemoryWrite+0x16a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f18:	6943      	ldr	r3, [r0, #20]
 8003f1a:	055a      	lsls	r2, r3, #21
 8003f1c:	d442      	bmi.n	8003fa4 <I2C_RequestMemoryWrite+0x118>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f1e:	6943      	ldr	r3, [r0, #20]
 8003f20:	0619      	lsls	r1, r3, #24
 8003f22:	d5f9      	bpl.n	8003f18 <I2C_RequestMemoryWrite+0x8c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f24:	b2f6      	uxtb	r6, r6
 8003f26:	6106      	str	r6, [r0, #16]
  return HAL_OK;
 8003f28:	2000      	movs	r0, #0
 8003f2a:	e01c      	b.n	8003f66 <I2C_RequestMemoryWrite+0xda>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f2c:	6943      	ldr	r3, [r0, #20]
 8003f2e:	07d9      	lsls	r1, r3, #31
 8003f30:	d4be      	bmi.n	8003eb0 <I2C_RequestMemoryWrite+0x24>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f32:	f7fd fd41 	bl	80019b8 <HAL_GetTick>
 8003f36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f38:	1ac0      	subs	r0, r0, r3
 8003f3a:	4285      	cmp	r5, r0
 8003f3c:	6820      	ldr	r0, [r4, #0]
 8003f3e:	d301      	bcc.n	8003f44 <I2C_RequestMemoryWrite+0xb8>
 8003f40:	2d00      	cmp	r5, #0
 8003f42:	d1b0      	bne.n	8003ea6 <I2C_RequestMemoryWrite+0x1a>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003f44:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003f46:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003f48:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003f4a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f4e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f52:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003f54:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f58:	f043 0320 	orr.w	r3, r3, #32
 8003f5c:	6423      	str	r3, [r4, #64]	; 0x40
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003f5e:	6803      	ldr	r3, [r0, #0]
 8003f60:	05d9      	lsls	r1, r3, #23
 8003f62:	d403      	bmi.n	8003f6c <I2C_RequestMemoryWrite+0xe0>
    return HAL_TIMEOUT;
 8003f64:	2003      	movs	r0, #3
}
 8003f66:	b002      	add	sp, #8
 8003f68:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f70:	6423      	str	r3, [r4, #64]	; 0x40
 8003f72:	e7f7      	b.n	8003f64 <I2C_RequestMemoryWrite+0xd8>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f74:	6803      	ldr	r3, [r0, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f76:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f78:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f80:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f82:	6003      	str	r3, [r0, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f84:	6145      	str	r5, [r0, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f86:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f88:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f8c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f90:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003f92:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f96:	f043 0304 	orr.w	r3, r3, #4
    return HAL_ERROR;
 8003f9a:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f9c:	6423      	str	r3, [r4, #64]	; 0x40
}
 8003f9e:	b002      	add	sp, #8
 8003fa0:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003fa4:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 8003fa6:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fa8:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8003fac:	6141      	str	r1, [r0, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003fae:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003fb0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fb4:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fb8:	6c23      	ldr	r3, [r4, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fba:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fbe:	f043 0304 	orr.w	r3, r3, #4
 8003fc2:	6423      	str	r3, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fc4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003fc6:	2b04      	cmp	r3, #4
 8003fc8:	d104      	bne.n	8003fd4 <I2C_RequestMemoryWrite+0x148>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fca:	6822      	ldr	r2, [r4, #0]
 8003fcc:	6813      	ldr	r3, [r2, #0]
 8003fce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fd2:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8003fd4:	2001      	movs	r0, #1
 8003fd6:	e7c6      	b.n	8003f66 <I2C_RequestMemoryWrite+0xda>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fd8:	6943      	ldr	r3, [r0, #20]
 8003fda:	061a      	lsls	r2, r3, #24
 8003fdc:	d495      	bmi.n	8003f0a <I2C_RequestMemoryWrite+0x7e>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fde:	6943      	ldr	r3, [r0, #20]
 8003fe0:	0559      	lsls	r1, r3, #21
 8003fe2:	d4df      	bmi.n	8003fa4 <I2C_RequestMemoryWrite+0x118>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fe4:	f7fd fce8 	bl	80019b8 <HAL_GetTick>
 8003fe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fea:	1ac0      	subs	r0, r0, r3
 8003fec:	4285      	cmp	r5, r0
 8003fee:	d320      	bcc.n	8004032 <I2C_RequestMemoryWrite+0x1a6>
 8003ff0:	b1fd      	cbz	r5, 8004032 <I2C_RequestMemoryWrite+0x1a6>
 8003ff2:	6820      	ldr	r0, [r4, #0]
 8003ff4:	e780      	b.n	8003ef8 <I2C_RequestMemoryWrite+0x6c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ff6:	6943      	ldr	r3, [r0, #20]
 8003ff8:	061b      	lsls	r3, r3, #24
 8003ffa:	d493      	bmi.n	8003f24 <I2C_RequestMemoryWrite+0x98>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ffc:	6943      	ldr	r3, [r0, #20]
 8003ffe:	055b      	lsls	r3, r3, #21
 8004000:	d4d0      	bmi.n	8003fa4 <I2C_RequestMemoryWrite+0x118>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004002:	f7fd fcd9 	bl	80019b8 <HAL_GetTick>
 8004006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004008:	1ac0      	subs	r0, r0, r3
 800400a:	4285      	cmp	r5, r0
 800400c:	d311      	bcc.n	8004032 <I2C_RequestMemoryWrite+0x1a6>
 800400e:	b185      	cbz	r5, 8004032 <I2C_RequestMemoryWrite+0x1a6>
 8004010:	6820      	ldr	r0, [r4, #0]
 8004012:	e77e      	b.n	8003f12 <I2C_RequestMemoryWrite+0x86>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004014:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8004016:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004018:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800401a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800401e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004022:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004024:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004028:	f043 0320 	orr.w	r3, r3, #32
 800402c:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 800402e:	2001      	movs	r0, #1
 8004030:	e799      	b.n	8003f66 <I2C_RequestMemoryWrite+0xda>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004032:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004034:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004036:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004038:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800403c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004040:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004042:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004046:	f043 0320 	orr.w	r3, r3, #32
 800404a:	6423      	str	r3, [r4, #64]	; 0x40
 800404c:	e7ba      	b.n	8003fc4 <I2C_RequestMemoryWrite+0x138>
 800404e:	bf00      	nop

08004050 <I2C_RequestMemoryRead>:
{
 8004050:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8004054:	4604      	mov	r4, r0
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004056:	6800      	ldr	r0, [r0, #0]
{
 8004058:	4689      	mov	r9, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800405a:	6801      	ldr	r1, [r0, #0]
 800405c:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8004060:	6001      	str	r1, [r0, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004062:	6801      	ldr	r1, [r0, #0]
{
 8004064:	b082      	sub	sp, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004066:	f441 7180 	orr.w	r1, r1, #256	; 0x100
{
 800406a:	9d08      	ldr	r5, [sp, #32]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800406c:	6001      	str	r1, [r0, #0]
{
 800406e:	4616      	mov	r6, r2
 8004070:	461f      	mov	r7, r3
 8004072:	1c6b      	adds	r3, r5, #1
 8004074:	d15a      	bne.n	800412c <I2C_RequestMemoryRead+0xdc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004076:	6943      	ldr	r3, [r0, #20]
 8004078:	07d9      	lsls	r1, r3, #31
 800407a:	d5fc      	bpl.n	8004076 <I2C_RequestMemoryRead+0x26>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800407c:	fa5f f989 	uxtb.w	r9, r9
 8004080:	f009 03fe 	and.w	r3, r9, #254	; 0xfe
 8004084:	6103      	str	r3, [r0, #16]
 8004086:	1c69      	adds	r1, r5, #1
 8004088:	d014      	beq.n	80040b4 <I2C_RequestMemoryRead+0x64>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800408a:	6943      	ldr	r3, [r0, #20]
 800408c:	0799      	lsls	r1, r3, #30
 800408e:	d414      	bmi.n	80040ba <I2C_RequestMemoryRead+0x6a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004090:	6943      	ldr	r3, [r0, #20]
 8004092:	055b      	lsls	r3, r3, #21
 8004094:	d46e      	bmi.n	8004174 <I2C_RequestMemoryRead+0x124>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004096:	f7fd fc8f 	bl	80019b8 <HAL_GetTick>
 800409a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800409c:	1ac0      	subs	r0, r0, r3
 800409e:	4285      	cmp	r5, r0
 80040a0:	f0c0 80e8 	bcc.w	8004274 <I2C_RequestMemoryRead+0x224>
 80040a4:	2d00      	cmp	r5, #0
 80040a6:	f000 80e5 	beq.w	8004274 <I2C_RequestMemoryRead+0x224>
 80040aa:	6820      	ldr	r0, [r4, #0]
 80040ac:	e7eb      	b.n	8004086 <I2C_RequestMemoryRead+0x36>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040ae:	6943      	ldr	r3, [r0, #20]
 80040b0:	055b      	lsls	r3, r3, #21
 80040b2:	d45f      	bmi.n	8004174 <I2C_RequestMemoryRead+0x124>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040b4:	6943      	ldr	r3, [r0, #20]
 80040b6:	079a      	lsls	r2, r3, #30
 80040b8:	d5f9      	bpl.n	80040ae <I2C_RequestMemoryRead+0x5e>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ba:	2300      	movs	r3, #0
 80040bc:	9301      	str	r3, [sp, #4]
 80040be:	6943      	ldr	r3, [r0, #20]
 80040c0:	9301      	str	r3, [sp, #4]
 80040c2:	6983      	ldr	r3, [r0, #24]
 80040c4:	9301      	str	r3, [sp, #4]
 80040c6:	9b01      	ldr	r3, [sp, #4]
 80040c8:	1c6b      	adds	r3, r5, #1
 80040ca:	d003      	beq.n	80040d4 <I2C_RequestMemoryRead+0x84>
 80040cc:	e084      	b.n	80041d8 <I2C_RequestMemoryRead+0x188>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040ce:	6943      	ldr	r3, [r0, #20]
 80040d0:	055a      	lsls	r2, r3, #21
 80040d2:	d467      	bmi.n	80041a4 <I2C_RequestMemoryRead+0x154>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040d4:	6943      	ldr	r3, [r0, #20]
 80040d6:	0619      	lsls	r1, r3, #24
 80040d8:	d5f9      	bpl.n	80040ce <I2C_RequestMemoryRead+0x7e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040da:	2f01      	cmp	r7, #1
 80040dc:	f040 808d 	bne.w	80041fa <I2C_RequestMemoryRead+0x1aa>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040e0:	b2f6      	uxtb	r6, r6
 80040e2:	6106      	str	r6, [r0, #16]
 80040e4:	1c6b      	adds	r3, r5, #1
 80040e6:	d003      	beq.n	80040f0 <I2C_RequestMemoryRead+0xa0>
 80040e8:	e094      	b.n	8004214 <I2C_RequestMemoryRead+0x1c4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040ea:	6943      	ldr	r3, [r0, #20]
 80040ec:	055e      	lsls	r6, r3, #21
 80040ee:	d459      	bmi.n	80041a4 <I2C_RequestMemoryRead+0x154>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040f0:	6943      	ldr	r3, [r0, #20]
 80040f2:	061f      	lsls	r7, r3, #24
 80040f4:	d5f9      	bpl.n	80040ea <I2C_RequestMemoryRead+0x9a>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040f6:	6803      	ldr	r3, [r0, #0]
 80040f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040fc:	6003      	str	r3, [r0, #0]
 80040fe:	1c6b      	adds	r3, r5, #1
 8004100:	f040 80a8 	bne.w	8004254 <I2C_RequestMemoryRead+0x204>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004104:	6943      	ldr	r3, [r0, #20]
 8004106:	07df      	lsls	r7, r3, #31
 8004108:	d5fc      	bpl.n	8004104 <I2C_RequestMemoryRead+0xb4>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800410a:	f049 0901 	orr.w	r9, r9, #1
 800410e:	f8c0 9010 	str.w	r9, [r0, #16]
 8004112:	1c6a      	adds	r2, r5, #1
 8004114:	d003      	beq.n	800411e <I2C_RequestMemoryRead+0xce>
 8004116:	e0ca      	b.n	80042ae <I2C_RequestMemoryRead+0x25e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004118:	6943      	ldr	r3, [r0, #20]
 800411a:	055b      	lsls	r3, r3, #21
 800411c:	d42a      	bmi.n	8004174 <I2C_RequestMemoryRead+0x124>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800411e:	6943      	ldr	r3, [r0, #20]
 8004120:	43db      	mvns	r3, r3
 8004122:	f013 0302 	ands.w	r3, r3, #2
 8004126:	d1f7      	bne.n	8004118 <I2C_RequestMemoryRead+0xc8>
  return HAL_OK;
 8004128:	4618      	mov	r0, r3
 800412a:	e01c      	b.n	8004166 <I2C_RequestMemoryRead+0x116>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800412c:	6943      	ldr	r3, [r0, #20]
 800412e:	07da      	lsls	r2, r3, #31
 8004130:	d4a4      	bmi.n	800407c <I2C_RequestMemoryRead+0x2c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004132:	f7fd fc41 	bl	80019b8 <HAL_GetTick>
 8004136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004138:	1ac0      	subs	r0, r0, r3
 800413a:	4285      	cmp	r5, r0
 800413c:	6820      	ldr	r0, [r4, #0]
 800413e:	d301      	bcc.n	8004144 <I2C_RequestMemoryRead+0xf4>
 8004140:	2d00      	cmp	r5, #0
 8004142:	d196      	bne.n	8004072 <I2C_RequestMemoryRead+0x22>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004144:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004146:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004148:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800414a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800414e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004152:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004154:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004158:	f043 0320 	orr.w	r3, r3, #32
 800415c:	6423      	str	r3, [r4, #64]	; 0x40
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800415e:	6803      	ldr	r3, [r0, #0]
 8004160:	05da      	lsls	r2, r3, #23
 8004162:	d403      	bmi.n	800416c <I2C_RequestMemoryRead+0x11c>
    return HAL_TIMEOUT;
 8004164:	2003      	movs	r0, #3
}
 8004166:	b002      	add	sp, #8
 8004168:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800416c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004170:	6423      	str	r3, [r4, #64]	; 0x40
 8004172:	e7f7      	b.n	8004164 <I2C_RequestMemoryRead+0x114>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004174:	6803      	ldr	r3, [r0, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004176:	2200      	movs	r2, #0
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004178:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800417c:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8004180:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004182:	6003      	str	r3, [r0, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004184:	6145      	str	r5, [r0, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004186:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004188:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800418c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004190:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8004192:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004196:	f043 0304 	orr.w	r3, r3, #4
 800419a:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 800419c:	2001      	movs	r0, #1
}
 800419e:	b002      	add	sp, #8
 80041a0:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
    hi2c->PreviousState       = I2C_STATE_NONE;
 80041a4:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 80041a6:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041a8:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 80041ac:	6141      	str	r1, [r0, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80041ae:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80041b0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041b4:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 80041ba:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041be:	f043 0304 	orr.w	r3, r3, #4
 80041c2:	6423      	str	r3, [r4, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80041c6:	2b04      	cmp	r3, #4
 80041c8:	d1e8      	bne.n	800419c <I2C_RequestMemoryRead+0x14c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ca:	6822      	ldr	r2, [r4, #0]
 80041cc:	6813      	ldr	r3, [r2, #0]
 80041ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041d2:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 80041d4:	2001      	movs	r0, #1
 80041d6:	e7c6      	b.n	8004166 <I2C_RequestMemoryRead+0x116>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041d8:	6943      	ldr	r3, [r0, #20]
 80041da:	061b      	lsls	r3, r3, #24
 80041dc:	f53f af7d 	bmi.w	80040da <I2C_RequestMemoryRead+0x8a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041e0:	6943      	ldr	r3, [r0, #20]
 80041e2:	055a      	lsls	r2, r3, #21
 80041e4:	d4de      	bmi.n	80041a4 <I2C_RequestMemoryRead+0x154>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041e6:	f7fd fbe7 	bl	80019b8 <HAL_GetTick>
 80041ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041ec:	1ac0      	subs	r0, r0, r3
 80041ee:	4285      	cmp	r5, r0
 80041f0:	d34f      	bcc.n	8004292 <I2C_RequestMemoryRead+0x242>
 80041f2:	2d00      	cmp	r5, #0
 80041f4:	d04d      	beq.n	8004292 <I2C_RequestMemoryRead+0x242>
 80041f6:	6820      	ldr	r0, [r4, #0]
 80041f8:	e766      	b.n	80040c8 <I2C_RequestMemoryRead+0x78>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80041fa:	0a33      	lsrs	r3, r6, #8
 80041fc:	6103      	str	r3, [r0, #16]
 80041fe:	1c6a      	adds	r2, r5, #1
 8004200:	d003      	beq.n	800420a <I2C_RequestMemoryRead+0x1ba>
 8004202:	e017      	b.n	8004234 <I2C_RequestMemoryRead+0x1e4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004204:	6943      	ldr	r3, [r0, #20]
 8004206:	055f      	lsls	r7, r3, #21
 8004208:	d4cc      	bmi.n	80041a4 <I2C_RequestMemoryRead+0x154>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800420a:	6943      	ldr	r3, [r0, #20]
 800420c:	061b      	lsls	r3, r3, #24
 800420e:	f53f af67 	bmi.w	80040e0 <I2C_RequestMemoryRead+0x90>
 8004212:	e7f7      	b.n	8004204 <I2C_RequestMemoryRead+0x1b4>
 8004214:	6943      	ldr	r3, [r0, #20]
 8004216:	0619      	lsls	r1, r3, #24
 8004218:	f53f af6d 	bmi.w	80040f6 <I2C_RequestMemoryRead+0xa6>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800421c:	6943      	ldr	r3, [r0, #20]
 800421e:	055a      	lsls	r2, r3, #21
 8004220:	d4c0      	bmi.n	80041a4 <I2C_RequestMemoryRead+0x154>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004222:	f7fd fbc9 	bl	80019b8 <HAL_GetTick>
 8004226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004228:	1ac0      	subs	r0, r0, r3
 800422a:	4285      	cmp	r5, r0
 800422c:	d331      	bcc.n	8004292 <I2C_RequestMemoryRead+0x242>
 800422e:	b385      	cbz	r5, 8004292 <I2C_RequestMemoryRead+0x242>
 8004230:	6820      	ldr	r0, [r4, #0]
 8004232:	e757      	b.n	80040e4 <I2C_RequestMemoryRead+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004234:	6943      	ldr	r3, [r0, #20]
 8004236:	0619      	lsls	r1, r3, #24
 8004238:	f53f af52 	bmi.w	80040e0 <I2C_RequestMemoryRead+0x90>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800423c:	6943      	ldr	r3, [r0, #20]
 800423e:	0559      	lsls	r1, r3, #21
 8004240:	d4b0      	bmi.n	80041a4 <I2C_RequestMemoryRead+0x154>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004242:	f7fd fbb9 	bl	80019b8 <HAL_GetTick>
 8004246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004248:	1ac0      	subs	r0, r0, r3
 800424a:	4285      	cmp	r5, r0
 800424c:	d321      	bcc.n	8004292 <I2C_RequestMemoryRead+0x242>
 800424e:	b305      	cbz	r5, 8004292 <I2C_RequestMemoryRead+0x242>
 8004250:	6820      	ldr	r0, [r4, #0]
 8004252:	e7d4      	b.n	80041fe <I2C_RequestMemoryRead+0x1ae>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004254:	6943      	ldr	r3, [r0, #20]
 8004256:	07de      	lsls	r6, r3, #31
 8004258:	f53f af57 	bmi.w	800410a <I2C_RequestMemoryRead+0xba>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800425c:	f7fd fbac 	bl	80019b8 <HAL_GetTick>
 8004260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004262:	1ac0      	subs	r0, r0, r3
 8004264:	4285      	cmp	r5, r0
 8004266:	6820      	ldr	r0, [r4, #0]
 8004268:	f4ff af6c 	bcc.w	8004144 <I2C_RequestMemoryRead+0xf4>
 800426c:	2d00      	cmp	r5, #0
 800426e:	f47f af46 	bne.w	80040fe <I2C_RequestMemoryRead+0xae>
 8004272:	e767      	b.n	8004144 <I2C_RequestMemoryRead+0xf4>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004274:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8004276:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004278:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800427a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800427e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004282:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004284:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004288:	f043 0320 	orr.w	r3, r3, #32
 800428c:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 800428e:	2001      	movs	r0, #1
 8004290:	e769      	b.n	8004166 <I2C_RequestMemoryRead+0x116>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004292:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004294:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004296:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004298:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800429c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80042a2:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042a6:	f043 0320 	orr.w	r3, r3, #32
 80042aa:	6423      	str	r3, [r4, #64]	; 0x40
 80042ac:	e78a      	b.n	80041c4 <I2C_RequestMemoryRead+0x174>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042ae:	6943      	ldr	r3, [r0, #20]
 80042b0:	43db      	mvns	r3, r3
 80042b2:	f013 0302 	ands.w	r3, r3, #2
 80042b6:	f43f af37 	beq.w	8004128 <I2C_RequestMemoryRead+0xd8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042ba:	6943      	ldr	r3, [r0, #20]
 80042bc:	0559      	lsls	r1, r3, #21
 80042be:	f53f af59 	bmi.w	8004174 <I2C_RequestMemoryRead+0x124>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042c2:	f7fd fb79 	bl	80019b8 <HAL_GetTick>
 80042c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042c8:	1ac0      	subs	r0, r0, r3
 80042ca:	4285      	cmp	r5, r0
 80042cc:	d3d2      	bcc.n	8004274 <I2C_RequestMemoryRead+0x224>
 80042ce:	2d00      	cmp	r5, #0
 80042d0:	d0d0      	beq.n	8004274 <I2C_RequestMemoryRead+0x224>
 80042d2:	6820      	ldr	r0, [r4, #0]
 80042d4:	e71d      	b.n	8004112 <I2C_RequestMemoryRead+0xc2>
 80042d6:	bf00      	nop

080042d8 <HAL_I2C_MspInit>:
}
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop

080042dc <HAL_I2C_Init>:
  if (hi2c == NULL)
 80042dc:	2800      	cmp	r0, #0
 80042de:	f000 809f 	beq.w	8004420 <HAL_I2C_Init+0x144>
{
 80042e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042e4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80042e8:	4604      	mov	r4, r0
 80042ea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	f000 808f 	beq.w	8004412 <HAL_I2C_Init+0x136>
  __HAL_I2C_DISABLE(hi2c);
 80042f4:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80042f6:	2224      	movs	r2, #36	; 0x24
 80042f8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	f022 0201 	bic.w	r2, r2, #1
 8004302:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800430a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004312:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004314:	f7fe fc7c 	bl	8002c10 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004318:	6861      	ldr	r1, [r4, #4]
 800431a:	4b4b      	ldr	r3, [pc, #300]	; (8004448 <HAL_I2C_Init+0x16c>)
 800431c:	4299      	cmp	r1, r3
 800431e:	d84b      	bhi.n	80043b8 <HAL_I2C_Init+0xdc>
 8004320:	4b4a      	ldr	r3, [pc, #296]	; (800444c <HAL_I2C_Init+0x170>)
 8004322:	4298      	cmp	r0, r3
 8004324:	d97a      	bls.n	800441c <HAL_I2C_Init+0x140>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004326:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8004328:	4b49      	ldr	r3, [pc, #292]	; (8004450 <HAL_I2C_Init+0x174>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800432a:	6855      	ldr	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 800432c:	fba3 6300 	umull	r6, r3, r3, r0
 8004330:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004332:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8004336:	431d      	orrs	r5, r3
 8004338:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800433a:	6a15      	ldr	r5, [r2, #32]
 800433c:	3301      	adds	r3, #1
 800433e:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8004342:	432b      	orrs	r3, r5
 8004344:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004346:	69d5      	ldr	r5, [r2, #28]
 8004348:	0049      	lsls	r1, r1, #1
 800434a:	1e43      	subs	r3, r0, #1
 800434c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004350:	3301      	adds	r3, #1
 8004352:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004356:	f425 454f 	bic.w	r5, r5, #52992	; 0xcf00
 800435a:	2b04      	cmp	r3, #4
 800435c:	bf38      	it	cc
 800435e:	2304      	movcc	r3, #4
 8004360:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8004364:	432b      	orrs	r3, r5
 8004366:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004368:	e9d4 3507 	ldrd	r3, r5, [r4, #28]
 800436c:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800436e:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004370:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
 8004374:	432b      	orrs	r3, r5
 8004376:	4303      	orrs	r3, r0
 8004378:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800437a:	6890      	ldr	r0, [r2, #8]
 800437c:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800437e:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004380:	f420 4003 	bic.w	r0, r0, #33536	; 0x8300
 8004384:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8004388:	4329      	orrs	r1, r5
 800438a:	4301      	orrs	r1, r0
 800438c:	6091      	str	r1, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800438e:	68d1      	ldr	r1, [r2, #12]
 8004390:	69a0      	ldr	r0, [r4, #24]
 8004392:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8004396:	4303      	orrs	r3, r0
 8004398:	430b      	orrs	r3, r1
 800439a:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 800439c:	6811      	ldr	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800439e:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 80043a0:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 80043a4:	2520      	movs	r5, #32
  __HAL_I2C_ENABLE(hi2c);
 80043a6:	6011      	str	r1, [r2, #0]
  return HAL_OK;
 80043a8:	4618      	mov	r0, r3
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043aa:	6423      	str	r3, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80043ac:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80043b0:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043b2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80043b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80043b8:	4b26      	ldr	r3, [pc, #152]	; (8004454 <HAL_I2C_Init+0x178>)
 80043ba:	4298      	cmp	r0, r3
 80043bc:	d92e      	bls.n	800441c <HAL_I2C_Init+0x140>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80043be:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80043c0:	4b23      	ldr	r3, [pc, #140]	; (8004450 <HAL_I2C_Init+0x174>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80043c2:	6856      	ldr	r6, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80043c4:	4f24      	ldr	r7, [pc, #144]	; (8004458 <HAL_I2C_Init+0x17c>)
  freqrange = I2C_FREQRANGE(pclk1);
 80043c6:	fba3 5300 	umull	r5, r3, r3, r0
 80043ca:	0c9d      	lsrs	r5, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80043cc:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 80043d0:	432e      	orrs	r6, r5
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80043d2:	f44f 7396 	mov.w	r3, #300	; 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80043d6:	6056      	str	r6, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80043d8:	fb03 f305 	mul.w	r3, r3, r5
 80043dc:	fba7 5303 	umull	r5, r3, r7, r3
 80043e0:	6a15      	ldr	r5, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80043e2:	68a6      	ldr	r6, [r4, #8]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80043e4:	099b      	lsrs	r3, r3, #6
 80043e6:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80043ea:	3301      	adds	r3, #1
 80043ec:	432b      	orrs	r3, r5
 80043ee:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80043f0:	69d5      	ldr	r5, [r2, #28]
 80043f2:	f425 454f 	bic.w	r5, r5, #52992	; 0xcf00
 80043f6:	3801      	subs	r0, #1
 80043f8:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 80043fc:	b996      	cbnz	r6, 8004424 <HAL_I2C_Init+0x148>
 80043fe:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8004402:	fbb0 f0f1 	udiv	r0, r0, r1
 8004406:	3001      	adds	r0, #1
 8004408:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800440c:	b9c0      	cbnz	r0, 8004440 <HAL_I2C_Init+0x164>
 800440e:	2301      	movs	r3, #1
 8004410:	e7a8      	b.n	8004364 <HAL_I2C_Init+0x88>
    hi2c->Lock = HAL_UNLOCKED;
 8004412:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8004416:	f7ff ff5f 	bl	80042d8 <HAL_I2C_MspInit>
 800441a:	e76b      	b.n	80042f4 <HAL_I2C_Init+0x18>
    return HAL_ERROR;
 800441c:	2001      	movs	r0, #1
}
 800441e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8004420:	2001      	movs	r0, #1
}
 8004422:	4770      	bx	lr
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004424:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8004428:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800442c:	fbb0 f0f1 	udiv	r0, r0, r1
 8004430:	3001      	adds	r0, #1
 8004432:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8004436:	2800      	cmp	r0, #0
 8004438:	d0e9      	beq.n	800440e <HAL_I2C_Init+0x132>
 800443a:	f440 4340 	orr.w	r3, r0, #49152	; 0xc000
 800443e:	e791      	b.n	8004364 <HAL_I2C_Init+0x88>
 8004440:	f440 4300 	orr.w	r3, r0, #32768	; 0x8000
 8004444:	e78e      	b.n	8004364 <HAL_I2C_Init+0x88>
 8004446:	bf00      	nop
 8004448:	000186a0 	.word	0x000186a0
 800444c:	001e847f 	.word	0x001e847f
 8004450:	431bde83 	.word	0x431bde83
 8004454:	003d08ff 	.word	0x003d08ff
 8004458:	10624dd3 	.word	0x10624dd3

0800445c <HAL_I2C_MspDeInit>:
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop

08004460 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 8004460:	b1b0      	cbz	r0, 8004490 <HAL_I2C_DeInit+0x30>
  __HAL_I2C_DISABLE(hi2c);
 8004462:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004464:	2324      	movs	r3, #36	; 0x24
{
 8004466:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004468:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800446c:	6813      	ldr	r3, [r2, #0]
 800446e:	f023 0301 	bic.w	r3, r3, #1
 8004472:	4604      	mov	r4, r0
 8004474:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8004476:	f7ff fff1 	bl	800445c <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800447a:	2300      	movs	r3, #0
 800447c:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hi2c);
 800447e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  hi2c->State         = HAL_I2C_STATE_RESET;
 8004482:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004486:	4618      	mov	r0, r3
  hi2c->PreviousState = I2C_STATE_NONE;
 8004488:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800448a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 800448e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004490:	2001      	movs	r0, #1
}
 8004492:	4770      	bx	lr

08004494 <HAL_I2C_Mem_Write>:
{
 8004494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004498:	4604      	mov	r4, r0
 800449a:	b083      	sub	sp, #12
 800449c:	4699      	mov	r9, r3
 800449e:	460f      	mov	r7, r1
 80044a0:	4690      	mov	r8, r2
 80044a2:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 80044a6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  uint32_t tickstart = HAL_GetTick();
 80044a8:	f7fd fa86 	bl	80019b8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80044ac:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80044b0:	2b20      	cmp	r3, #32
 80044b2:	d004      	beq.n	80044be <HAL_I2C_Mem_Write+0x2a>
      return HAL_BUSY;
 80044b4:	2702      	movs	r7, #2
}
 80044b6:	4638      	mov	r0, r7
 80044b8:	b003      	add	sp, #12
 80044ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044be:	4605      	mov	r5, r0
 80044c0:	e005      	b.n	80044ce <HAL_I2C_Mem_Write+0x3a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044c2:	f7fd fa79 	bl	80019b8 <HAL_GetTick>
 80044c6:	1b40      	subs	r0, r0, r5
 80044c8:	2819      	cmp	r0, #25
 80044ca:	f200 80a6 	bhi.w	800461a <HAL_I2C_Mem_Write+0x186>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044ce:	6822      	ldr	r2, [r4, #0]
 80044d0:	6993      	ldr	r3, [r2, #24]
 80044d2:	43db      	mvns	r3, r3
 80044d4:	f013 0b02 	ands.w	fp, r3, #2
 80044d8:	d0f3      	beq.n	80044c2 <HAL_I2C_Mem_Write+0x2e>
    __HAL_LOCK(hi2c);
 80044da:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d0e8      	beq.n	80044b4 <HAL_I2C_Mem_Write+0x20>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044e2:	6813      	ldr	r3, [r2, #0]
    __HAL_LOCK(hi2c);
 80044e4:	2101      	movs	r1, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044e6:	07d8      	lsls	r0, r3, #31
    __HAL_LOCK(hi2c);
 80044e8:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044ec:	d402      	bmi.n	80044f4 <HAL_I2C_Mem_Write+0x60>
      __HAL_I2C_ENABLE(hi2c);
 80044ee:	6813      	ldr	r3, [r2, #0]
 80044f0:	430b      	orrs	r3, r1
 80044f2:	6013      	str	r3, [r2, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044f4:	6813      	ldr	r3, [r2, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044f6:	485e      	ldr	r0, [pc, #376]	; (8004670 <HAL_I2C_Mem_Write+0x1dc>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044fc:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80044fe:	2321      	movs	r3, #33	; 0x21
 8004500:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004504:	2240      	movs	r2, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004506:	2300      	movs	r3, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004508:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800450c:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 800450e:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004512:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8004516:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004518:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800451a:	4639      	mov	r1, r7
 800451c:	e9cd 6500 	strd	r6, r5, [sp]
 8004520:	464b      	mov	r3, r9
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004522:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004524:	4642      	mov	r2, r8
    hi2c->XferSize    = hi2c->XferCount;
 8004526:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800452a:	4620      	mov	r0, r4
 800452c:	f7ff fcae 	bl	8003e8c <I2C_RequestMemoryWrite>
 8004530:	4607      	mov	r7, r0
 8004532:	2800      	cmp	r0, #0
 8004534:	d14f      	bne.n	80045d6 <HAL_I2C_Mem_Write+0x142>
 8004536:	6823      	ldr	r3, [r4, #0]
 8004538:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    while (hi2c->XferSize > 0U)
 800453a:	b1f2      	cbz	r2, 800457a <HAL_I2C_Mem_Write+0xe6>
 800453c:	1c72      	adds	r2, r6, #1
 800453e:	d003      	beq.n	8004548 <HAL_I2C_Mem_Write+0xb4>
 8004540:	e04e      	b.n	80045e0 <HAL_I2C_Mem_Write+0x14c>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004542:	695a      	ldr	r2, [r3, #20]
 8004544:	0551      	lsls	r1, r2, #21
 8004546:	d42e      	bmi.n	80045a6 <HAL_I2C_Mem_Write+0x112>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004548:	695a      	ldr	r2, [r3, #20]
 800454a:	0610      	lsls	r0, r2, #24
 800454c:	d5f9      	bpl.n	8004542 <HAL_I2C_Mem_Write+0xae>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800454e:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8004552:	f8b4 e028 	ldrh.w	lr, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004556:	4660      	mov	r0, ip
      hi2c->XferSize--;
 8004558:	f10e 32ff 	add.w	r2, lr, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800455c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8004560:	6119      	str	r1, [r3, #16]
      hi2c->XferCount--;
 8004562:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8004564:	6260      	str	r0, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004566:	3901      	subs	r1, #1
 8004568:	b289      	uxth	r1, r1
 800456a:	8561      	strh	r1, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800456c:	6959      	ldr	r1, [r3, #20]
      hi2c->XferSize--;
 800456e:	b292      	uxth	r2, r2
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004570:	0748      	lsls	r0, r1, #29
      hi2c->XferSize--;
 8004572:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004574:	d5e1      	bpl.n	800453a <HAL_I2C_Mem_Write+0xa6>
 8004576:	2a00      	cmp	r2, #0
 8004578:	d140      	bne.n	80045fc <HAL_I2C_Mem_Write+0x168>
 800457a:	1c72      	adds	r2, r6, #1
 800457c:	d003      	beq.n	8004586 <HAL_I2C_Mem_Write+0xf2>
 800457e:	e05a      	b.n	8004636 <HAL_I2C_Mem_Write+0x1a2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004580:	695a      	ldr	r2, [r3, #20]
 8004582:	0551      	lsls	r1, r2, #21
 8004584:	d40f      	bmi.n	80045a6 <HAL_I2C_Mem_Write+0x112>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004586:	695a      	ldr	r2, [r3, #20]
 8004588:	0750      	lsls	r0, r2, #29
 800458a:	d5f9      	bpl.n	8004580 <HAL_I2C_Mem_Write+0xec>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800458c:	681a      	ldr	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800458e:	2100      	movs	r1, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004590:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004592:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004596:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8004598:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 800459c:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045a0:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
    return HAL_OK;
 80045a4:	e787      	b.n	80044b6 <HAL_I2C_Mem_Write+0x22>
    hi2c->PreviousState       = I2C_STATE_NONE;
 80045a6:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045a8:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 80045ac:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045ae:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80045b0:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80045b2:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045b6:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 80045bc:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045c0:	f043 0304 	orr.w	r3, r3, #4
 80045c4:	6423      	str	r3, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80045c8:	2b04      	cmp	r3, #4
 80045ca:	d104      	bne.n	80045d6 <HAL_I2C_Mem_Write+0x142>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045cc:	6822      	ldr	r2, [r4, #0]
 80045ce:	6813      	ldr	r3, [r2, #0]
 80045d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045d4:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 80045d6:	2701      	movs	r7, #1
}
 80045d8:	4638      	mov	r0, r7
 80045da:	b003      	add	sp, #12
 80045dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045e0:	695a      	ldr	r2, [r3, #20]
 80045e2:	0612      	lsls	r2, r2, #24
 80045e4:	d4b3      	bmi.n	800454e <HAL_I2C_Mem_Write+0xba>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045e6:	695a      	ldr	r2, [r3, #20]
 80045e8:	0551      	lsls	r1, r2, #21
 80045ea:	d4dc      	bmi.n	80045a6 <HAL_I2C_Mem_Write+0x112>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ec:	f7fd f9e4 	bl	80019b8 <HAL_GetTick>
 80045f0:	1b40      	subs	r0, r0, r5
 80045f2:	4286      	cmp	r6, r0
 80045f4:	d32d      	bcc.n	8004652 <HAL_I2C_Mem_Write+0x1be>
 80045f6:	b366      	cbz	r6, 8004652 <HAL_I2C_Mem_Write+0x1be>
 80045f8:	6823      	ldr	r3, [r4, #0]
 80045fa:	e79f      	b.n	800453c <HAL_I2C_Mem_Write+0xa8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045fc:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8004600:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 8004602:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8004604:	f1ae 0202 	sub.w	r2, lr, #2
        hi2c->XferCount--;
 8004608:	3801      	subs	r0, #1
        hi2c->XferSize--;
 800460a:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 800460c:	f10c 0102 	add.w	r1, ip, #2
        hi2c->XferCount--;
 8004610:	b280      	uxth	r0, r0
        hi2c->XferSize--;
 8004612:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8004614:	6261      	str	r1, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8004616:	8560      	strh	r0, [r4, #42]	; 0x2a
 8004618:	e78f      	b.n	800453a <HAL_I2C_Mem_Write+0xa6>
        hi2c->State             = HAL_I2C_STATE_READY;
 800461a:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800461c:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004620:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004624:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004628:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800462a:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800462e:	f043 0320 	orr.w	r3, r3, #32
 8004632:	6423      	str	r3, [r4, #64]	; 0x40
 8004634:	e73e      	b.n	80044b4 <HAL_I2C_Mem_Write+0x20>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004636:	695a      	ldr	r2, [r3, #20]
 8004638:	0752      	lsls	r2, r2, #29
 800463a:	d4a7      	bmi.n	800458c <HAL_I2C_Mem_Write+0xf8>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800463c:	695a      	ldr	r2, [r3, #20]
 800463e:	0551      	lsls	r1, r2, #21
 8004640:	d4b1      	bmi.n	80045a6 <HAL_I2C_Mem_Write+0x112>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004642:	f7fd f9b9 	bl	80019b8 <HAL_GetTick>
 8004646:	1b40      	subs	r0, r0, r5
 8004648:	4286      	cmp	r6, r0
 800464a:	d302      	bcc.n	8004652 <HAL_I2C_Mem_Write+0x1be>
 800464c:	b10e      	cbz	r6, 8004652 <HAL_I2C_Mem_Write+0x1be>
 800464e:	6823      	ldr	r3, [r4, #0]
 8004650:	e793      	b.n	800457a <HAL_I2C_Mem_Write+0xe6>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004652:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004654:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004656:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004658:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800465c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004660:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004662:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004666:	f043 0320 	orr.w	r3, r3, #32
 800466a:	6423      	str	r3, [r4, #64]	; 0x40
 800466c:	e7ab      	b.n	80045c6 <HAL_I2C_Mem_Write+0x132>
 800466e:	bf00      	nop
 8004670:	ffff0000 	.word	0xffff0000

08004674 <HAL_I2C_Mem_Read>:
{
 8004674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004678:	4604      	mov	r4, r0
 800467a:	b087      	sub	sp, #28
 800467c:	4699      	mov	r9, r3
 800467e:	460f      	mov	r7, r1
 8004680:	4690      	mov	r8, r2
 8004682:	f8bd a044 	ldrh.w	sl, [sp, #68]	; 0x44
 8004686:	9d12      	ldr	r5, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 8004688:	f7fd f996 	bl	80019b8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800468c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004690:	2b20      	cmp	r3, #32
 8004692:	d004      	beq.n	800469e <HAL_I2C_Mem_Read+0x2a>
      return HAL_BUSY;
 8004694:	2702      	movs	r7, #2
}
 8004696:	4638      	mov	r0, r7
 8004698:	b007      	add	sp, #28
 800469a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800469e:	4606      	mov	r6, r0
 80046a0:	e004      	b.n	80046ac <HAL_I2C_Mem_Read+0x38>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046a2:	f7fd f989 	bl	80019b8 <HAL_GetTick>
 80046a6:	1b80      	subs	r0, r0, r6
 80046a8:	2819      	cmp	r0, #25
 80046aa:	d84a      	bhi.n	8004742 <HAL_I2C_Mem_Read+0xce>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046ac:	6822      	ldr	r2, [r4, #0]
 80046ae:	6993      	ldr	r3, [r2, #24]
 80046b0:	43db      	mvns	r3, r3
 80046b2:	f013 0b02 	ands.w	fp, r3, #2
 80046b6:	d0f4      	beq.n	80046a2 <HAL_I2C_Mem_Read+0x2e>
    __HAL_LOCK(hi2c);
 80046b8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d0e9      	beq.n	8004694 <HAL_I2C_Mem_Read+0x20>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80046c0:	6813      	ldr	r3, [r2, #0]
    __HAL_LOCK(hi2c);
 80046c2:	2101      	movs	r1, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80046c4:	07db      	lsls	r3, r3, #31
    __HAL_LOCK(hi2c);
 80046c6:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80046ca:	d402      	bmi.n	80046d2 <HAL_I2C_Mem_Read+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 80046cc:	6813      	ldr	r3, [r2, #0]
 80046ce:	430b      	orrs	r3, r1
 80046d0:	6013      	str	r3, [r2, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046d2:	6813      	ldr	r3, [r2, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046d4:	48a2      	ldr	r0, [pc, #648]	; (8004960 <HAL_I2C_Mem_Read+0x2ec>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046da:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80046dc:	2322      	movs	r3, #34	; 0x22
 80046de:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046e2:	2240      	movs	r2, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046e4:	2300      	movs	r3, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046e6:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046ea:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80046ec:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80046f0:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 80046f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80046f6:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046f8:	4639      	mov	r1, r7
 80046fa:	e9cd 5600 	strd	r5, r6, [sp]
 80046fe:	464b      	mov	r3, r9
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004700:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004702:	4642      	mov	r2, r8
    hi2c->XferSize    = hi2c->XferCount;
 8004704:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004708:	4620      	mov	r0, r4
 800470a:	f7ff fca1 	bl	8004050 <I2C_RequestMemoryRead>
 800470e:	4607      	mov	r7, r0
 8004710:	b9a8      	cbnz	r0, 800473e <HAL_I2C_Mem_Read+0xca>
    if (hi2c->XferSize == 0U)
 8004712:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8004714:	6823      	ldr	r3, [r4, #0]
 8004716:	bb12      	cbnz	r2, 800475e <HAL_I2C_Mem_Read+0xea>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004718:	9002      	str	r0, [sp, #8]
 800471a:	695a      	ldr	r2, [r3, #20]
 800471c:	9202      	str	r2, [sp, #8]
 800471e:	699a      	ldr	r2, [r3, #24]
 8004720:	9202      	str	r2, [sp, #8]
 8004722:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800472a:	601a      	str	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800472c:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800472e:	2220      	movs	r2, #32
 8004730:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8004734:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004738:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 800473c:	e7ab      	b.n	8004696 <HAL_I2C_Mem_Read+0x22>
      return HAL_ERROR;
 800473e:	2701      	movs	r7, #1
 8004740:	e7a9      	b.n	8004696 <HAL_I2C_Mem_Read+0x22>
        hi2c->State             = HAL_I2C_STATE_READY;
 8004742:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004744:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004748:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800474c:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004750:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004752:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004756:	f043 0320 	orr.w	r3, r3, #32
 800475a:	6423      	str	r3, [r4, #64]	; 0x40
 800475c:	e79a      	b.n	8004694 <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 800475e:	2a01      	cmp	r2, #1
 8004760:	f000 8091 	beq.w	8004886 <HAL_I2C_Mem_Read+0x212>
    else if (hi2c->XferSize == 2U)
 8004764:	2a02      	cmp	r2, #2
 8004766:	f000 80fd 	beq.w	8004964 <HAL_I2C_Mem_Read+0x2f0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800476a:	9005      	str	r0, [sp, #20]
 800476c:	6959      	ldr	r1, [r3, #20]
 800476e:	9105      	str	r1, [sp, #20]
 8004770:	6999      	ldr	r1, [r3, #24]
 8004772:	9105      	str	r1, [sp, #20]
 8004774:	9905      	ldr	r1, [sp, #20]
      if (hi2c->XferSize <= 3U)
 8004776:	2a03      	cmp	r2, #3
 8004778:	d848      	bhi.n	800480c <HAL_I2C_Mem_Read+0x198>
        if (hi2c->XferSize == 1U)
 800477a:	2a01      	cmp	r2, #1
 800477c:	f000 80bc 	beq.w	80048f8 <HAL_I2C_Mem_Read+0x284>
        else if (hi2c->XferSize == 2U)
 8004780:	2a02      	cmp	r2, #2
 8004782:	d074      	beq.n	800486e <HAL_I2C_Mem_Read+0x1fa>
 8004784:	1c68      	adds	r0, r5, #1
 8004786:	f040 808d 	bne.w	80048a4 <HAL_I2C_Mem_Read+0x230>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800478a:	695a      	ldr	r2, [r3, #20]
 800478c:	0751      	lsls	r1, r2, #29
 800478e:	d5fc      	bpl.n	800478a <HAL_I2C_Mem_Read+0x116>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004790:	681a      	ldr	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004792:	6a61      	ldr	r1, [r4, #36]	; 0x24
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004794:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004798:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 800479e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80047a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80047a2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80047a4:	3b01      	subs	r3, #1
 80047a6:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 80047a8:	3101      	adds	r1, #1
          hi2c->XferSize--;
 80047aa:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 80047ac:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80047ae:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80047b0:	8522      	strh	r2, [r4, #40]	; 0x28
 80047b2:	1c68      	adds	r0, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047b4:	6822      	ldr	r2, [r4, #0]
 80047b6:	f040 8081 	bne.w	80048bc <HAL_I2C_Mem_Read+0x248>
 80047ba:	6953      	ldr	r3, [r2, #20]
 80047bc:	0759      	lsls	r1, r3, #29
 80047be:	d5fc      	bpl.n	80047ba <HAL_I2C_Mem_Read+0x146>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047c0:	6813      	ldr	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047c2:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047c8:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047ca:	6913      	ldr	r3, [r2, #16]
 80047cc:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 80047ce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80047d0:	6a60      	ldr	r0, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80047d2:	8d21      	ldrh	r1, [r4, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047d4:	6822      	ldr	r2, [r4, #0]
          hi2c->XferCount--;
 80047d6:	3b01      	subs	r3, #1
 80047d8:	b29b      	uxth	r3, r3
 80047da:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047dc:	6912      	ldr	r2, [r2, #16]
          hi2c->pBuffPtr++;
 80047de:	f100 0c01 	add.w	ip, r0, #1
          hi2c->XferSize--;
 80047e2:	1e4b      	subs	r3, r1, #1
          hi2c->pBuffPtr++;
 80047e4:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80047e8:	8523      	strh	r3, [r4, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047ea:	7042      	strb	r2, [r0, #1]
          hi2c->XferSize--;
 80047ec:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80047ee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80047f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80047f2:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 80047f4:	3b01      	subs	r3, #1
          hi2c->XferSize--;
 80047f6:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 80047f8:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 80047fa:	3101      	adds	r1, #1
          hi2c->XferSize--;
 80047fc:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80047fe:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8004800:	6261      	str	r1, [r4, #36]	; 0x24
    while (hi2c->XferSize > 0U)
 8004802:	2a00      	cmp	r2, #0
 8004804:	d092      	beq.n	800472c <HAL_I2C_Mem_Read+0xb8>
      if (hi2c->XferSize <= 3U)
 8004806:	2a03      	cmp	r2, #3
 8004808:	6823      	ldr	r3, [r4, #0]
 800480a:	d9b6      	bls.n	800477a <HAL_I2C_Mem_Read+0x106>
 800480c:	b955      	cbnz	r5, 8004824 <HAL_I2C_Mem_Read+0x1b0>
 800480e:	e098      	b.n	8004942 <HAL_I2C_Mem_Read+0x2ce>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004810:	695a      	ldr	r2, [r3, #20]
 8004812:	06d2      	lsls	r2, r2, #27
 8004814:	f100 8082 	bmi.w	800491c <HAL_I2C_Mem_Read+0x2a8>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004818:	f7fd f8ce 	bl	80019b8 <HAL_GetTick>
 800481c:	1b80      	subs	r0, r0, r6
 800481e:	4285      	cmp	r5, r0
 8004820:	d358      	bcc.n	80048d4 <HAL_I2C_Mem_Read+0x260>
 8004822:	6823      	ldr	r3, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004824:	695a      	ldr	r2, [r3, #20]
 8004826:	0651      	lsls	r1, r2, #25
 8004828:	d5f2      	bpl.n	8004810 <HAL_I2C_Mem_Read+0x19c>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800482a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	7013      	strb	r3, [r2, #0]
        hi2c->XferCount--;
 8004830:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004832:	6823      	ldr	r3, [r4, #0]
        hi2c->XferSize--;
 8004834:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8004836:	6a60      	ldr	r0, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8004838:	3901      	subs	r1, #1
 800483a:	b289      	uxth	r1, r1
 800483c:	8561      	strh	r1, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800483e:	6959      	ldr	r1, [r3, #20]
        hi2c->XferSize--;
 8004840:	3a01      	subs	r2, #1
 8004842:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 8004844:	f100 0c01 	add.w	ip, r0, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004848:	0749      	lsls	r1, r1, #29
        hi2c->XferSize--;
 800484a:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 800484c:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004850:	d5d7      	bpl.n	8004802 <HAL_I2C_Mem_Read+0x18e>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	7043      	strb	r3, [r0, #1]
 8004856:	e7c9      	b.n	80047ec <HAL_I2C_Mem_Read+0x178>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004858:	695a      	ldr	r2, [r3, #20]
 800485a:	0752      	lsls	r2, r2, #29
 800485c:	d40c      	bmi.n	8004878 <HAL_I2C_Mem_Read+0x204>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800485e:	f7fd f8ab 	bl	80019b8 <HAL_GetTick>
 8004862:	1b80      	subs	r0, r0, r6
 8004864:	4285      	cmp	r5, r0
 8004866:	d335      	bcc.n	80048d4 <HAL_I2C_Mem_Read+0x260>
 8004868:	2d00      	cmp	r5, #0
 800486a:	d033      	beq.n	80048d4 <HAL_I2C_Mem_Read+0x260>
 800486c:	6823      	ldr	r3, [r4, #0]
 800486e:	1c68      	adds	r0, r5, #1
 8004870:	d1f2      	bne.n	8004858 <HAL_I2C_Mem_Read+0x1e4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004872:	695a      	ldr	r2, [r3, #20]
 8004874:	0751      	lsls	r1, r2, #29
 8004876:	d5fc      	bpl.n	8004872 <HAL_I2C_Mem_Read+0x1fe>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004878:	681a      	ldr	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800487a:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800487c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004880:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	e7a2      	b.n	80047cc <HAL_I2C_Mem_Read+0x158>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004886:	6819      	ldr	r1, [r3, #0]
 8004888:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800488c:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800488e:	9003      	str	r0, [sp, #12]
 8004890:	6959      	ldr	r1, [r3, #20]
 8004892:	9103      	str	r1, [sp, #12]
 8004894:	6999      	ldr	r1, [r3, #24]
 8004896:	9103      	str	r1, [sp, #12]
 8004898:	9903      	ldr	r1, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800489a:	6819      	ldr	r1, [r3, #0]
 800489c:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80048a0:	6019      	str	r1, [r3, #0]
 80048a2:	e768      	b.n	8004776 <HAL_I2C_Mem_Read+0x102>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048a4:	695a      	ldr	r2, [r3, #20]
 80048a6:	0752      	lsls	r2, r2, #29
 80048a8:	f53f af72 	bmi.w	8004790 <HAL_I2C_Mem_Read+0x11c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ac:	f7fd f884 	bl	80019b8 <HAL_GetTick>
 80048b0:	1b80      	subs	r0, r0, r6
 80048b2:	4285      	cmp	r5, r0
 80048b4:	d30e      	bcc.n	80048d4 <HAL_I2C_Mem_Read+0x260>
 80048b6:	b16d      	cbz	r5, 80048d4 <HAL_I2C_Mem_Read+0x260>
 80048b8:	6823      	ldr	r3, [r4, #0]
 80048ba:	e763      	b.n	8004784 <HAL_I2C_Mem_Read+0x110>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048bc:	6953      	ldr	r3, [r2, #20]
 80048be:	075b      	lsls	r3, r3, #29
 80048c0:	f53f af7e 	bmi.w	80047c0 <HAL_I2C_Mem_Read+0x14c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048c4:	f7fd f878 	bl	80019b8 <HAL_GetTick>
 80048c8:	1b80      	subs	r0, r0, r6
 80048ca:	4285      	cmp	r5, r0
 80048cc:	d302      	bcc.n	80048d4 <HAL_I2C_Mem_Read+0x260>
 80048ce:	2d00      	cmp	r5, #0
 80048d0:	f47f af6f 	bne.w	80047b2 <HAL_I2C_Mem_Read+0x13e>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80048d4:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80048d6:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80048d8:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80048da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80048de:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80048e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80048e4:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
          return HAL_ERROR;
 80048e8:	2701      	movs	r7, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80048ea:	f043 0320 	orr.w	r3, r3, #32
}
 80048ee:	4638      	mov	r0, r7
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80048f0:	6423      	str	r3, [r4, #64]	; 0x40
}
 80048f2:	b007      	add	sp, #28
 80048f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048f8:	b94d      	cbnz	r5, 800490e <HAL_I2C_Mem_Read+0x29a>
 80048fa:	e02c      	b.n	8004956 <HAL_I2C_Mem_Read+0x2e2>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80048fc:	695a      	ldr	r2, [r3, #20]
 80048fe:	06d1      	lsls	r1, r2, #27
 8004900:	d40c      	bmi.n	800491c <HAL_I2C_Mem_Read+0x2a8>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004902:	f7fd f859 	bl	80019b8 <HAL_GetTick>
 8004906:	1b80      	subs	r0, r0, r6
 8004908:	4285      	cmp	r5, r0
 800490a:	d3e3      	bcc.n	80048d4 <HAL_I2C_Mem_Read+0x260>
 800490c:	6823      	ldr	r3, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800490e:	695a      	ldr	r2, [r3, #20]
 8004910:	0650      	lsls	r0, r2, #25
 8004912:	d5f3      	bpl.n	80048fc <HAL_I2C_Mem_Read+0x288>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004914:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	7013      	strb	r3, [r2, #0]
 800491a:	e767      	b.n	80047ec <HAL_I2C_Mem_Read+0x178>
      hi2c->PreviousState       = I2C_STATE_NONE;
 800491c:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800491e:	f06f 0010 	mvn.w	r0, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 8004922:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004924:	6158      	str	r0, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004926:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004928:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800492c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004930:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8004932:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8004936:	2701      	movs	r7, #1
}
 8004938:	4638      	mov	r0, r7
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800493a:	6423      	str	r3, [r4, #64]	; 0x40
}
 800493c:	b007      	add	sp, #28
 800493e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004942:	695a      	ldr	r2, [r3, #20]
 8004944:	0650      	lsls	r0, r2, #25
 8004946:	f53f af70 	bmi.w	800482a <HAL_I2C_Mem_Read+0x1b6>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800494a:	695a      	ldr	r2, [r3, #20]
 800494c:	06d0      	lsls	r0, r2, #27
 800494e:	d4e5      	bmi.n	800491c <HAL_I2C_Mem_Read+0x2a8>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004950:	f7fd f832 	bl	80019b8 <HAL_GetTick>
 8004954:	e7be      	b.n	80048d4 <HAL_I2C_Mem_Read+0x260>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004956:	695a      	ldr	r2, [r3, #20]
 8004958:	0652      	lsls	r2, r2, #25
 800495a:	d5f6      	bpl.n	800494a <HAL_I2C_Mem_Read+0x2d6>
 800495c:	e7da      	b.n	8004914 <HAL_I2C_Mem_Read+0x2a0>
 800495e:	bf00      	nop
 8004960:	ffff0000 	.word	0xffff0000
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004964:	6819      	ldr	r1, [r3, #0]
 8004966:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800496a:	6019      	str	r1, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800496c:	6819      	ldr	r1, [r3, #0]
 800496e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8004972:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004974:	9004      	str	r0, [sp, #16]
 8004976:	6959      	ldr	r1, [r3, #20]
 8004978:	9104      	str	r1, [sp, #16]
 800497a:	6999      	ldr	r1, [r3, #24]
 800497c:	9104      	str	r1, [sp, #16]
 800497e:	9904      	ldr	r1, [sp, #16]
 8004980:	e6f9      	b.n	8004776 <HAL_I2C_Mem_Read+0x102>
 8004982:	bf00      	nop

08004984 <HAL_I2C_GetState>:
  return hi2c->State;
 8004984:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop

0800498c <USBD_CDC_EP0_RxReady>:
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800498c:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8004990:	b183      	cbz	r3, 80049b4 <USBD_CDC_EP0_RxReady+0x28>
{
 8004992:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004994:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004998:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800499c:	28ff      	cmp	r0, #255	; 0xff
 800499e:	d007      	beq.n	80049b0 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 80049a6:	4621      	mov	r1, r4
 80049a8:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 80049aa:	23ff      	movs	r3, #255	; 0xff
 80049ac:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
}
 80049b0:	2000      	movs	r0, #0
 80049b2:	bd10      	pop	{r4, pc}
 80049b4:	2000      	movs	r0, #0
 80049b6:	4770      	bx	lr

080049b8 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80049b8:	2343      	movs	r3, #67	; 0x43
 80049ba:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 80049bc:	4800      	ldr	r0, [pc, #0]	; (80049c0 <USBD_CDC_GetFSCfgDesc+0x8>)
 80049be:	4770      	bx	lr
 80049c0:	20000058 	.word	0x20000058

080049c4 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80049c4:	2343      	movs	r3, #67	; 0x43
 80049c6:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 80049c8:	4800      	ldr	r0, [pc, #0]	; (80049cc <USBD_CDC_GetHSCfgDesc+0x8>)
 80049ca:	4770      	bx	lr
 80049cc:	2000009c 	.word	0x2000009c

080049d0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80049d0:	2343      	movs	r3, #67	; 0x43
 80049d2:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 80049d4:	4800      	ldr	r0, [pc, #0]	; (80049d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 80049d6:	4770      	bx	lr
 80049d8:	200000ec 	.word	0x200000ec

080049dc <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80049dc:	230a      	movs	r3, #10
 80049de:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 80049e0:	4800      	ldr	r0, [pc, #0]	; (80049e4 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80049e2:	4770      	bx	lr
 80049e4:	200000e0 	.word	0x200000e0

080049e8 <USBD_CDC_DataOut>:
{
 80049e8:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80049ea:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 80049ee:	b174      	cbz	r4, 8004a0e <USBD_CDC_DataOut+0x26>
 80049f0:	4605      	mov	r5, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80049f2:	f003 f837 	bl	8007a64 <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80049f6:	f8d5 32c0 	ldr.w	r3, [r5, #704]	; 0x2c0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80049fa:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8004a04:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8004a08:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8004a0a:	2000      	movs	r0, #0
}
 8004a0c:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8004a0e:	2003      	movs	r0, #3
}
 8004a10:	bd38      	pop	{r3, r4, r5, pc}
 8004a12:	bf00      	nop

08004a14 <USBD_CDC_DataIn>:
{
 8004a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pdev->pClassData == NULL)
 8004a16:	f8d0 72bc 	ldr.w	r7, [r0, #700]	; 0x2bc
 8004a1a:	b1a7      	cbz	r7, 8004a46 <USBD_CDC_DataIn+0x32>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004a1c:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 8004a20:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8004a24:	4603      	mov	r3, r0
 8004a26:	69ae      	ldr	r6, [r5, #24]
 8004a28:	460a      	mov	r2, r1
 8004a2a:	b976      	cbnz	r6, 8004a4a <USBD_CDC_DataIn+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004a2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004a30:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 8004a34:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 8004a36:	2400      	movs	r4, #0
 8004a38:	f8c7 4214 	str.w	r4, [r7, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004a3c:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8004a40:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8004a42:	4620      	mov	r0, r4
}
 8004a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 8004a46:	2003      	movs	r0, #3
}
 8004a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004a4a:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
 8004a4e:	ebc1 0cc1 	rsb	ip, r1, r1, lsl #3
 8004a52:	eb04 048c 	add.w	r4, r4, ip, lsl #2
 8004a56:	f8d4 c044 	ldr.w	ip, [r4, #68]	; 0x44
 8004a5a:	fbb6 f4fc 	udiv	r4, r6, ip
 8004a5e:	fb0c 6414 	mls	r4, ip, r4, r6
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004a62:	2c00      	cmp	r4, #0
 8004a64:	d1e2      	bne.n	8004a2c <USBD_CDC_DataIn+0x18>
    pdev->ep_in[epnum].total_length = 0U;
 8004a66:	61ac      	str	r4, [r5, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004a68:	4623      	mov	r3, r4
 8004a6a:	4622      	mov	r2, r4
 8004a6c:	f002 ffde 	bl	8007a2c <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8004a70:	4620      	mov	r0, r4
}
 8004a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004a74 <USBD_CDC_Setup>:
{
 8004a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004a78:	780b      	ldrb	r3, [r1, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004a7a:	f8d0 82bc 	ldr.w	r8, [r0, #700]	; 0x2bc
{
 8004a7e:	b082      	sub	sp, #8
  uint8_t ifalt = 0U;
 8004a80:	2700      	movs	r7, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004a82:	f013 0260 	ands.w	r2, r3, #96	; 0x60
{
 8004a86:	460c      	mov	r4, r1
 8004a88:	4606      	mov	r6, r0
  uint8_t ifalt = 0U;
 8004a8a:	f88d 7005 	strb.w	r7, [sp, #5]
  uint16_t status_info = 0U;
 8004a8e:	f8ad 7006 	strh.w	r7, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004a92:	d01c      	beq.n	8004ace <USBD_CDC_Setup+0x5a>
 8004a94:	2a20      	cmp	r2, #32
 8004a96:	d112      	bne.n	8004abe <USBD_CDC_Setup+0x4a>
    if (req->wLength != 0U)
 8004a98:	88cd      	ldrh	r5, [r1, #6]
 8004a9a:	f891 c001 	ldrb.w	ip, [r1, #1]
 8004a9e:	2d00      	cmp	r5, #0
 8004aa0:	d147      	bne.n	8004b32 <USBD_CDC_Setup+0xbe>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004aa2:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8004aa6:	462a      	mov	r2, r5
 8004aa8:	4660      	mov	r0, ip
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 8004aae:	4628      	mov	r0, r5
}
 8004ab0:	b002      	add	sp, #8
 8004ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ab6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004aba:	2b03      	cmp	r3, #3
 8004abc:	d049      	beq.n	8004b52 <USBD_CDC_Setup+0xde>
      USBD_CtlError(pdev, req);
 8004abe:	4630      	mov	r0, r6
 8004ac0:	4621      	mov	r1, r4
 8004ac2:	f000 fd01 	bl	80054c8 <USBD_CtlError>
      ret = USBD_FAIL;
 8004ac6:	2003      	movs	r0, #3
}
 8004ac8:	b002      	add	sp, #8
 8004aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (req->bRequest)
 8004ace:	784b      	ldrb	r3, [r1, #1]
 8004ad0:	2b0b      	cmp	r3, #11
 8004ad2:	d8f4      	bhi.n	8004abe <USBD_CDC_Setup+0x4a>
 8004ad4:	a201      	add	r2, pc, #4	; (adr r2, 8004adc <USBD_CDC_Setup+0x68>)
 8004ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ada:	bf00      	nop
 8004adc:	08004ab7 	.word	0x08004ab7
 8004ae0:	08004b15 	.word	0x08004b15
 8004ae4:	08004abf 	.word	0x08004abf
 8004ae8:	08004abf 	.word	0x08004abf
 8004aec:	08004abf 	.word	0x08004abf
 8004af0:	08004abf 	.word	0x08004abf
 8004af4:	08004abf 	.word	0x08004abf
 8004af8:	08004abf 	.word	0x08004abf
 8004afc:	08004abf 	.word	0x08004abf
 8004b00:	08004abf 	.word	0x08004abf
 8004b04:	08004b1d 	.word	0x08004b1d
 8004b08:	08004b0d 	.word	0x08004b0d
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004b0c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004b10:	2b03      	cmp	r3, #3
 8004b12:	d1d4      	bne.n	8004abe <USBD_CDC_Setup+0x4a>
  USBD_StatusTypeDef ret = USBD_OK;
 8004b14:	2000      	movs	r0, #0
}
 8004b16:	b002      	add	sp, #8
 8004b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b1c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004b20:	2b03      	cmp	r3, #3
 8004b22:	d1cc      	bne.n	8004abe <USBD_CDC_Setup+0x4a>
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004b24:	2201      	movs	r2, #1
 8004b26:	f10d 0105 	add.w	r1, sp, #5
 8004b2a:	f000 fcff 	bl	800552c <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8004b2e:	2000      	movs	r0, #0
 8004b30:	e7ca      	b.n	8004ac8 <USBD_CDC_Setup+0x54>
      if ((req->bmRequest & 0x80U) != 0U)
 8004b32:	061b      	lsls	r3, r3, #24
 8004b34:	d514      	bpl.n	8004b60 <USBD_CDC_Setup+0xec>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004b36:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8004b3a:	462a      	mov	r2, r5
 8004b3c:	4660      	mov	r0, ip
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	4641      	mov	r1, r8
 8004b42:	4798      	blx	r3
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004b44:	88e2      	ldrh	r2, [r4, #6]
 8004b46:	4641      	mov	r1, r8
 8004b48:	4630      	mov	r0, r6
 8004b4a:	f000 fcef 	bl	800552c <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8004b4e:	4638      	mov	r0, r7
 8004b50:	e7ba      	b.n	8004ac8 <USBD_CDC_Setup+0x54>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004b52:	2202      	movs	r2, #2
 8004b54:	f10d 0106 	add.w	r1, sp, #6
 8004b58:	f000 fce8 	bl	800552c <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8004b5c:	2000      	movs	r0, #0
 8004b5e:	e7b3      	b.n	8004ac8 <USBD_CDC_Setup+0x54>
        hcdc->CmdOpCode = req->bRequest;
 8004b60:	f888 c200 	strb.w	ip, [r8, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8004b64:	f888 5201 	strb.w	r5, [r8, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004b68:	462a      	mov	r2, r5
 8004b6a:	4641      	mov	r1, r8
 8004b6c:	f000 fcf4 	bl	8005558 <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 8004b70:	4638      	mov	r0, r7
 8004b72:	e7a9      	b.n	8004ac8 <USBD_CDC_Setup+0x54>

08004b74 <USBD_CDC_DeInit>:
{
 8004b74:	b538      	push	{r3, r4, r5, lr}
 8004b76:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004b78:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004b7a:	2181      	movs	r1, #129	; 0x81
 8004b7c:	f002 ff0a 	bl	8007994 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004b80:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004b82:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004b84:	4620      	mov	r0, r4
 8004b86:	f002 ff05 	bl	8007994 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004b8a:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004b8e:	4620      	mov	r0, r4
 8004b90:	2182      	movs	r1, #130	; 0x82
 8004b92:	f002 feff 	bl	8007994 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8004b96:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004b9a:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassData != NULL)
 8004b9c:	b14b      	cbz	r3, 8004bb2 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004b9e:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8004ba6:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 8004baa:	f002 ff91 	bl	8007ad0 <free>
    pdev->pClassData = NULL;
 8004bae:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 8004bb2:	2000      	movs	r0, #0
 8004bb4:	bd38      	pop	{r3, r4, r5, pc}
 8004bb6:	bf00      	nop

08004bb8 <USBD_CDC_Init>:
{
 8004bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bbc:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004bbe:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004bc2:	f002 ff7d 	bl	8007ac0 <malloc>
  if (hcdc == NULL)
 8004bc6:	4605      	mov	r5, r0
 8004bc8:	2800      	cmp	r0, #0
 8004bca:	d04b      	beq.n	8004c64 <USBD_CDC_Init+0xac>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004bcc:	7c23      	ldrb	r3, [r4, #16]
  pdev->pClassData = (void *)hcdc;
 8004bce:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004bd2:	b39b      	cbz	r3, 8004c3c <USBD_CDC_Init+0x84>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004bd4:	2340      	movs	r3, #64	; 0x40
 8004bd6:	2181      	movs	r1, #129	; 0x81
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004bd8:	2601      	movs	r6, #1
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004bda:	2202      	movs	r2, #2
 8004bdc:	4620      	mov	r0, r4
 8004bde:	f002 fec9 	bl	8007974 <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004be2:	8726      	strh	r6, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004be4:	4631      	mov	r1, r6
 8004be6:	2340      	movs	r3, #64	; 0x40
 8004be8:	2202      	movs	r2, #2
 8004bea:	4620      	mov	r0, r4
 8004bec:	f002 fec2 	bl	8007974 <USBD_LL_OpenEP>
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004bf0:	2310      	movs	r3, #16
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004bf2:	2203      	movs	r2, #3
 8004bf4:	2182      	movs	r1, #130	; 0x82
      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004bf6:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004bfa:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004bfe:	4620      	mov	r0, r4
 8004c00:	2308      	movs	r3, #8
 8004c02:	f002 feb7 	bl	8007974 <USBD_LL_OpenEP>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004c06:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004c0a:	2701      	movs	r7, #1
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004c0c:	681b      	ldr	r3, [r3, #0]
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004c0e:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004c12:	4798      	blx	r3
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004c14:	f894 8010 	ldrb.w	r8, [r4, #16]
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004c18:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
  hcdc->TxState = 0U;
 8004c1c:	2600      	movs	r6, #0
 8004c1e:	f8c5 6214 	str.w	r6, [r5, #532]	; 0x214
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004c22:	4639      	mov	r1, r7
  hcdc->RxState = 0U;
 8004c24:	f8c5 6218 	str.w	r6, [r5, #536]	; 0x218
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004c28:	4620      	mov	r0, r4
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004c2a:	f1b8 0f00 	cmp.w	r8, #0
 8004c2e:	d012      	beq.n	8004c56 <USBD_CDC_Init+0x9e>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004c30:	2340      	movs	r3, #64	; 0x40
 8004c32:	f002 ff09 	bl	8007a48 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8004c36:	4630      	mov	r0, r6
}
 8004c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004c3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c40:	2181      	movs	r1, #129	; 0x81
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004c42:	2601      	movs	r6, #1
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004c44:	2202      	movs	r2, #2
 8004c46:	4620      	mov	r0, r4
 8004c48:	f002 fe94 	bl	8007974 <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004c4c:	8726      	strh	r6, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004c4e:	4631      	mov	r1, r6
 8004c50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c54:	e7c8      	b.n	8004be8 <USBD_CDC_Init+0x30>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004c56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c5a:	f002 fef5 	bl	8007a48 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8004c5e:	4640      	mov	r0, r8
}
 8004c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->pClassData = NULL;
 8004c64:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004c68:	2002      	movs	r0, #2
}
 8004c6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c6e:	bf00      	nop

08004c70 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 8004c70:	b119      	cbz	r1, 8004c7a <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 8004c72:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8004c76:	2000      	movs	r0, #0
 8004c78:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8004c7a:	2003      	movs	r0, #3
}
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop

08004c80 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004c80:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return (uint8_t)USBD_OK;
}
 8004c84:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8004c86:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004c8a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8004c8e:	4770      	bx	lr

08004c90 <USBD_CDC_SetRxBuffer>:
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8004c90:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
}
 8004c94:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8004c96:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8004c9a:	4770      	bx	lr

08004c9c <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004c9c:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
  USBD_StatusTypeDef ret = USBD_BUSY;

  if (pdev->pClassData == NULL)
 8004ca0:	b192      	cbz	r2, 8004cc8 <USBD_CDC_TransmitPacket+0x2c>
{
 8004ca2:	b538      	push	{r3, r4, r5, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 8004ca4:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8004ca8:	b10c      	cbz	r4, 8004cae <USBD_CDC_TransmitPacket+0x12>
  USBD_StatusTypeDef ret = USBD_BUSY;
 8004caa:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 8004cac:	bd38      	pop	{r3, r4, r5, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004cae:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
    hcdc->TxState = 1U;
 8004cb2:	2501      	movs	r5, #1
 8004cb4:	f8c2 5214 	str.w	r5, [r2, #532]	; 0x214
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8004cb8:	2181      	movs	r1, #129	; 0x81
 8004cba:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004cbe:	62c3      	str	r3, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8004cc0:	f002 feb4 	bl	8007a2c <USBD_LL_Transmit>
    ret = USBD_OK;
 8004cc4:	4620      	mov	r0, r4
}
 8004cc6:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8004cc8:	2003      	movs	r0, #3
}
 8004cca:	4770      	bx	lr

08004ccc <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004ccc:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 8004cd0:	b18a      	cbz	r2, 8004cf6 <USBD_CDC_ReceivePacket+0x2a>
{
 8004cd2:	b510      	push	{r4, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004cd4:	7c04      	ldrb	r4, [r0, #16]
 8004cd6:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8004cda:	b12c      	cbz	r4, 8004ce8 <USBD_CDC_ReceivePacket+0x1c>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004cdc:	2340      	movs	r3, #64	; 0x40
 8004cde:	2101      	movs	r1, #1
 8004ce0:	f002 feb2 	bl	8007a48 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004ce4:	2000      	movs	r0, #0
}
 8004ce6:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004ce8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004cec:	2101      	movs	r1, #1
 8004cee:	f002 feab 	bl	8007a48 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8004cf2:	4620      	mov	r0, r4
}
 8004cf4:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8004cf6:	2003      	movs	r0, #3
}
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop

08004cfc <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004cfc:	b1a0      	cbz	r0, 8004d28 <USBD_Init+0x2c>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8004cfe:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004d02:	b113      	cbz	r3, 8004d0a <USBD_Init+0xe>
  {
    pdev->pClass = NULL;
 8004d04:	2300      	movs	r3, #0
 8004d06:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8004d0a:	f8d0 32cc 	ldr.w	r3, [r0, #716]	; 0x2cc
 8004d0e:	b113      	cbz	r3, 8004d16 <USBD_Init+0x1a>
  {
    pdev->pConfDesc = NULL;
 8004d10:	2300      	movs	r3, #0
 8004d12:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004d16:	b109      	cbz	r1, 8004d1c <USBD_Init+0x20>
  {
    pdev->pDesc = pdesc;
 8004d18:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004d1c:	2301      	movs	r3, #1
  pdev->id = id;
 8004d1e:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004d20:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004d24:	f002 bde6 	b.w	80078f4 <USBD_LL_Init>

  return ret;
}
 8004d28:	2003      	movs	r0, #3
 8004d2a:	4770      	bx	lr

08004d2c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004d2c:	b530      	push	{r4, r5, lr}
 8004d2e:	b083      	sub	sp, #12
  uint16_t len = 0U;
 8004d30:	2400      	movs	r4, #0
 8004d32:	f8ad 4006 	strh.w	r4, [sp, #6]

  if (pclass == NULL)
 8004d36:	b159      	cbz	r1, 8004d50 <USBD_RegisterClass+0x24>
 8004d38:	4605      	mov	r5, r0
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8004d3a:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8004d3e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8004d40:	f10d 0006 	add.w	r0, sp, #6
 8004d44:	4798      	blx	r3
 8004d46:	f8c5 02cc 	str.w	r0, [r5, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
}
 8004d4a:	4620      	mov	r0, r4
 8004d4c:	b003      	add	sp, #12
 8004d4e:	bd30      	pop	{r4, r5, pc}
    return USBD_FAIL;
 8004d50:	2403      	movs	r4, #3
 8004d52:	e7fa      	b.n	8004d4a <USBD_RegisterClass+0x1e>

08004d54 <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004d54:	f002 be00 	b.w	8007958 <USBD_LL_Start>

08004d58 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8004d58:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004d5c:	b10b      	cbz	r3, 8004d62 <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4718      	bx	r3
  }

  return ret;
}
 8004d62:	2003      	movs	r0, #3
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop

08004d68 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d68:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004d6a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004d6e:	b10b      	cbz	r3, 8004d74 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	4798      	blx	r3
  }

  return USBD_OK;
}
 8004d74:	2000      	movs	r0, #0
 8004d76:	bd08      	pop	{r3, pc}

08004d78 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004d78:	b538      	push	{r3, r4, r5, lr}
 8004d7a:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004d7c:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 8004d80:	4628      	mov	r0, r5
 8004d82:	f000 fb8d 	bl	80054a0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8004d86:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_data_len = pdev->request.wLength;
 8004d8a:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 8004d8e:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  pdev->ep0_state = USBD_EP0_SETUP;
 8004d92:	2201      	movs	r2, #1
  switch (pdev->request.bmRequest & 0x1FU)
 8004d94:	f001 031f 	and.w	r3, r1, #31
 8004d98:	4293      	cmp	r3, r2
  pdev->ep0_state = USBD_EP0_SETUP;
 8004d9a:	f8c4 2294 	str.w	r2, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 8004d9e:	d015      	beq.n	8004dcc <USBD_LL_SetupStage+0x54>
 8004da0:	d30e      	bcc.n	8004dc0 <USBD_LL_SetupStage+0x48>
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d105      	bne.n	8004db2 <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
      break;

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004da6:	4629      	mov	r1, r5
 8004da8:	4620      	mov	r0, r4
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return ret;
}
 8004daa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004dae:	f000 badd 	b.w	800536c <USBD_StdEPReq>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004db2:	4620      	mov	r0, r4
 8004db4:	f001 0180 	and.w	r1, r1, #128	; 0x80
}
 8004db8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004dbc:	f002 bdf8 	b.w	80079b0 <USBD_LL_StallEP>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004dc0:	4629      	mov	r1, r5
 8004dc2:	4620      	mov	r0, r4
}
 8004dc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004dc8:	f000 b900 	b.w	8004fcc <USBD_StdDevReq>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004dcc:	4629      	mov	r1, r5
 8004dce:	4620      	mov	r0, r4
}
 8004dd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004dd4:	f000 ba9c 	b.w	8005310 <USBD_StdItfReq>

08004dd8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004dd8:	b570      	push	{r4, r5, r6, lr}
 8004dda:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004ddc:	b931      	cbnz	r1, 8004dec <USBD_LL_DataOutStage+0x14>
 8004dde:	460d      	mov	r5, r1
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004de0:	f8d0 1294 	ldr.w	r1, [r0, #660]	; 0x294
 8004de4:	2903      	cmp	r1, #3
 8004de6:	d00c      	beq.n	8004e02 <USBD_LL_DataOutStage+0x2a>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8004de8:	2000      	movs	r0, #0
}
 8004dea:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataOut != NULL) &&
 8004dec:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 8004df0:	6992      	ldr	r2, [r2, #24]
 8004df2:	b1da      	cbz	r2, 8004e2c <USBD_LL_DataOutStage+0x54>
 8004df4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004df8:	2b03      	cmp	r3, #3
 8004dfa:	d117      	bne.n	8004e2c <USBD_LL_DataOutStage+0x54>
}
 8004dfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8004e00:	4710      	bx	r2
 8004e02:	4611      	mov	r1, r2
      if (pep->rem_length > pep->maxpacket)
 8004e04:	f8d0 315c 	ldr.w	r3, [r0, #348]	; 0x15c
 8004e08:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d80f      	bhi.n	8004e30 <USBD_LL_DataOutStage+0x58>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004e10:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	b123      	cbz	r3, 8004e22 <USBD_LL_DataOutStage+0x4a>
 8004e18:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004e1c:	2a03      	cmp	r2, #3
 8004e1e:	d100      	bne.n	8004e22 <USBD_LL_DataOutStage+0x4a>
          pdev->pClass->EP0_RxReady(pdev);
 8004e20:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 8004e22:	4620      	mov	r0, r4
 8004e24:	f000 fbb0 	bl	8005588 <USBD_CtlSendStatus>
  return USBD_OK;
 8004e28:	2000      	movs	r0, #0
 8004e2a:	e7de      	b.n	8004dea <USBD_LL_DataOutStage+0x12>
    return USBD_FAIL;
 8004e2c:	2003      	movs	r0, #3
}
 8004e2e:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 8004e30:	1a9b      	subs	r3, r3, r2
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004e32:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 8004e34:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004e38:	bf28      	it	cs
 8004e3a:	461a      	movcs	r2, r3
 8004e3c:	f000 fb9c 	bl	8005578 <USBD_CtlContinueRx>
  return USBD_OK;
 8004e40:	4628      	mov	r0, r5
}
 8004e42:	bd70      	pop	{r4, r5, r6, pc}

08004e44 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004e44:	b570      	push	{r4, r5, r6, lr}
 8004e46:	4604      	mov	r4, r0
 8004e48:	b082      	sub	sp, #8
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004e4a:	b961      	cbnz	r1, 8004e66 <USBD_LL_DataInStage+0x22>
 8004e4c:	4615      	mov	r5, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004e4e:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8004e52:	2a02      	cmp	r2, #2
 8004e54:	d017      	beq.n	8004e86 <USBD_LL_DataInStage+0x42>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8004e56:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8004e5a:	2b01      	cmp	r3, #1
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8004e5c:	f04f 0000 	mov.w	r0, #0
    if (pdev->dev_test_mode == 1U)
 8004e60:	d00d      	beq.n	8004e7e <USBD_LL_DataInStage+0x3a>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8004e62:	b002      	add	sp, #8
 8004e64:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataIn != NULL) &&
 8004e66:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004e6a:	695b      	ldr	r3, [r3, #20]
 8004e6c:	b343      	cbz	r3, 8004ec0 <USBD_LL_DataInStage+0x7c>
 8004e6e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004e72:	2a03      	cmp	r2, #3
 8004e74:	d124      	bne.n	8004ec0 <USBD_LL_DataInStage+0x7c>
}
 8004e76:	b002      	add	sp, #8
 8004e78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8004e7c:	4718      	bx	r3
      pdev->dev_test_mode = 0U;
 8004e7e:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
}
 8004e82:	b002      	add	sp, #8
 8004e84:	bd70      	pop	{r4, r5, r6, pc}
      if (pep->rem_length > pep->maxpacket)
 8004e86:	e9d0 2607 	ldrd	r2, r6, [r0, #28]
 8004e8a:	42b2      	cmp	r2, r6
 8004e8c:	d81b      	bhi.n	8004ec6 <USBD_LL_DataInStage+0x82>
        if ((pep->maxpacket == pep->rem_length) &&
 8004e8e:	d027      	beq.n	8004ee0 <USBD_LL_DataInStage+0x9c>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004e90:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	b12b      	cbz	r3, 8004ea4 <USBD_LL_DataInStage+0x60>
 8004e98:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8004e9c:	2a03      	cmp	r2, #3
 8004e9e:	d101      	bne.n	8004ea4 <USBD_LL_DataInStage+0x60>
            pdev->pClass->EP0_TxSent(pdev);
 8004ea0:	4620      	mov	r0, r4
 8004ea2:	4798      	blx	r3
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004ea4:	2180      	movs	r1, #128	; 0x80
 8004ea6:	4620      	mov	r0, r4
 8004ea8:	f002 fd82 	bl	80079b0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004eac:	4620      	mov	r0, r4
 8004eae:	f000 fb77 	bl	80055a0 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 8004eb2:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8004eb6:	2b01      	cmp	r3, #1
      pdev->dev_test_mode = 0U;
 8004eb8:	f04f 0000 	mov.w	r0, #0
    if (pdev->dev_test_mode == 1U)
 8004ebc:	d1d1      	bne.n	8004e62 <USBD_LL_DataInStage+0x1e>
 8004ebe:	e7de      	b.n	8004e7e <USBD_LL_DataInStage+0x3a>
    return USBD_FAIL;
 8004ec0:	2003      	movs	r0, #3
}
 8004ec2:	b002      	add	sp, #8
 8004ec4:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 8004ec6:	1b92      	subs	r2, r2, r6
 8004ec8:	9101      	str	r1, [sp, #4]
 8004eca:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004ecc:	4629      	mov	r1, r5
 8004ece:	f000 fb3b 	bl	8005548 <USBD_CtlContinueSendData>
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004ed2:	9b01      	ldr	r3, [sp, #4]
 8004ed4:	4620      	mov	r0, r4
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	4619      	mov	r1, r3
 8004eda:	f002 fdb5 	bl	8007a48 <USBD_LL_PrepareReceive>
 8004ede:	e7ba      	b.n	8004e56 <USBD_LL_DataInStage+0x12>
            (pep->total_length >= pep->maxpacket) &&
 8004ee0:	6985      	ldr	r5, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8004ee2:	42aa      	cmp	r2, r5
 8004ee4:	d8d4      	bhi.n	8004e90 <USBD_LL_DataInStage+0x4c>
            (pep->total_length >= pep->maxpacket) &&
 8004ee6:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 8004eea:	4295      	cmp	r5, r2
 8004eec:	d2d0      	bcs.n	8004e90 <USBD_LL_DataInStage+0x4c>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004eee:	460a      	mov	r2, r1
 8004ef0:	9101      	str	r1, [sp, #4]
 8004ef2:	f000 fb29 	bl	8005548 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004ef6:	9b01      	ldr	r3, [sp, #4]
 8004ef8:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004efc:	461a      	mov	r2, r3
 8004efe:	4619      	mov	r1, r3
 8004f00:	4620      	mov	r0, r4
 8004f02:	f002 fda1 	bl	8007a48 <USBD_LL_PrepareReceive>
 8004f06:	e7a6      	b.n	8004e56 <USBD_LL_DataInStage+0x12>

08004f08 <USBD_LL_Reset>:
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData != NULL)
 8004f08:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
  pdev->ep0_state = USBD_EP0_IDLE;
 8004f0c:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004f0e:	2201      	movs	r2, #1
{
 8004f10:	b570      	push	{r4, r5, r6, lr}
 8004f12:	4604      	mov	r4, r0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004f14:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004f18:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 8004f1c:	6041      	str	r1, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8004f1e:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  if (pdev->pClassData != NULL)
 8004f22:	b11b      	cbz	r3, 8004f2c <USBD_LL_Reset+0x24>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004f24:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	2340      	movs	r3, #64	; 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004f30:	461d      	mov	r5, r3
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004f32:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004f34:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004f36:	4620      	mov	r0, r4
 8004f38:	f002 fd1c 	bl	8007974 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004f3c:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004f40:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004f44:	462b      	mov	r3, r5
 8004f46:	2200      	movs	r2, #0
 8004f48:	2180      	movs	r1, #128	; 0x80
 8004f4a:	4620      	mov	r0, r4
 8004f4c:	f002 fd12 	bl	8007974 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004f50:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004f52:	6225      	str	r5, [r4, #32]

  return USBD_OK;
}
 8004f54:	2000      	movs	r0, #0
 8004f56:	bd70      	pop	{r4, r5, r6, pc}

08004f58 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8004f58:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8004f5a:	2000      	movs	r0, #0
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop

08004f60 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 8004f60:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004f64:	f880 229d 	strb.w	r2, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004f68:	2304      	movs	r3, #4
 8004f6a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8004f6e:	2000      	movs	r0, #0
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop

08004f74 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004f74:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004f78:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8004f7a:	bf04      	itt	eq
 8004f7c:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8004f80:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8004f84:	2000      	movs	r0, #0
 8004f86:	4770      	bx	lr

08004f88 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f88:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004f8c:	2a03      	cmp	r2, #3
 8004f8e:	d001      	beq.n	8004f94 <USBD_LL_SOF+0xc>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 8004f90:	2000      	movs	r0, #0
 8004f92:	4770      	bx	lr
{
 8004f94:	b508      	push	{r3, lr}
    if (pdev->pClass->SOF != NULL)
 8004f96:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004f9a:	69db      	ldr	r3, [r3, #28]
 8004f9c:	b103      	cbz	r3, 8004fa0 <USBD_LL_SOF+0x18>
      pdev->pClass->SOF(pdev);
 8004f9e:	4798      	blx	r3
}
 8004fa0:	2000      	movs	r0, #0
 8004fa2:	bd08      	pop	{r3, pc}

08004fa4 <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8004fa4:	2000      	movs	r0, #0
 8004fa6:	4770      	bx	lr

08004fa8 <USBD_LL_IsoOUTIncomplete>:
 8004fa8:	2000      	movs	r0, #0
 8004faa:	4770      	bx	lr

08004fac <USBD_LL_DevConnected>:
 8004fac:	2000      	movs	r0, #0
 8004fae:	4770      	bx	lr

08004fb0 <USBD_LL_DevDisconnected>:
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;

  if (pdev->pClass != NULL)
 8004fb0:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004fb4:	2101      	movs	r1, #1
 8004fb6:	f880 129c 	strb.w	r1, [r0, #668]	; 0x29c
  if (pdev->pClass != NULL)
 8004fba:	b12a      	cbz	r2, 8004fc8 <USBD_LL_DevDisconnected+0x18>
{
 8004fbc:	b508      	push	{r3, lr}
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004fbe:	6852      	ldr	r2, [r2, #4]
 8004fc0:	7901      	ldrb	r1, [r0, #4]
 8004fc2:	4790      	blx	r2
  }

  return USBD_OK;
}
 8004fc4:	2000      	movs	r0, #0
 8004fc6:	bd08      	pop	{r3, pc}
 8004fc8:	2000      	movs	r0, #0
 8004fca:	4770      	bx	lr

08004fcc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004fcc:	b570      	push	{r4, r5, r6, lr}
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004fce:	780b      	ldrb	r3, [r1, #0]
 8004fd0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004fd4:	2b20      	cmp	r3, #32
{
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	460d      	mov	r5, r1
 8004fda:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004fdc:	d028      	beq.n	8005030 <USBD_StdDevReq+0x64>
 8004fde:	2b40      	cmp	r3, #64	; 0x40
 8004fe0:	d026      	beq.n	8005030 <USBD_StdDevReq+0x64>
 8004fe2:	b15b      	cbz	r3, 8004ffc <USBD_StdDevReq+0x30>

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8004fe4:	2180      	movs	r1, #128	; 0x80
 8004fe6:	4620      	mov	r0, r4
 8004fe8:	f002 fce2 	bl	80079b0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8004fec:	4620      	mov	r0, r4
 8004fee:	2100      	movs	r1, #0
 8004ff0:	f002 fcde 	bl	80079b0 <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 8004ff4:	2500      	movs	r5, #0
}
 8004ff6:	4628      	mov	r0, r5
 8004ff8:	b002      	add	sp, #8
 8004ffa:	bd70      	pop	{r4, r5, r6, pc}
    switch (req->bRequest)
 8004ffc:	784b      	ldrb	r3, [r1, #1]
 8004ffe:	2b09      	cmp	r3, #9
 8005000:	d8f0      	bhi.n	8004fe4 <USBD_StdDevReq+0x18>
 8005002:	a201      	add	r2, pc, #4	; (adr r2, 8005008 <USBD_StdDevReq+0x3c>)
 8005004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005008:	080050a7 	.word	0x080050a7
 800500c:	080050d7 	.word	0x080050d7
 8005010:	08004fe5 	.word	0x08004fe5
 8005014:	080050f5 	.word	0x080050f5
 8005018:	08004fe5 	.word	0x08004fe5
 800501c:	08005101 	.word	0x08005101
 8005020:	08005143 	.word	0x08005143
 8005024:	08004fe5 	.word	0x08004fe5
 8005028:	0800515f 	.word	0x0800515f
 800502c:	08005045 	.word	0x08005045
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005030:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8005034:	4629      	mov	r1, r5
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	4620      	mov	r0, r4
 800503a:	4798      	blx	r3
 800503c:	4605      	mov	r5, r0
}
 800503e:	4628      	mov	r0, r5
 8005040:	b002      	add	sp, #8
 8005042:	bd70      	pop	{r4, r5, r6, pc}
  cfgidx = (uint8_t)(req->wValue);
 8005044:	788d      	ldrb	r5, [r1, #2]
 8005046:	4eb1      	ldr	r6, [pc, #708]	; (800530c <USBD_StdDevReq+0x340>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005048:	2d01      	cmp	r5, #1
  cfgidx = (uint8_t)(req->wValue);
 800504a:	7035      	strb	r5, [r6, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800504c:	f200 8112 	bhi.w	8005274 <USBD_StdDevReq+0x2a8>
  switch (pdev->dev_state)
 8005050:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005054:	2b02      	cmp	r3, #2
 8005056:	f000 8116 	beq.w	8005286 <USBD_StdDevReq+0x2ba>
 800505a:	2b03      	cmp	r3, #3
 800505c:	f040 8124 	bne.w	80052a8 <USBD_StdDevReq+0x2dc>
    if (cfgidx == 0U)
 8005060:	2d00      	cmp	r5, #0
 8005062:	f000 813c 	beq.w	80052de <USBD_StdDevReq+0x312>
    else if (cfgidx != pdev->dev_config)
 8005066:	6841      	ldr	r1, [r0, #4]
 8005068:	2901      	cmp	r1, #1
 800506a:	f000 80ff 	beq.w	800526c <USBD_StdDevReq+0x2a0>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800506e:	b2c9      	uxtb	r1, r1
 8005070:	f7ff fe7a 	bl	8004d68 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8005074:	7831      	ldrb	r1, [r6, #0]
 8005076:	6061      	str	r1, [r4, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005078:	4620      	mov	r0, r4
 800507a:	f7ff fe6d 	bl	8004d58 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 800507e:	4605      	mov	r5, r0
 8005080:	2800      	cmp	r0, #0
 8005082:	f000 80f3 	beq.w	800526c <USBD_StdDevReq+0x2a0>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005086:	2180      	movs	r1, #128	; 0x80
 8005088:	4620      	mov	r0, r4
 800508a:	f002 fc91 	bl	80079b0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800508e:	2100      	movs	r1, #0
 8005090:	4620      	mov	r0, r4
 8005092:	f002 fc8d 	bl	80079b0 <USBD_LL_StallEP>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005096:	7921      	ldrb	r1, [r4, #4]
 8005098:	4620      	mov	r0, r4
 800509a:	f7ff fe65 	bl	8004d68 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800509e:	2302      	movs	r3, #2
 80050a0:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80050a4:	e7a7      	b.n	8004ff6 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 80050a6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80050aa:	3b01      	subs	r3, #1
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	f04f 0203 	mov.w	r2, #3
 80050b2:	d897      	bhi.n	8004fe4 <USBD_StdDevReq+0x18>
    if (req->wLength != 0x2U)
 80050b4:	88cb      	ldrh	r3, [r1, #6]
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d194      	bne.n	8004fe4 <USBD_StdDevReq+0x18>
    if (pdev->dev_remote_wakeup != 0U)
 80050ba:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80050be:	2101      	movs	r1, #1
 80050c0:	60c1      	str	r1, [r0, #12]
    if (pdev->dev_remote_wakeup != 0U)
 80050c2:	b103      	cbz	r3, 80050c6 <USBD_StdDevReq+0xfa>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80050c4:	60c2      	str	r2, [r0, #12]
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80050c6:	2202      	movs	r2, #2
 80050c8:	f104 010c 	add.w	r1, r4, #12
 80050cc:	4620      	mov	r0, r4
 80050ce:	f000 fa2d 	bl	800552c <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80050d2:	2500      	movs	r5, #0
 80050d4:	e78f      	b.n	8004ff6 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 80050d6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80050da:	3b01      	subs	r3, #1
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d881      	bhi.n	8004fe4 <USBD_StdDevReq+0x18>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80050e0:	884b      	ldrh	r3, [r1, #2]
 80050e2:	2b01      	cmp	r3, #1
        pdev->dev_remote_wakeup = 0U;
 80050e4:	f04f 0500 	mov.w	r5, #0
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80050e8:	d185      	bne.n	8004ff6 <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 80050ea:	f8c0 52a4 	str.w	r5, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80050ee:	f000 fa4b 	bl	8005588 <USBD_CtlSendStatus>
 80050f2:	e780      	b.n	8004ff6 <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80050f4:	884b      	ldrh	r3, [r1, #2]
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	f000 80b6 	beq.w	8005268 <USBD_StdDevReq+0x29c>
  USBD_StatusTypeDef ret = USBD_OK;
 80050fc:	2500      	movs	r5, #0
 80050fe:	e77a      	b.n	8004ff6 <USBD_StdDevReq+0x2a>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005100:	888b      	ldrh	r3, [r1, #4]
 8005102:	2b00      	cmp	r3, #0
 8005104:	f47f af6e 	bne.w	8004fe4 <USBD_StdDevReq+0x18>
 8005108:	88ce      	ldrh	r6, [r1, #6]
 800510a:	2e00      	cmp	r6, #0
 800510c:	f47f af6a 	bne.w	8004fe4 <USBD_StdDevReq+0x18>
 8005110:	884d      	ldrh	r5, [r1, #2]
 8005112:	2d7f      	cmp	r5, #127	; 0x7f
 8005114:	f63f af66 	bhi.w	8004fe4 <USBD_StdDevReq+0x18>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005118:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800511c:	2b03      	cmp	r3, #3
 800511e:	f43f af61 	beq.w	8004fe4 <USBD_StdDevReq+0x18>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005122:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 8005124:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005128:	f002 fc72 	bl	8007a10 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800512c:	4620      	mov	r0, r4
 800512e:	f000 fa2b 	bl	8005588 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8005132:	2d00      	cmp	r5, #0
 8005134:	f000 80e5 	beq.w	8005302 <USBD_StdDevReq+0x336>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005138:	2302      	movs	r3, #2
  USBD_StatusTypeDef ret = USBD_OK;
 800513a:	4635      	mov	r5, r6
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800513c:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8005140:	e759      	b.n	8004ff6 <USBD_StdDevReq+0x2a>
      USBD_GetDescriptor(pdev, req);
 8005142:	884a      	ldrh	r2, [r1, #2]
  switch (req->wValue >> 8)
 8005144:	0a13      	lsrs	r3, r2, #8
  uint16_t len = 0U;
 8005146:	2100      	movs	r1, #0
  switch (req->wValue >> 8)
 8005148:	3b01      	subs	r3, #1
  uint16_t len = 0U;
 800514a:	f8ad 1006 	strh.w	r1, [sp, #6]
  switch (req->wValue >> 8)
 800514e:	2b06      	cmp	r3, #6
 8005150:	d85f      	bhi.n	8005212 <USBD_StdDevReq+0x246>
 8005152:	e8df f003 	tbb	[pc, r3]
 8005156:	3d52      	.short	0x3d52
 8005158:	495e5e35 	.word	0x495e5e35
 800515c:	18          	.byte	0x18
 800515d:	00          	.byte	0x00
  if (req->wLength != 1U)
 800515e:	88ca      	ldrh	r2, [r1, #6]
 8005160:	2a01      	cmp	r2, #1
 8005162:	f47f af3f 	bne.w	8004fe4 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 8005166:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800516a:	2b00      	cmp	r3, #0
 800516c:	f43f af3a 	beq.w	8004fe4 <USBD_StdDevReq+0x18>
 8005170:	2b02      	cmp	r3, #2
 8005172:	f240 80a6 	bls.w	80052c2 <USBD_StdDevReq+0x2f6>
 8005176:	2b03      	cmp	r3, #3
 8005178:	f47f af34 	bne.w	8004fe4 <USBD_StdDevReq+0x18>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800517c:	1d01      	adds	r1, r0, #4
 800517e:	f000 f9d5 	bl	800552c <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8005182:	2500      	movs	r5, #0
 8005184:	e737      	b.n	8004ff6 <USBD_StdDevReq+0x2a>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005186:	7c03      	ldrb	r3, [r0, #16]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d142      	bne.n	8005212 <USBD_StdDevReq+0x246>
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800518c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8005190:	f10d 0006 	add.w	r0, sp, #6
 8005194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005196:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005198:	2307      	movs	r3, #7
 800519a:	7043      	strb	r3, [r0, #1]
    if (req->wLength != 0U)
 800519c:	88eb      	ldrh	r3, [r5, #6]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d064      	beq.n	800526c <USBD_StdDevReq+0x2a0>
      if (len != 0U)
 80051a2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80051a6:	2a00      	cmp	r2, #0
 80051a8:	d033      	beq.n	8005212 <USBD_StdDevReq+0x246>
        len = MIN(len, req->wLength);
 80051aa:	4293      	cmp	r3, r2
 80051ac:	bf28      	it	cs
 80051ae:	4613      	movcs	r3, r2
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80051b0:	4601      	mov	r1, r0
 80051b2:	461a      	mov	r2, r3
 80051b4:	4620      	mov	r0, r4
        len = MIN(len, req->wLength);
 80051b6:	f8ad 3006 	strh.w	r3, [sp, #6]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80051ba:	f000 f9b7 	bl	800552c <USBD_CtlSendData>
 80051be:	e79d      	b.n	80050fc <USBD_StdDevReq+0x130>
    switch ((uint8_t)(req->wValue))
 80051c0:	b2d2      	uxtb	r2, r2
 80051c2:	2a05      	cmp	r2, #5
 80051c4:	d825      	bhi.n	8005212 <USBD_StdDevReq+0x246>
 80051c6:	e8df f002 	tbb	[pc, r2]
 80051ca:	4920      	.short	0x4920
 80051cc:	2d373d43 	.word	0x2d373d43
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80051d0:	7c02      	ldrb	r2, [r0, #16]
 80051d2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80051d6:	2a00      	cmp	r2, #0
 80051d8:	d17a      	bne.n	80052d0 <USBD_StdDevReq+0x304>
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80051da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051dc:	f10d 0006 	add.w	r0, sp, #6
 80051e0:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80051e2:	2302      	movs	r3, #2
 80051e4:	7043      	strb	r3, [r0, #1]
 80051e6:	e7d9      	b.n	800519c <USBD_StdDevReq+0x1d0>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80051e8:	7c03      	ldrb	r3, [r0, #16]
 80051ea:	b993      	cbnz	r3, 8005212 <USBD_StdDevReq+0x246>
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80051ec:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80051f0:	f10d 0006 	add.w	r0, sp, #6
 80051f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051f6:	4798      	blx	r3
 80051f8:	e7d0      	b.n	800519c <USBD_StdDevReq+0x1d0>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80051fa:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80051fe:	7c00      	ldrb	r0, [r0, #16]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f10d 0106 	add.w	r1, sp, #6
 8005206:	4798      	blx	r3
 8005208:	e7c8      	b.n	800519c <USBD_StdDevReq+0x1d0>
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800520a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	b96b      	cbnz	r3, 800522e <USBD_StdDevReq+0x262>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005212:	2180      	movs	r1, #128	; 0x80
 8005214:	4620      	mov	r0, r4
 8005216:	f002 fbcb 	bl	80079b0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800521a:	4620      	mov	r0, r4
 800521c:	2100      	movs	r1, #0
 800521e:	f002 fbc7 	bl	80079b0 <USBD_LL_StallEP>
 8005222:	e76b      	b.n	80050fc <USBD_StdDevReq+0x130>
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005224:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d0f1      	beq.n	8005212 <USBD_StdDevReq+0x246>
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800522e:	f10d 0106 	add.w	r1, sp, #6
 8005232:	7c20      	ldrb	r0, [r4, #16]
 8005234:	4798      	blx	r3
 8005236:	e7b1      	b.n	800519c <USBD_StdDevReq+0x1d0>
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005238:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1f5      	bne.n	800522e <USBD_StdDevReq+0x262>
 8005242:	e7e6      	b.n	8005212 <USBD_StdDevReq+0x246>
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005244:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1ef      	bne.n	800522e <USBD_StdDevReq+0x262>
 800524e:	e7e0      	b.n	8005212 <USBD_StdDevReq+0x246>
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005250:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d1e9      	bne.n	800522e <USBD_StdDevReq+0x262>
 800525a:	e7da      	b.n	8005212 <USBD_StdDevReq+0x246>
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800525c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1e3      	bne.n	800522e <USBD_StdDevReq+0x262>
 8005266:	e7d4      	b.n	8005212 <USBD_StdDevReq+0x246>
    pdev->dev_remote_wakeup = 1U;
 8005268:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800526c:	4620      	mov	r0, r4
 800526e:	f000 f98b 	bl	8005588 <USBD_CtlSendStatus>
 8005272:	e743      	b.n	80050fc <USBD_StdDevReq+0x130>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005274:	2180      	movs	r1, #128	; 0x80
 8005276:	f002 fb9b 	bl	80079b0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800527a:	4620      	mov	r0, r4
 800527c:	2100      	movs	r1, #0
 800527e:	f002 fb97 	bl	80079b0 <USBD_LL_StallEP>
    return USBD_FAIL;
 8005282:	2503      	movs	r5, #3
 8005284:	e6b7      	b.n	8004ff6 <USBD_StdDevReq+0x2a>
    if (cfgidx != 0U)
 8005286:	2d00      	cmp	r5, #0
 8005288:	d0f0      	beq.n	800526c <USBD_StdDevReq+0x2a0>
      pdev->dev_config = cfgidx;
 800528a:	2101      	movs	r1, #1
 800528c:	6041      	str	r1, [r0, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800528e:	f7ff fd63 	bl	8004d58 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 8005292:	4605      	mov	r5, r0
 8005294:	b370      	cbz	r0, 80052f4 <USBD_StdDevReq+0x328>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005296:	2180      	movs	r1, #128	; 0x80
 8005298:	4620      	mov	r0, r4
 800529a:	f002 fb89 	bl	80079b0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800529e:	4620      	mov	r0, r4
 80052a0:	2100      	movs	r1, #0
 80052a2:	f002 fb85 	bl	80079b0 <USBD_LL_StallEP>
 80052a6:	e6a6      	b.n	8004ff6 <USBD_StdDevReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80052a8:	2180      	movs	r1, #128	; 0x80
 80052aa:	f002 fb81 	bl	80079b0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80052ae:	2100      	movs	r1, #0
 80052b0:	4620      	mov	r0, r4
 80052b2:	f002 fb7d 	bl	80079b0 <USBD_LL_StallEP>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80052b6:	7831      	ldrb	r1, [r6, #0]
 80052b8:	4620      	mov	r0, r4
 80052ba:	f7ff fd55 	bl	8004d68 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80052be:	2503      	movs	r5, #3
 80052c0:	e699      	b.n	8004ff6 <USBD_StdDevReq+0x2a>
      pdev->dev_default_config = 0U;
 80052c2:	4601      	mov	r1, r0
 80052c4:	2500      	movs	r5, #0
 80052c6:	f841 5f08 	str.w	r5, [r1, #8]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80052ca:	f000 f92f 	bl	800552c <USBD_CtlSendData>
 80052ce:	e692      	b.n	8004ff6 <USBD_StdDevReq+0x2a>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80052d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d2:	f10d 0006 	add.w	r0, sp, #6
 80052d6:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80052d8:	2302      	movs	r3, #2
 80052da:	7043      	strb	r3, [r0, #1]
 80052dc:	e75e      	b.n	800519c <USBD_StdDevReq+0x1d0>
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80052de:	2302      	movs	r3, #2
      pdev->dev_config = cfgidx;
 80052e0:	6045      	str	r5, [r0, #4]
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80052e2:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80052e6:	4629      	mov	r1, r5
 80052e8:	f7ff fd3e 	bl	8004d68 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80052ec:	4620      	mov	r0, r4
 80052ee:	f000 f94b 	bl	8005588 <USBD_CtlSendStatus>
 80052f2:	e680      	b.n	8004ff6 <USBD_StdDevReq+0x2a>
        (void)USBD_CtlSendStatus(pdev);
 80052f4:	4620      	mov	r0, r4
 80052f6:	f000 f947 	bl	8005588 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80052fa:	2303      	movs	r3, #3
 80052fc:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8005300:	e679      	b.n	8004ff6 <USBD_StdDevReq+0x2a>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005302:	2301      	movs	r3, #1
 8005304:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8005308:	e675      	b.n	8004ff6 <USBD_StdDevReq+0x2a>
 800530a:	bf00      	nop
 800530c:	200003e8 	.word	0x200003e8

08005310 <USBD_StdItfReq>:
{
 8005310:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005312:	780b      	ldrb	r3, [r1, #0]
 8005314:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005318:	2b20      	cmp	r3, #32
{
 800531a:	460d      	mov	r5, r1
 800531c:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800531e:	d00d      	beq.n	800533c <USBD_StdItfReq+0x2c>
 8005320:	2b40      	cmp	r3, #64	; 0x40
 8005322:	d00b      	beq.n	800533c <USBD_StdItfReq+0x2c>
 8005324:	b153      	cbz	r3, 800533c <USBD_StdItfReq+0x2c>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005326:	2180      	movs	r1, #128	; 0x80
 8005328:	4620      	mov	r0, r4
 800532a:	f002 fb41 	bl	80079b0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800532e:	4620      	mov	r0, r4
 8005330:	2100      	movs	r1, #0
 8005332:	f002 fb3d 	bl	80079b0 <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 8005336:	2600      	movs	r6, #0
}
 8005338:	4630      	mov	r0, r6
 800533a:	bd70      	pop	{r4, r5, r6, pc}
    switch (pdev->dev_state)
 800533c:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8005340:	3b01      	subs	r3, #1
 8005342:	2b02      	cmp	r3, #2
 8005344:	d8ef      	bhi.n	8005326 <USBD_StdItfReq+0x16>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005346:	792b      	ldrb	r3, [r5, #4]
 8005348:	2b01      	cmp	r3, #1
 800534a:	d8ec      	bhi.n	8005326 <USBD_StdItfReq+0x16>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800534c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8005350:	4629      	mov	r1, r5
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	4620      	mov	r0, r4
 8005356:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8005358:	88eb      	ldrh	r3, [r5, #6]
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800535a:	4606      	mov	r6, r0
        if ((req->wLength == 0U) && (ret == USBD_OK))
 800535c:	2b00      	cmp	r3, #0
 800535e:	d1eb      	bne.n	8005338 <USBD_StdItfReq+0x28>
 8005360:	2800      	cmp	r0, #0
 8005362:	d1e9      	bne.n	8005338 <USBD_StdItfReq+0x28>
          (void)USBD_CtlSendStatus(pdev);
 8005364:	4620      	mov	r0, r4
 8005366:	f000 f90f 	bl	8005588 <USBD_CtlSendStatus>
 800536a:	e7e5      	b.n	8005338 <USBD_StdItfReq+0x28>

0800536c <USBD_StdEPReq>:
{
 800536c:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800536e:	780b      	ldrb	r3, [r1, #0]
 8005370:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005374:	2b20      	cmp	r3, #32
{
 8005376:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005378:	d027      	beq.n	80053ca <USBD_StdEPReq+0x5e>
 800537a:	2b40      	cmp	r3, #64	; 0x40
 800537c:	d025      	beq.n	80053ca <USBD_StdEPReq+0x5e>
 800537e:	460c      	mov	r4, r1
 8005380:	b14b      	cbz	r3, 8005396 <USBD_StdEPReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005382:	2180      	movs	r1, #128	; 0x80
 8005384:	4628      	mov	r0, r5
 8005386:	f002 fb13 	bl	80079b0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800538a:	4628      	mov	r0, r5
 800538c:	2100      	movs	r1, #0
 800538e:	f002 fb0f 	bl	80079b0 <USBD_LL_StallEP>
}
 8005392:	2000      	movs	r0, #0
 8005394:	bd70      	pop	{r4, r5, r6, pc}
    switch (req->bRequest)
 8005396:	784b      	ldrb	r3, [r1, #1]
  ep_addr = LOBYTE(req->wIndex);
 8005398:	888a      	ldrh	r2, [r1, #4]
    switch (req->bRequest)
 800539a:	2b01      	cmp	r3, #1
  ep_addr = LOBYTE(req->wIndex);
 800539c:	b2d1      	uxtb	r1, r2
    switch (req->bRequest)
 800539e:	d042      	beq.n	8005426 <USBD_StdEPReq+0xba>
 80053a0:	d31a      	bcc.n	80053d8 <USBD_StdEPReq+0x6c>
 80053a2:	2b03      	cmp	r3, #3
 80053a4:	d1ed      	bne.n	8005382 <USBD_StdEPReq+0x16>
      switch (pdev->dev_state)
 80053a6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d052      	beq.n	8005454 <USBD_StdEPReq+0xe8>
 80053ae:	2b03      	cmp	r3, #3
 80053b0:	d1e7      	bne.n	8005382 <USBD_StdEPReq+0x16>
        if (req->wValue == USB_FEATURE_EP_HALT)
 80053b2:	8863      	ldrh	r3, [r4, #2]
 80053b4:	b92b      	cbnz	r3, 80053c2 <USBD_StdEPReq+0x56>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80053b6:	064a      	lsls	r2, r1, #25
 80053b8:	d003      	beq.n	80053c2 <USBD_StdEPReq+0x56>
 80053ba:	88e3      	ldrh	r3, [r4, #6]
 80053bc:	b90b      	cbnz	r3, 80053c2 <USBD_StdEPReq+0x56>
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80053be:	f002 faf7 	bl	80079b0 <USBD_LL_StallEP>
        (void)USBD_CtlSendStatus(pdev);
 80053c2:	4628      	mov	r0, r5
 80053c4:	f000 f8e0 	bl	8005588 <USBD_CtlSendStatus>
        break;
 80053c8:	e7e3      	b.n	8005392 <USBD_StdEPReq+0x26>
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80053ca:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 80053ce:	4628      	mov	r0, r5
 80053d0:	689b      	ldr	r3, [r3, #8]
}
 80053d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80053d6:	4718      	bx	r3
      switch (pdev->dev_state)
 80053d8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d042      	beq.n	8005466 <USBD_StdEPReq+0xfa>
 80053e0:	2b03      	cmp	r3, #3
 80053e2:	d1ce      	bne.n	8005382 <USBD_StdEPReq+0x16>
 80053e4:	f001 030f 	and.w	r3, r1, #15
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80053e8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
        if ((ep_addr & 0x80U) == 0x80U)
 80053ec:	0612      	lsls	r2, r2, #24
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80053ee:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        if ((ep_addr & 0x80U) == 0x80U)
 80053f2:	d447      	bmi.n	8005484 <USBD_StdEPReq+0x118>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80053f4:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d0c2      	beq.n	8005382 <USBD_StdEPReq+0x16>
 80053fc:	f001 037f 	and.w	r3, r1, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005400:	2414      	movs	r4, #20
 8005402:	fb04 0403 	mla	r4, r4, r3, r0
 8005406:	f504 74aa 	add.w	r4, r4, #340	; 0x154
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800540a:	b12b      	cbz	r3, 8005418 <USBD_StdEPReq+0xac>
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800540c:	4628      	mov	r0, r5
 800540e:	f002 faeb 	bl	80079e8 <USBD_LL_IsStallEP>
 8005412:	2800      	cmp	r0, #0
 8005414:	d042      	beq.n	800549c <USBD_StdEPReq+0x130>
            pep->status = 0x0001U;
 8005416:	2301      	movs	r3, #1
 8005418:	6023      	str	r3, [r4, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800541a:	4621      	mov	r1, r4
 800541c:	4628      	mov	r0, r5
 800541e:	2202      	movs	r2, #2
 8005420:	f000 f884 	bl	800552c <USBD_CtlSendData>
          break;
 8005424:	e7b5      	b.n	8005392 <USBD_StdEPReq+0x26>
      switch (pdev->dev_state)
 8005426:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800542a:	2b02      	cmp	r3, #2
 800542c:	d012      	beq.n	8005454 <USBD_StdEPReq+0xe8>
 800542e:	2b03      	cmp	r3, #3
 8005430:	d1a7      	bne.n	8005382 <USBD_StdEPReq+0x16>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005432:	8863      	ldrh	r3, [r4, #2]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d1ac      	bne.n	8005392 <USBD_StdEPReq+0x26>
          if ((ep_addr & 0x7FU) != 0x00U)
 8005438:	064e      	lsls	r6, r1, #25
 800543a:	d001      	beq.n	8005440 <USBD_StdEPReq+0xd4>
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800543c:	f002 fac6 	bl	80079cc <USBD_LL_ClearStallEP>
          (void)USBD_CtlSendStatus(pdev);
 8005440:	4628      	mov	r0, r5
 8005442:	f000 f8a1 	bl	8005588 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005446:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 800544a:	4621      	mov	r1, r4
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	4628      	mov	r0, r5
 8005450:	4798      	blx	r3
 8005452:	e79e      	b.n	8005392 <USBD_StdEPReq+0x26>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005454:	064b      	lsls	r3, r1, #25
 8005456:	d094      	beq.n	8005382 <USBD_StdEPReq+0x16>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005458:	f002 faaa 	bl	80079b0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800545c:	4628      	mov	r0, r5
 800545e:	2180      	movs	r1, #128	; 0x80
 8005460:	f002 faa6 	bl	80079b0 <USBD_LL_StallEP>
 8005464:	e795      	b.n	8005392 <USBD_StdEPReq+0x26>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005466:	0648      	lsls	r0, r1, #25
 8005468:	d18b      	bne.n	8005382 <USBD_StdEPReq+0x16>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800546a:	0611      	lsls	r1, r2, #24
 800546c:	bf4c      	ite	mi
 800546e:	f105 0114 	addmi.w	r1, r5, #20
 8005472:	f505 71aa 	addpl.w	r1, r5, #340	; 0x154
        pep->status = 0x0000U;
 8005476:	2300      	movs	r3, #0
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005478:	4628      	mov	r0, r5
        pep->status = 0x0000U;
 800547a:	600b      	str	r3, [r1, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800547c:	2202      	movs	r2, #2
 800547e:	f000 f855 	bl	800552c <USBD_CtlSendData>
        break;
 8005482:	e786      	b.n	8005392 <USBD_StdEPReq+0x26>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005484:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005486:	2b00      	cmp	r3, #0
 8005488:	f43f af7b 	beq.w	8005382 <USBD_StdEPReq+0x16>
 800548c:	f001 037f 	and.w	r3, r1, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005490:	1c5c      	adds	r4, r3, #1
 8005492:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8005496:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800549a:	e7b6      	b.n	800540a <USBD_StdEPReq+0x9e>
            pep->status = 0x0000U;
 800549c:	6020      	str	r0, [r4, #0]
 800549e:	e7bc      	b.n	800541a <USBD_StdEPReq+0xae>

080054a0 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 80054a0:	780b      	ldrb	r3, [r1, #0]
 80054a2:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 80054a4:	784b      	ldrb	r3, [r1, #1]
 80054a6:	7043      	strb	r3, [r0, #1]

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80054a8:	78ca      	ldrb	r2, [r1, #3]
 80054aa:	788b      	ldrb	r3, [r1, #2]
 80054ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 80054b0:	8043      	strh	r3, [r0, #2]
 80054b2:	794a      	ldrb	r2, [r1, #5]
 80054b4:	790b      	ldrb	r3, [r1, #4]
 80054b6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 80054ba:	8083      	strh	r3, [r0, #4]
 80054bc:	79ca      	ldrb	r2, [r1, #7]
 80054be:	798b      	ldrb	r3, [r1, #6]
 80054c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 80054c4:	80c3      	strh	r3, [r0, #6]
}
 80054c6:	4770      	bx	lr

080054c8 <USBD_CtlError>:
{
 80054c8:	b510      	push	{r4, lr}
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80054ca:	2180      	movs	r1, #128	; 0x80
{
 80054cc:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80054ce:	f002 fa6f 	bl	80079b0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80054d2:	4620      	mov	r0, r4
 80054d4:	2100      	movs	r1, #0
}
 80054d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 80054da:	f002 ba69 	b.w	80079b0 <USBD_LL_StallEP>
 80054de:	bf00      	nop

080054e0 <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 80054e0:	b300      	cbz	r0, 8005524 <USBD_GetString+0x44>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 80054e2:	7803      	ldrb	r3, [r0, #0]
{
 80054e4:	b430      	push	{r4, r5}
  while (*pbuff != (uint8_t)'\0')
 80054e6:	b1f3      	cbz	r3, 8005526 <USBD_GetString+0x46>
 80054e8:	4604      	mov	r4, r0
  uint8_t  len = 0U;
 80054ea:	2300      	movs	r3, #0
  while (*pbuff != (uint8_t)'\0')
 80054ec:	f814 5f01 	ldrb.w	r5, [r4, #1]!
  {
    len++;
 80054f0:	3301      	adds	r3, #1
 80054f2:	b2db      	uxtb	r3, r3
  while (*pbuff != (uint8_t)'\0')
 80054f4:	2d00      	cmp	r5, #0
 80054f6:	d1f9      	bne.n	80054ec <USBD_GetString+0xc>
 80054f8:	005b      	lsls	r3, r3, #1
 80054fa:	3302      	adds	r3, #2
  unicode[idx] = USB_DESC_TYPE_STRING;
 80054fc:	2403      	movs	r4, #3
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80054fe:	8013      	strh	r3, [r2, #0]
  unicode[idx] = *(uint8_t *)len;
 8005500:	700b      	strb	r3, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005502:	704c      	strb	r4, [r1, #1]
  while (*pdesc != (uint8_t)'\0')
 8005504:	7804      	ldrb	r4, [r0, #0]
 8005506:	b15c      	cbz	r4, 8005520 <USBD_GetString+0x40>
  idx++;
 8005508:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 800550a:	2500      	movs	r5, #0
    idx++;
 800550c:	1c5a      	adds	r2, r3, #1
    unicode[idx] = 0U;
 800550e:	b2d2      	uxtb	r2, r2
    unicode[idx] = *pdesc;
 8005510:	54cc      	strb	r4, [r1, r3]
    unicode[idx] = 0U;
 8005512:	548d      	strb	r5, [r1, r2]
  while (*pdesc != (uint8_t)'\0')
 8005514:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    idx++;
 8005518:	3302      	adds	r3, #2
 800551a:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 800551c:	2c00      	cmp	r4, #0
 800551e:	d1f5      	bne.n	800550c <USBD_GetString+0x2c>
}
 8005520:	bc30      	pop	{r4, r5}
 8005522:	4770      	bx	lr
 8005524:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 8005526:	2302      	movs	r3, #2
 8005528:	e7e8      	b.n	80054fc <USBD_GetString+0x1c>
 800552a:	bf00      	nop

0800552c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800552c:	b538      	push	{r3, r4, r5, lr}
 800552e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005530:	2502      	movs	r5, #2
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005532:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length = len;
 8005534:	e9c0 3306 	strd	r3, r3, [r0, #24]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005538:	f8c0 5294 	str.w	r5, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800553c:	2100      	movs	r1, #0
 800553e:	f002 fa75 	bl	8007a2c <USBD_LL_Transmit>

  return USBD_OK;
}
 8005542:	2000      	movs	r0, #0
 8005544:	bd38      	pop	{r3, r4, r5, pc}
 8005546:	bf00      	nop

08005548 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005548:	b508      	push	{r3, lr}
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800554a:	4613      	mov	r3, r2
 800554c:	460a      	mov	r2, r1
 800554e:	2100      	movs	r1, #0
 8005550:	f002 fa6c 	bl	8007a2c <USBD_LL_Transmit>

  return USBD_OK;
}
 8005554:	2000      	movs	r0, #0
 8005556:	bd08      	pop	{r3, pc}

08005558 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8005558:	b538      	push	{r3, r4, r5, lr}
 800555a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800555c:	2503      	movs	r5, #3
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800555e:	460a      	mov	r2, r1
  pdev->ep_out[0].total_length = len;
 8005560:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8005564:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005568:	f8c0 5294 	str.w	r5, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800556c:	2100      	movs	r1, #0
 800556e:	f002 fa6b 	bl	8007a48 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005572:	2000      	movs	r0, #0
 8005574:	bd38      	pop	{r3, r4, r5, pc}
 8005576:	bf00      	nop

08005578 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005578:	b508      	push	{r3, lr}
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800557a:	4613      	mov	r3, r2
 800557c:	460a      	mov	r2, r1
 800557e:	2100      	movs	r1, #0
 8005580:	f002 fa62 	bl	8007a48 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005584:	2000      	movs	r0, #0
 8005586:	bd08      	pop	{r3, pc}

08005588 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005588:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800558a:	2204      	movs	r2, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800558c:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800558e:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005592:	4619      	mov	r1, r3
 8005594:	461a      	mov	r2, r3
 8005596:	f002 fa49 	bl	8007a2c <USBD_LL_Transmit>

  return USBD_OK;
}
 800559a:	2000      	movs	r0, #0
 800559c:	bd08      	pop	{r3, pc}
 800559e:	bf00      	nop

080055a0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80055a0:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80055a2:	2205      	movs	r2, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80055a4:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80055a6:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80055aa:	4619      	mov	r1, r3
 80055ac:	461a      	mov	r2, r3
 80055ae:	f002 fa4b 	bl	8007a48 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80055b2:	2000      	movs	r0, #0
 80055b4:	bd08      	pop	{r3, pc}
 80055b6:	bf00      	nop

080055b8 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055b8:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 80055bc:	b983      	cbnz	r3, 80055e0 <osKernelInitialize+0x28>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055be:	f3ef 8310 	mrs	r3, PRIMASK
 80055c2:	b953      	cbnz	r3, 80055da <osKernelInitialize+0x22>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80055c4:	f3ef 8211 	mrs	r2, BASEPRI
 80055c8:	4b08      	ldr	r3, [pc, #32]	; (80055ec <osKernelInitialize+0x34>)
 80055ca:	6818      	ldr	r0, [r3, #0]
 80055cc:	b10a      	cbz	r2, 80055d2 <osKernelInitialize+0x1a>
 80055ce:	2802      	cmp	r0, #2
 80055d0:	d006      	beq.n	80055e0 <osKernelInitialize+0x28>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 80055d2:	b940      	cbnz	r0, 80055e6 <osKernelInitialize+0x2e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80055d4:	2201      	movs	r2, #1
 80055d6:	601a      	str	r2, [r3, #0]
 80055d8:	4770      	bx	lr
 80055da:	4b04      	ldr	r3, [pc, #16]	; (80055ec <osKernelInitialize+0x34>)
 80055dc:	6818      	ldr	r0, [r3, #0]
 80055de:	e7f6      	b.n	80055ce <osKernelInitialize+0x16>
    stat = osErrorISR;
 80055e0:	f06f 0005 	mvn.w	r0, #5
 80055e4:	4770      	bx	lr
      stat = osOK;
    } else {
      stat = osError;
 80055e6:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 80055ea:	4770      	bx	lr
 80055ec:	20000648 	.word	0x20000648

080055f0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80055f0:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055f2:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80055f6:	b9bb      	cbnz	r3, 8005628 <osKernelStart+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055f8:	f3ef 8310 	mrs	r3, PRIMASK
 80055fc:	b973      	cbnz	r3, 800561c <osKernelStart+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80055fe:	f3ef 8111 	mrs	r1, BASEPRI
 8005602:	4b0b      	ldr	r3, [pc, #44]	; (8005630 <osKernelStart+0x40>)
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	b109      	cbz	r1, 800560c <osKernelStart+0x1c>
 8005608:	2a02      	cmp	r2, #2
 800560a:	d00d      	beq.n	8005628 <osKernelStart+0x38>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800560c:	2a01      	cmp	r2, #1
 800560e:	d108      	bne.n	8005622 <osKernelStart+0x32>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005610:	2202      	movs	r2, #2
 8005612:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005614:	f000 ff86 	bl	8006524 <vTaskStartScheduler>
      stat = osOK;
 8005618:	2000      	movs	r0, #0
      stat = osError;
    }
  }

  return (stat);
}
 800561a:	bd08      	pop	{r3, pc}
 800561c:	4b04      	ldr	r3, [pc, #16]	; (8005630 <osKernelStart+0x40>)
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	e7f2      	b.n	8005608 <osKernelStart+0x18>
      stat = osError;
 8005622:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005626:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 8005628:	f06f 0005 	mvn.w	r0, #5
}
 800562c:	bd08      	pop	{r3, pc}
 800562e:	bf00      	nop
 8005630:	20000648 	.word	0x20000648

08005634 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005636:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005638:	2400      	movs	r4, #0
 800563a:	9405      	str	r4, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800563c:	f3ef 8505 	mrs	r5, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8005640:	bb75      	cbnz	r5, 80056a0 <osThreadNew+0x6c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005642:	f3ef 8310 	mrs	r3, PRIMASK
 8005646:	bb73      	cbnz	r3, 80056a6 <osThreadNew+0x72>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005648:	f3ef 8311 	mrs	r3, BASEPRI
 800564c:	bb5b      	cbnz	r3, 80056a6 <osThreadNew+0x72>
 800564e:	b370      	cbz	r0, 80056ae <osThreadNew+0x7a>
 8005650:	460b      	mov	r3, r1
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8005652:	b1da      	cbz	r2, 800568c <osThreadNew+0x58>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8005654:	6994      	ldr	r4, [r2, #24]
      if (attr->name != NULL) {
 8005656:	6811      	ldr	r1, [r2, #0]
      if (attr->priority != osPriorityNone) {
 8005658:	b364      	cbz	r4, 80056b4 <osThreadNew+0x80>
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800565a:	1e65      	subs	r5, r4, #1
 800565c:	2d37      	cmp	r5, #55	; 0x37
 800565e:	d81f      	bhi.n	80056a0 <osThreadNew+0x6c>
 8005660:	6855      	ldr	r5, [r2, #4]
 8005662:	07ed      	lsls	r5, r5, #31
 8005664:	d41c      	bmi.n	80056a0 <osThreadNew+0x6c>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8005666:	6955      	ldr	r5, [r2, #20]
 8005668:	b335      	cbz	r5, 80056b8 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800566a:	08af      	lsrs	r7, r5, #2
 800566c:	e9d2 6c02 	ldrd	r6, ip, [r2, #8]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005670:	b326      	cbz	r6, 80056bc <osThreadNew+0x88>
 8005672:	f1bc 0f5b 	cmp.w	ip, #91	; 0x5b
 8005676:	d91a      	bls.n	80056ae <osThreadNew+0x7a>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005678:	6912      	ldr	r2, [r2, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800567a:	b1c2      	cbz	r2, 80056ae <osThreadNew+0x7a>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800567c:	b1bd      	cbz	r5, 80056ae <osThreadNew+0x7a>
    else {
      mem = 0;
    }

    if (mem == 1) {
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800567e:	e9cd 2601 	strd	r2, r6, [sp, #4]
 8005682:	9400      	str	r4, [sp, #0]
 8005684:	463a      	mov	r2, r7
 8005686:	f000 fe65 	bl	8006354 <xTaskCreateStatic>
 800568a:	e00a      	b.n	80056a2 <osThreadNew+0x6e>
    name = NULL;
 800568c:	4611      	mov	r1, r2
    prio  = (UBaseType_t)osPriorityNormal;
 800568e:	2418      	movs	r4, #24
 8005690:	2280      	movs	r2, #128	; 0x80
                                                                                    (StaticTask_t *)attr->cb_mem);
    }
    else {
      if (mem == 0) {
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005692:	ad05      	add	r5, sp, #20
 8005694:	e9cd 4500 	strd	r4, r5, [sp]
 8005698:	f000 fe94 	bl	80063c4 <xTaskCreate>
 800569c:	2801      	cmp	r0, #1
 800569e:	d006      	beq.n	80056ae <osThreadNew+0x7a>
        return (NULL);
 80056a0:	2000      	movs	r0, #0
      }
    }
  }

  return ((osThreadId_t)hTask);
}
 80056a2:	b007      	add	sp, #28
 80056a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (func != NULL)) {
 80056a6:	4b09      	ldr	r3, [pc, #36]	; (80056cc <osThreadNew+0x98>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d1cf      	bne.n	800564e <osThreadNew+0x1a>
 80056ae:	9805      	ldr	r0, [sp, #20]
}
 80056b0:	b007      	add	sp, #28
 80056b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    prio  = (UBaseType_t)osPriorityNormal;
 80056b4:	2418      	movs	r4, #24
 80056b6:	e7d3      	b.n	8005660 <osThreadNew+0x2c>
    stack = configMINIMAL_STACK_SIZE;
 80056b8:	2780      	movs	r7, #128	; 0x80
 80056ba:	e7d7      	b.n	800566c <osThreadNew+0x38>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80056bc:	f1bc 0f00 	cmp.w	ip, #0
 80056c0:	d1f5      	bne.n	80056ae <osThreadNew+0x7a>
 80056c2:	6912      	ldr	r2, [r2, #16]
 80056c4:	2a00      	cmp	r2, #0
 80056c6:	d1f2      	bne.n	80056ae <osThreadNew+0x7a>
 80056c8:	b2ba      	uxth	r2, r7
 80056ca:	e7e2      	b.n	8005692 <osThreadNew+0x5e>
 80056cc:	20000648 	.word	0x20000648

080056d0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80056d0:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056d2:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80056d6:	b9ab      	cbnz	r3, 8005704 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056d8:	f3ef 8310 	mrs	r3, PRIMASK
 80056dc:	b12b      	cbz	r3, 80056ea <osDelay+0x1a>
 80056de:	4b0b      	ldr	r3, [pc, #44]	; (800570c <osDelay+0x3c>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d00e      	beq.n	8005704 <osDelay+0x34>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 80056e6:	b948      	cbnz	r0, 80056fc <osDelay+0x2c>
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 80056e8:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80056ea:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d0f9      	beq.n	80056e6 <osDelay+0x16>
 80056f2:	4b06      	ldr	r3, [pc, #24]	; (800570c <osDelay+0x3c>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d1f5      	bne.n	80056e6 <osDelay+0x16>
 80056fa:	e003      	b.n	8005704 <osDelay+0x34>
      vTaskDelay(ticks);
 80056fc:	f001 f8bc 	bl	8006878 <vTaskDelay>
    stat = osOK;
 8005700:	2000      	movs	r0, #0
}
 8005702:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 8005704:	f06f 0005 	mvn.w	r0, #5
}
 8005708:	bd08      	pop	{r3, pc}
 800570a:	bf00      	nop
 800570c:	20000648 	.word	0x20000648

08005710 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005710:	4b04      	ldr	r3, [pc, #16]	; (8005724 <vApplicationGetIdleTaskMemory+0x14>)
 8005712:	6003      	str	r3, [r0, #0]
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005714:	b410      	push	{r4}
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005716:	2380      	movs	r3, #128	; 0x80
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005718:	4c03      	ldr	r4, [pc, #12]	; (8005728 <vApplicationGetIdleTaskMemory+0x18>)
 800571a:	600c      	str	r4, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800571c:	6013      	str	r3, [r2, #0]
}
 800571e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005722:	4770      	bx	lr
 8005724:	200005ec 	.word	0x200005ec
 8005728:	200003ec 	.word	0x200003ec

0800572c <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800572c:	4b05      	ldr	r3, [pc, #20]	; (8005744 <vApplicationGetTimerTaskMemory+0x18>)
 800572e:	6003      	str	r3, [r0, #0]
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005730:	b410      	push	{r4}
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005732:	f44f 7380 	mov.w	r3, #256	; 0x100
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005736:	4c04      	ldr	r4, [pc, #16]	; (8005748 <vApplicationGetTimerTaskMemory+0x1c>)
 8005738:	600c      	str	r4, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800573a:	6013      	str	r3, [r2, #0]
}
 800573c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	20000a4c 	.word	0x20000a4c
 8005748:	2000064c 	.word	0x2000064c

0800574c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800574c:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005750:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005754:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005756:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005758:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800575a:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800575c:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop

08005764 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005764:	2300      	movs	r3, #0
 8005766:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop

0800576c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800576c:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800576e:	6802      	ldr	r2, [r0, #0]
{
 8005770:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005772:	689c      	ldr	r4, [r3, #8]
 8005774:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005776:	689c      	ldr	r4, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8005778:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 800577a:	3201      	adds	r2, #1
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800577c:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800577e:	6099      	str	r1, [r3, #8]
}
 8005780:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 8005784:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8005786:	6002      	str	r2, [r0, #0]
}
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop

0800578c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800578c:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800578e:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005790:	1c6b      	adds	r3, r5, #1
 8005792:	d011      	beq.n	80057b8 <vListInsert+0x2c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005794:	f100 0208 	add.w	r2, r0, #8
 8005798:	e000      	b.n	800579c <vListInsert+0x10>
 800579a:	461a      	mov	r2, r3
 800579c:	6853      	ldr	r3, [r2, #4]
 800579e:	681c      	ldr	r4, [r3, #0]
 80057a0:	42ac      	cmp	r4, r5
 80057a2:	d9fa      	bls.n	800579a <vListInsert+0xe>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80057a4:	6804      	ldr	r4, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 80057a6:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 80057a8:	3401      	adds	r4, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80057aa:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80057ac:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80057ae:	6051      	str	r1, [r2, #4]
	pxNewListItem->pxContainer = pxList;
 80057b0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80057b2:	6004      	str	r4, [r0, #0]
}
 80057b4:	bc30      	pop	{r4, r5}
 80057b6:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 80057b8:	6902      	ldr	r2, [r0, #16]
 80057ba:	6853      	ldr	r3, [r2, #4]
 80057bc:	e7f2      	b.n	80057a4 <vListInsert+0x18>
 80057be:	bf00      	nop

080057c0 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80057c0:	6842      	ldr	r2, [r0, #4]
 80057c2:	6881      	ldr	r1, [r0, #8]
List_t * const pxList = pxItemToRemove->pxContainer;
 80057c4:	6903      	ldr	r3, [r0, #16]
{
 80057c6:	b410      	push	{r4}
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80057c8:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80057ca:	6881      	ldr	r1, [r0, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80057cc:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80057ce:	604a      	str	r2, [r1, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;
 80057d0:	681a      	ldr	r2, [r3, #0]
	if( pxList->pxIndex == pxItemToRemove )
 80057d2:	4284      	cmp	r4, r0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80057d4:	bf08      	it	eq
 80057d6:	6059      	streq	r1, [r3, #4]
	( pxList->uxNumberOfItems )--;
 80057d8:	3a01      	subs	r2, #1
	pxItemToRemove->pxContainer = NULL;
 80057da:	2100      	movs	r1, #0
 80057dc:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80057de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80057e0:	6818      	ldr	r0, [r3, #0]
}
 80057e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80057e8:	b538      	push	{r3, r4, r5, lr}
Queue_t * const pxQueue = xQueue;

	configASSERT( pxQueue );
 80057ea:	b1e0      	cbz	r0, 8005826 <xQueueGenericReset+0x3e>
 80057ec:	4604      	mov	r4, r0
 80057ee:	460d      	mov	r5, r1

	taskENTER_CRITICAL();
 80057f0:	f001 fc78 	bl	80070e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057f4:	e9d4 130f 	ldrd	r1, r3, [r4, #60]	; 0x3c
 80057f8:	6822      	ldr	r2, [r4, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80057fa:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057fc:	fb01 f103 	mul.w	r1, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005800:	1acb      	subs	r3, r1, r3
 8005802:	4413      	add	r3, r2
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005804:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005806:	440a      	add	r2, r1
		pxQueue->cRxLock = queueUNLOCKED;
 8005808:	21ff      	movs	r1, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800580a:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800580c:	e9c4 2302 	strd	r2, r3, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 8005810:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005814:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005818:	b975      	cbnz	r5, 8005838 <xQueueGenericReset+0x50>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800581a:	6923      	ldr	r3, [r4, #16]
 800581c:	b9ab      	cbnz	r3, 800584a <xQueueGenericReset+0x62>
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
		}
	}
	taskEXIT_CRITICAL();
 800581e:	f001 fc83 	bl	8007128 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
 8005822:	2001      	movs	r0, #1
 8005824:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582a:	f383 8811 	msr	BASEPRI, r3
 800582e:	f3bf 8f6f 	isb	sy
 8005832:	f3bf 8f4f 	dsb	sy
 8005836:	e7fe      	b.n	8005836 <xQueueGenericReset+0x4e>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005838:	f104 0010 	add.w	r0, r4, #16
 800583c:	f7ff ff86 	bl	800574c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005840:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005844:	f7ff ff82 	bl	800574c <vListInitialise>
 8005848:	e7e9      	b.n	800581e <xQueueGenericReset+0x36>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800584a:	f104 0010 	add.w	r0, r4, #16
 800584e:	f001 f909 	bl	8006a64 <xTaskRemoveFromEventList>
 8005852:	2800      	cmp	r0, #0
 8005854:	d0e3      	beq.n	800581e <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8005856:	4b04      	ldr	r3, [pc, #16]	; (8005868 <xQueueGenericReset+0x80>)
 8005858:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800585c:	601a      	str	r2, [r3, #0]
 800585e:	f3bf 8f4f 	dsb	sy
 8005862:	f3bf 8f6f 	isb	sy
 8005866:	e7da      	b.n	800581e <xQueueGenericReset+0x36>
 8005868:	e000ed04 	.word	0xe000ed04

0800586c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800586c:	b530      	push	{r4, r5, lr}
 800586e:	b083      	sub	sp, #12
 8005870:	f89d 5018 	ldrb.w	r5, [sp, #24]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005874:	b940      	cbnz	r0, 8005888 <xQueueGenericCreateStatic+0x1c>
 8005876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587a:	f383 8811 	msr	BASEPRI, r3
 800587e:	f3bf 8f6f 	isb	sy
 8005882:	f3bf 8f4f 	dsb	sy
 8005886:	e7fe      	b.n	8005886 <xQueueGenericCreateStatic+0x1a>
 8005888:	461c      	mov	r4, r3

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800588a:	b17b      	cbz	r3, 80058ac <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800588c:	b382      	cbz	r2, 80058f0 <xQueueGenericCreateStatic+0x84>
 800588e:	b1b1      	cbz	r1, 80058be <xQueueGenericCreateStatic+0x52>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005890:	2350      	movs	r3, #80	; 0x50
 8005892:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005894:	9b01      	ldr	r3, [sp, #4]
 8005896:	2b50      	cmp	r3, #80	; 0x50
 8005898:	d01a      	beq.n	80058d0 <xQueueGenericCreateStatic+0x64>
 800589a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589e:	f383 8811 	msr	BASEPRI, r3
 80058a2:	f3bf 8f6f 	isb	sy
 80058a6:	f3bf 8f4f 	dsb	sy
 80058aa:	e7fe      	b.n	80058aa <xQueueGenericCreateStatic+0x3e>
 80058ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b0:	f383 8811 	msr	BASEPRI, r3
 80058b4:	f3bf 8f6f 	isb	sy
 80058b8:	f3bf 8f4f 	dsb	sy
 80058bc:	e7fe      	b.n	80058bc <xQueueGenericCreateStatic+0x50>
 80058be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c2:	f383 8811 	msr	BASEPRI, r3
 80058c6:	f3bf 8f6f 	isb	sy
 80058ca:	f3bf 8f4f 	dsb	sy
 80058ce:	e7fe      	b.n	80058ce <xQueueGenericCreateStatic+0x62>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80058d0:	9b01      	ldr	r3, [sp, #4]
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80058d2:	2301      	movs	r3, #1
 80058d4:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
	pxNewQueue->uxItemSize = uxItemSize;
 80058d8:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
 80058dc:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80058de:	2101      	movs	r1, #1
 80058e0:	4620      	mov	r0, r4
 80058e2:	f7ff ff81 	bl	80057e8 <xQueueGenericReset>
	}
 80058e6:	4620      	mov	r0, r4

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80058e8:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
	}
 80058ec:	b003      	add	sp, #12
 80058ee:	bd30      	pop	{r4, r5, pc}
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80058f0:	b141      	cbz	r1, 8005904 <xQueueGenericCreateStatic+0x98>
 80058f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f6:	f383 8811 	msr	BASEPRI, r3
 80058fa:	f3bf 8f6f 	isb	sy
 80058fe:	f3bf 8f4f 	dsb	sy
 8005902:	e7fe      	b.n	8005902 <xQueueGenericCreateStatic+0x96>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005904:	2350      	movs	r3, #80	; 0x50
 8005906:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005908:	9b01      	ldr	r3, [sp, #4]
 800590a:	2b50      	cmp	r3, #80	; 0x50
 800590c:	d1c5      	bne.n	800589a <xQueueGenericCreateStatic+0x2e>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800590e:	2301      	movs	r3, #1
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005910:	9a01      	ldr	r2, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005912:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8005916:	4622      	mov	r2, r4
 8005918:	e7de      	b.n	80058d8 <xQueueGenericCreateStatic+0x6c>
 800591a:	bf00      	nop

0800591c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800591c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005920:	b085      	sub	sp, #20
 8005922:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;

	configASSERT( pxQueue );
 8005924:	2800      	cmp	r0, #0
 8005926:	f000 8125 	beq.w	8005b74 <xQueueGenericSend+0x258>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800592a:	2900      	cmp	r1, #0
 800592c:	f000 8115 	beq.w	8005b5a <xQueueGenericSend+0x23e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005930:	2b02      	cmp	r3, #2
 8005932:	d10b      	bne.n	800594c <xQueueGenericSend+0x30>
 8005934:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005936:	2a01      	cmp	r2, #1
 8005938:	d008      	beq.n	800594c <xQueueGenericSend+0x30>
 800593a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800593e:	f383 8811 	msr	BASEPRI, r3
 8005942:	f3bf 8f6f 	isb	sy
 8005946:	f3bf 8f4f 	dsb	sy
 800594a:	e7fe      	b.n	800594a <xQueueGenericSend+0x2e>
 800594c:	4604      	mov	r4, r0
 800594e:	461f      	mov	r7, r3
 8005950:	460e      	mov	r6, r1
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005952:	f001 f923 	bl	8006b9c <xTaskGetSchedulerState>
 8005956:	2800      	cmp	r0, #0
 8005958:	f040 80fc 	bne.w	8005b54 <xQueueGenericSend+0x238>
 800595c:	9b01      	ldr	r3, [sp, #4]
 800595e:	b143      	cbz	r3, 8005972 <xQueueGenericSend+0x56>
 8005960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005964:	f383 8811 	msr	BASEPRI, r3
 8005968:	f3bf 8f6f 	isb	sy
 800596c:	f3bf 8f4f 	dsb	sy
 8005970:	e7fe      	b.n	8005970 <xQueueGenericSend+0x54>
 8005972:	469a      	mov	sl, r3
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005974:	f001 fbb6 	bl	80070e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005978:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800597a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
 800597c:	f8df 9330 	ldr.w	r9, [pc, #816]	; 8005cb0 <xQueueGenericSend+0x394>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005980:	429a      	cmp	r2, r3
		prvLockQueue( pxQueue );
 8005982:	f04f 0800 	mov.w	r8, #0
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005986:	d375      	bcc.n	8005a74 <xQueueGenericSend+0x158>
 8005988:	2f02      	cmp	r7, #2
 800598a:	f000 80fc 	beq.w	8005b86 <xQueueGenericSend+0x26a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800598e:	9d01      	ldr	r5, [sp, #4]
 8005990:	2d00      	cmp	r5, #0
 8005992:	f000 8161 	beq.w	8005c58 <xQueueGenericSend+0x33c>
				else if( xEntryTimeSet == pdFALSE )
 8005996:	f1ba 0f00 	cmp.w	sl, #0
 800599a:	d102      	bne.n	80059a2 <xQueueGenericSend+0x86>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800599c:	a802      	add	r0, sp, #8
 800599e:	f001 f8a5 	bl	8006aec <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80059a2:	f001 fbc1 	bl	8007128 <vPortExitCritical>
		vTaskSuspendAll();
 80059a6:	f000 fe2d 	bl	8006604 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80059aa:	f001 fb9b 	bl	80070e4 <vPortEnterCritical>
 80059ae:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80059b2:	2bff      	cmp	r3, #255	; 0xff
 80059b4:	bf08      	it	eq
 80059b6:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 80059ba:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80059be:	2bff      	cmp	r3, #255	; 0xff
 80059c0:	bf08      	it	eq
 80059c2:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 80059c6:	f001 fbaf 	bl	8007128 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80059ca:	a901      	add	r1, sp, #4
 80059cc:	a802      	add	r0, sp, #8
 80059ce:	f001 f899 	bl	8006b04 <xTaskCheckForTimeOut>
 80059d2:	2800      	cmp	r0, #0
 80059d4:	f040 8126 	bne.w	8005c24 <xQueueGenericSend+0x308>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80059d8:	f001 fb84 	bl	80070e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80059dc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80059de:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d06a      	beq.n	8005aba <xQueueGenericSend+0x19e>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80059e4:	f001 fba0 	bl	8007128 <vPortExitCritical>
	taskENTER_CRITICAL();
 80059e8:	f001 fb7c 	bl	80070e4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80059ec:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 80059f0:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80059f2:	2d00      	cmp	r5, #0
 80059f4:	dd11      	ble.n	8005a1a <xQueueGenericSend+0xfe>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059f8:	b17b      	cbz	r3, 8005a1a <xQueueGenericSend+0xfe>
 80059fa:	f104 0a24 	add.w	sl, r4, #36	; 0x24
 80059fe:	e001      	b.n	8005a04 <xQueueGenericSend+0xe8>
 8005a00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a02:	b153      	cbz	r3, 8005a1a <xQueueGenericSend+0xfe>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a04:	4650      	mov	r0, sl
 8005a06:	f001 f82d 	bl	8006a64 <xTaskRemoveFromEventList>
 8005a0a:	b108      	cbz	r0, 8005a10 <xQueueGenericSend+0xf4>
						vTaskMissedYield();
 8005a0c:	f001 f8c0 	bl	8006b90 <vTaskMissedYield>
 8005a10:	3d01      	subs	r5, #1
 8005a12:	b2eb      	uxtb	r3, r5
 8005a14:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d1f2      	bne.n	8005a00 <xQueueGenericSend+0xe4>
		pxQueue->cTxLock = queueUNLOCKED;
 8005a1a:	23ff      	movs	r3, #255	; 0xff
 8005a1c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8005a20:	f001 fb82 	bl	8007128 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005a24:	f001 fb5e 	bl	80070e4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005a28:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8005a2c:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a2e:	2d00      	cmp	r5, #0
 8005a30:	dd11      	ble.n	8005a56 <xQueueGenericSend+0x13a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a32:	6923      	ldr	r3, [r4, #16]
 8005a34:	b17b      	cbz	r3, 8005a56 <xQueueGenericSend+0x13a>
 8005a36:	f104 0a10 	add.w	sl, r4, #16
 8005a3a:	e001      	b.n	8005a40 <xQueueGenericSend+0x124>
 8005a3c:	6923      	ldr	r3, [r4, #16]
 8005a3e:	b153      	cbz	r3, 8005a56 <xQueueGenericSend+0x13a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a40:	4650      	mov	r0, sl
 8005a42:	f001 f80f 	bl	8006a64 <xTaskRemoveFromEventList>
 8005a46:	b108      	cbz	r0, 8005a4c <xQueueGenericSend+0x130>
					vTaskMissedYield();
 8005a48:	f001 f8a2 	bl	8006b90 <vTaskMissedYield>
 8005a4c:	3d01      	subs	r5, #1
 8005a4e:	b2eb      	uxtb	r3, r5
 8005a50:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1f2      	bne.n	8005a3c <xQueueGenericSend+0x120>
		pxQueue->cRxLock = queueUNLOCKED;
 8005a56:	23ff      	movs	r3, #255	; 0xff
 8005a58:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8005a5c:	f001 fb64 	bl	8007128 <vPortExitCritical>
				( void ) xTaskResumeAll();
 8005a60:	f000 fe84 	bl	800676c <xTaskResumeAll>
		taskENTER_CRITICAL();
 8005a64:	f001 fb3e 	bl	80070e4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a68:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005a6a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	f04f 0a01 	mov.w	sl, #1
 8005a72:	d289      	bcs.n	8005988 <xQueueGenericSend+0x6c>
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005a74:	6c22      	ldr	r2, [r4, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a76:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005a78:	2a00      	cmp	r2, #0
 8005a7a:	f000 8087 	beq.w	8005b8c <xQueueGenericSend+0x270>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005a7e:	4631      	mov	r1, r6
	else if( xPosition == queueSEND_TO_BACK )
 8005a80:	2f00      	cmp	r7, #0
 8005a82:	f040 80bb 	bne.w	8005bfc <xQueueGenericSend+0x2e0>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005a86:	6860      	ldr	r0, [r4, #4]
 8005a88:	f002 f82a 	bl	8007ae0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a8c:	6863      	ldr	r3, [r4, #4]
 8005a8e:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a90:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a92:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a94:	4293      	cmp	r3, r2
 8005a96:	f105 0501 	add.w	r5, r5, #1
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a9a:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a9c:	d379      	bcc.n	8005b92 <xQueueGenericSend+0x276>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005a9e:	63a5      	str	r5, [r4, #56]	; 0x38
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005aa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005aa2:	6822      	ldr	r2, [r4, #0]
 8005aa4:	6062      	str	r2, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d077      	beq.n	8005b9a <xQueueGenericSend+0x27e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005aaa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005aae:	f000 ffd9 	bl	8006a64 <xTaskRemoveFromEventList>
 8005ab2:	2800      	cmp	r0, #0
 8005ab4:	f040 8082 	bne.w	8005bbc <xQueueGenericSend+0x2a0>
 8005ab8:	e06f      	b.n	8005b9a <xQueueGenericSend+0x27e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005aba:	f104 0a10 	add.w	sl, r4, #16
	taskEXIT_CRITICAL();
 8005abe:	f001 fb33 	bl	8007128 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005ac2:	4650      	mov	r0, sl
 8005ac4:	9901      	ldr	r1, [sp, #4]
 8005ac6:	f000 ff3f 	bl	8006948 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8005aca:	f001 fb0b 	bl	80070e4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8005ace:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8005ad2:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ad4:	2d00      	cmp	r5, #0
 8005ad6:	dd11      	ble.n	8005afc <xQueueGenericSend+0x1e0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ad8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ada:	b17b      	cbz	r3, 8005afc <xQueueGenericSend+0x1e0>
 8005adc:	f104 0b24 	add.w	fp, r4, #36	; 0x24
 8005ae0:	e001      	b.n	8005ae6 <xQueueGenericSend+0x1ca>
 8005ae2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ae4:	b153      	cbz	r3, 8005afc <xQueueGenericSend+0x1e0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ae6:	4658      	mov	r0, fp
 8005ae8:	f000 ffbc 	bl	8006a64 <xTaskRemoveFromEventList>
 8005aec:	b108      	cbz	r0, 8005af2 <xQueueGenericSend+0x1d6>
						vTaskMissedYield();
 8005aee:	f001 f84f 	bl	8006b90 <vTaskMissedYield>
 8005af2:	3d01      	subs	r5, #1
 8005af4:	b2eb      	uxtb	r3, r5
 8005af6:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d1f2      	bne.n	8005ae2 <xQueueGenericSend+0x1c6>
		pxQueue->cTxLock = queueUNLOCKED;
 8005afc:	23ff      	movs	r3, #255	; 0xff
 8005afe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8005b02:	f001 fb11 	bl	8007128 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005b06:	f001 faed 	bl	80070e4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005b0a:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8005b0e:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b10:	2d00      	cmp	r5, #0
 8005b12:	dc0a      	bgt.n	8005b2a <xQueueGenericSend+0x20e>
 8005b14:	e00c      	b.n	8005b30 <xQueueGenericSend+0x214>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b16:	4650      	mov	r0, sl
 8005b18:	f000 ffa4 	bl	8006a64 <xTaskRemoveFromEventList>
 8005b1c:	b108      	cbz	r0, 8005b22 <xQueueGenericSend+0x206>
					vTaskMissedYield();
 8005b1e:	f001 f837 	bl	8006b90 <vTaskMissedYield>
 8005b22:	3d01      	subs	r5, #1
 8005b24:	b2eb      	uxtb	r3, r5
 8005b26:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b28:	b113      	cbz	r3, 8005b30 <xQueueGenericSend+0x214>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b2a:	6923      	ldr	r3, [r4, #16]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d1f2      	bne.n	8005b16 <xQueueGenericSend+0x1fa>
		pxQueue->cRxLock = queueUNLOCKED;
 8005b30:	23ff      	movs	r3, #255	; 0xff
 8005b32:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8005b36:	f001 faf7 	bl	8007128 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8005b3a:	f000 fe17 	bl	800676c <xTaskResumeAll>
 8005b3e:	2800      	cmp	r0, #0
 8005b40:	d190      	bne.n	8005a64 <xQueueGenericSend+0x148>
					portYIELD_WITHIN_API();
 8005b42:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005b46:	f8c9 3000 	str.w	r3, [r9]
 8005b4a:	f3bf 8f4f 	dsb	sy
 8005b4e:	f3bf 8f6f 	isb	sy
 8005b52:	e787      	b.n	8005a64 <xQueueGenericSend+0x148>
 8005b54:	f04f 0a00 	mov.w	sl, #0
 8005b58:	e70c      	b.n	8005974 <xQueueGenericSend+0x58>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b5a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005b5c:	2a00      	cmp	r2, #0
 8005b5e:	f43f aee7 	beq.w	8005930 <xQueueGenericSend+0x14>
 8005b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b66:	f383 8811 	msr	BASEPRI, r3
 8005b6a:	f3bf 8f6f 	isb	sy
 8005b6e:	f3bf 8f4f 	dsb	sy
 8005b72:	e7fe      	b.n	8005b72 <xQueueGenericSend+0x256>
 8005b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b78:	f383 8811 	msr	BASEPRI, r3
 8005b7c:	f3bf 8f6f 	isb	sy
 8005b80:	f3bf 8f4f 	dsb	sy
 8005b84:	e7fe      	b.n	8005b84 <xQueueGenericSend+0x268>
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005b86:	6c22      	ldr	r2, [r4, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b88:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005b8a:	bb02      	cbnz	r2, 8005bce <xQueueGenericSend+0x2b2>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b8c:	6826      	ldr	r6, [r4, #0]
 8005b8e:	3501      	adds	r5, #1
 8005b90:	b14e      	cbz	r6, 8005ba6 <xQueueGenericSend+0x28a>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005b92:	63a5      	str	r5, [r4, #56]	; 0x38
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d187      	bne.n	8005aaa <xQueueGenericSend+0x18e>
				taskEXIT_CRITICAL();
 8005b9a:	f001 fac5 	bl	8007128 <vPortExitCritical>
				return pdPASS;
 8005b9e:	2001      	movs	r0, #1
}
 8005ba0:	b005      	add	sp, #20
 8005ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005ba6:	68a0      	ldr	r0, [r4, #8]
 8005ba8:	f001 f808 	bl	8006bbc <xTaskPriorityDisinherit>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005bac:	63a5      	str	r5, [r4, #56]	; 0x38
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bae:	6a63      	ldr	r3, [r4, #36]	; 0x24
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005bb0:	60a6      	str	r6, [r4, #8]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	f47f af79 	bne.w	8005aaa <xQueueGenericSend+0x18e>
					else if( xYieldRequired != pdFALSE )
 8005bb8:	2800      	cmp	r0, #0
 8005bba:	d0ee      	beq.n	8005b9a <xQueueGenericSend+0x27e>
						queueYIELD_IF_USING_PREEMPTION();
 8005bbc:	4b3c      	ldr	r3, [pc, #240]	; (8005cb0 <xQueueGenericSend+0x394>)
 8005bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bc2:	601a      	str	r2, [r3, #0]
 8005bc4:	f3bf 8f4f 	dsb	sy
 8005bc8:	f3bf 8f6f 	isb	sy
 8005bcc:	e7e5      	b.n	8005b9a <xQueueGenericSend+0x27e>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005bce:	4631      	mov	r1, r6
 8005bd0:	68e0      	ldr	r0, [r4, #12]
 8005bd2:	f001 ff85 	bl	8007ae0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005bd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005bd8:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005bda:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005bdc:	425b      	negs	r3, r3
 8005bde:	441a      	add	r2, r3
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005be0:	428a      	cmp	r2, r1
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005be2:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005be4:	d216      	bcs.n	8005c14 <xQueueGenericSend+0x2f8>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005be6:	68a2      	ldr	r2, [r4, #8]
 8005be8:	4413      	add	r3, r2
 8005bea:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8005bec:	2f02      	cmp	r7, #2
 8005bee:	d011      	beq.n	8005c14 <xQueueGenericSend+0x2f8>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005bf0:	3501      	adds	r5, #1
 8005bf2:	63a5      	str	r5, [r4, #56]	; 0x38
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bf4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d0cf      	beq.n	8005b9a <xQueueGenericSend+0x27e>
 8005bfa:	e756      	b.n	8005aaa <xQueueGenericSend+0x18e>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005bfc:	68e0      	ldr	r0, [r4, #12]
 8005bfe:	f001 ff6f 	bl	8007ae0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005c02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c04:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c06:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005c08:	425b      	negs	r3, r3
 8005c0a:	441a      	add	r2, r3
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c0c:	428a      	cmp	r2, r1
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005c0e:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c10:	d2ec      	bcs.n	8005bec <xQueueGenericSend+0x2d0>
 8005c12:	e7e8      	b.n	8005be6 <xQueueGenericSend+0x2ca>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c14:	2d00      	cmp	r5, #0
 8005c16:	d1bc      	bne.n	8005b92 <xQueueGenericSend+0x276>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	63a3      	str	r3, [r4, #56]	; 0x38
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d0bb      	beq.n	8005b9a <xQueueGenericSend+0x27e>
 8005c22:	e742      	b.n	8005aaa <xQueueGenericSend+0x18e>
	taskENTER_CRITICAL();
 8005c24:	f001 fa5e 	bl	80070e4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8005c28:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8005c2c:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c2e:	2d00      	cmp	r5, #0
 8005c30:	dd16      	ble.n	8005c60 <xQueueGenericSend+0x344>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c34:	b1a3      	cbz	r3, 8005c60 <xQueueGenericSend+0x344>
 8005c36:	f104 0624 	add.w	r6, r4, #36	; 0x24
 8005c3a:	e005      	b.n	8005c48 <xQueueGenericSend+0x32c>
 8005c3c:	3d01      	subs	r5, #1
 8005c3e:	b2eb      	uxtb	r3, r5
 8005c40:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c42:	b16b      	cbz	r3, 8005c60 <xQueueGenericSend+0x344>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c46:	b15b      	cbz	r3, 8005c60 <xQueueGenericSend+0x344>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c48:	4630      	mov	r0, r6
 8005c4a:	f000 ff0b 	bl	8006a64 <xTaskRemoveFromEventList>
 8005c4e:	2800      	cmp	r0, #0
 8005c50:	d0f4      	beq.n	8005c3c <xQueueGenericSend+0x320>
						vTaskMissedYield();
 8005c52:	f000 ff9d 	bl	8006b90 <vTaskMissedYield>
 8005c56:	e7f1      	b.n	8005c3c <xQueueGenericSend+0x320>
					taskEXIT_CRITICAL();
 8005c58:	f001 fa66 	bl	8007128 <vPortExitCritical>
					return errQUEUE_FULL;
 8005c5c:	4628      	mov	r0, r5
 8005c5e:	e79f      	b.n	8005ba0 <xQueueGenericSend+0x284>
		pxQueue->cTxLock = queueUNLOCKED;
 8005c60:	23ff      	movs	r3, #255	; 0xff
 8005c62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8005c66:	f001 fa5f 	bl	8007128 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005c6a:	f001 fa3b 	bl	80070e4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005c6e:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8005c72:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c74:	2d00      	cmp	r5, #0
 8005c76:	dd12      	ble.n	8005c9e <xQueueGenericSend+0x382>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c78:	6923      	ldr	r3, [r4, #16]
 8005c7a:	b183      	cbz	r3, 8005c9e <xQueueGenericSend+0x382>
 8005c7c:	f104 0610 	add.w	r6, r4, #16
 8005c80:	e005      	b.n	8005c8e <xQueueGenericSend+0x372>
 8005c82:	3d01      	subs	r5, #1
 8005c84:	b2eb      	uxtb	r3, r5
 8005c86:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c88:	b14b      	cbz	r3, 8005c9e <xQueueGenericSend+0x382>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c8a:	6923      	ldr	r3, [r4, #16]
 8005c8c:	b13b      	cbz	r3, 8005c9e <xQueueGenericSend+0x382>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c8e:	4630      	mov	r0, r6
 8005c90:	f000 fee8 	bl	8006a64 <xTaskRemoveFromEventList>
 8005c94:	2800      	cmp	r0, #0
 8005c96:	d0f4      	beq.n	8005c82 <xQueueGenericSend+0x366>
					vTaskMissedYield();
 8005c98:	f000 ff7a 	bl	8006b90 <vTaskMissedYield>
 8005c9c:	e7f1      	b.n	8005c82 <xQueueGenericSend+0x366>
		pxQueue->cRxLock = queueUNLOCKED;
 8005c9e:	23ff      	movs	r3, #255	; 0xff
 8005ca0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8005ca4:	f001 fa40 	bl	8007128 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8005ca8:	f000 fd60 	bl	800676c <xTaskResumeAll>
			return errQUEUE_FULL;
 8005cac:	2000      	movs	r0, #0
 8005cae:	e777      	b.n	8005ba0 <xQueueGenericSend+0x284>
 8005cb0:	e000ed04 	.word	0xe000ed04

08005cb4 <xQueueReceive>:
{
 8005cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cb8:	b084      	sub	sp, #16
 8005cba:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8005cbc:	2800      	cmp	r0, #0
 8005cbe:	f000 8142 	beq.w	8005f46 <xQueueReceive+0x292>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cc2:	2900      	cmp	r1, #0
 8005cc4:	f000 8132 	beq.w	8005f2c <xQueueReceive+0x278>
 8005cc8:	4604      	mov	r4, r0
 8005cca:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ccc:	f000 ff66 	bl	8006b9c <xTaskGetSchedulerState>
 8005cd0:	b950      	cbnz	r0, 8005ce8 <xQueueReceive+0x34>
 8005cd2:	9b01      	ldr	r3, [sp, #4]
 8005cd4:	b143      	cbz	r3, 8005ce8 <xQueueReceive+0x34>
 8005cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cda:	f383 8811 	msr	BASEPRI, r3
 8005cde:	f3bf 8f6f 	isb	sy
 8005ce2:	f3bf 8f4f 	dsb	sy
 8005ce6:	e7fe      	b.n	8005ce6 <xQueueReceive+0x32>
		taskENTER_CRITICAL();
 8005ce8:	f001 f9fc 	bl	80070e4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cec:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005cee:	2d00      	cmp	r5, #0
 8005cf0:	f040 80ba 	bne.w	8005e68 <xQueueReceive+0x1b4>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005cf4:	9b01      	ldr	r3, [sp, #4]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d06a      	beq.n	8005dd0 <xQueueReceive+0x11c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005cfa:	a802      	add	r0, sp, #8
 8005cfc:	f000 fef6 	bl	8006aec <vTaskInternalSetTimeOutState>
					portYIELD_WITHIN_API();
 8005d00:	f8df 9274 	ldr.w	r9, [pc, #628]	; 8005f78 <xQueueReceive+0x2c4>
		prvLockQueue( pxQueue );
 8005d04:	46a8      	mov	r8, r5
 8005d06:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskEXIT_CRITICAL();
 8005d0a:	f001 fa0d 	bl	8007128 <vPortExitCritical>
		vTaskSuspendAll();
 8005d0e:	f000 fc79 	bl	8006604 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d12:	f001 f9e7 	bl	80070e4 <vPortEnterCritical>
 8005d16:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005d1a:	2bff      	cmp	r3, #255	; 0xff
 8005d1c:	bf08      	it	eq
 8005d1e:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8005d22:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005d26:	2bff      	cmp	r3, #255	; 0xff
 8005d28:	bf08      	it	eq
 8005d2a:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8005d2e:	f001 f9fb 	bl	8007128 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d32:	a901      	add	r1, sp, #4
 8005d34:	a802      	add	r0, sp, #8
 8005d36:	f000 fee5 	bl	8006b04 <xTaskCheckForTimeOut>
 8005d3a:	2800      	cmp	r0, #0
 8005d3c:	d14e      	bne.n	8005ddc <xQueueReceive+0x128>
	taskENTER_CRITICAL();
 8005d3e:	f001 f9d1 	bl	80070e4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005d42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	f000 80a7 	beq.w	8005e98 <xQueueReceive+0x1e4>
	taskEXIT_CRITICAL();
 8005d4a:	f001 f9ed 	bl	8007128 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005d4e:	f001 f9c9 	bl	80070e4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8005d52:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8005d56:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d58:	2d00      	cmp	r5, #0
 8005d5a:	dc0a      	bgt.n	8005d72 <xQueueReceive+0xbe>
 8005d5c:	e00c      	b.n	8005d78 <xQueueReceive+0xc4>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d5e:	4630      	mov	r0, r6
 8005d60:	f000 fe80 	bl	8006a64 <xTaskRemoveFromEventList>
 8005d64:	b108      	cbz	r0, 8005d6a <xQueueReceive+0xb6>
						vTaskMissedYield();
 8005d66:	f000 ff13 	bl	8006b90 <vTaskMissedYield>
 8005d6a:	3d01      	subs	r5, #1
 8005d6c:	b2eb      	uxtb	r3, r5
 8005d6e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d70:	b113      	cbz	r3, 8005d78 <xQueueReceive+0xc4>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d1f2      	bne.n	8005d5e <xQueueReceive+0xaa>
		pxQueue->cTxLock = queueUNLOCKED;
 8005d78:	23ff      	movs	r3, #255	; 0xff
 8005d7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8005d7e:	f001 f9d3 	bl	8007128 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005d82:	f001 f9af 	bl	80070e4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005d86:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8005d8a:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d8c:	2d00      	cmp	r5, #0
 8005d8e:	dd10      	ble.n	8005db2 <xQueueReceive+0xfe>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d90:	6923      	ldr	r3, [r4, #16]
 8005d92:	b173      	cbz	r3, 8005db2 <xQueueReceive+0xfe>
 8005d94:	f104 0a10 	add.w	sl, r4, #16
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d98:	4650      	mov	r0, sl
 8005d9a:	f000 fe63 	bl	8006a64 <xTaskRemoveFromEventList>
 8005d9e:	b108      	cbz	r0, 8005da4 <xQueueReceive+0xf0>
					vTaskMissedYield();
 8005da0:	f000 fef6 	bl	8006b90 <vTaskMissedYield>
 8005da4:	3d01      	subs	r5, #1
 8005da6:	b2eb      	uxtb	r3, r5
 8005da8:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005daa:	b113      	cbz	r3, 8005db2 <xQueueReceive+0xfe>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005dac:	6923      	ldr	r3, [r4, #16]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d1f2      	bne.n	8005d98 <xQueueReceive+0xe4>
		pxQueue->cRxLock = queueUNLOCKED;
 8005db2:	23ff      	movs	r3, #255	; 0xff
 8005db4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8005db8:	f001 f9b6 	bl	8007128 <vPortExitCritical>
				( void ) xTaskResumeAll();
 8005dbc:	f000 fcd6 	bl	800676c <xTaskResumeAll>
		taskENTER_CRITICAL();
 8005dc0:	f001 f990 	bl	80070e4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005dc4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005dc6:	2d00      	cmp	r5, #0
 8005dc8:	d14e      	bne.n	8005e68 <xQueueReceive+0x1b4>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005dca:	9b01      	ldr	r3, [sp, #4]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d19c      	bne.n	8005d0a <xQueueReceive+0x56>
					taskEXIT_CRITICAL();
 8005dd0:	f001 f9aa 	bl	8007128 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8005dd4:	2000      	movs	r0, #0
}
 8005dd6:	b004      	add	sp, #16
 8005dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskENTER_CRITICAL();
 8005ddc:	f001 f982 	bl	80070e4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8005de0:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8005de4:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005de6:	2d00      	cmp	r5, #0
 8005de8:	dc0a      	bgt.n	8005e00 <xQueueReceive+0x14c>
 8005dea:	e00c      	b.n	8005e06 <xQueueReceive+0x152>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005dec:	4630      	mov	r0, r6
 8005dee:	f000 fe39 	bl	8006a64 <xTaskRemoveFromEventList>
 8005df2:	b108      	cbz	r0, 8005df8 <xQueueReceive+0x144>
						vTaskMissedYield();
 8005df4:	f000 fecc 	bl	8006b90 <vTaskMissedYield>
 8005df8:	3d01      	subs	r5, #1
 8005dfa:	b2eb      	uxtb	r3, r5
 8005dfc:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005dfe:	b113      	cbz	r3, 8005e06 <xQueueReceive+0x152>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d1f2      	bne.n	8005dec <xQueueReceive+0x138>
		pxQueue->cTxLock = queueUNLOCKED;
 8005e06:	23ff      	movs	r3, #255	; 0xff
 8005e08:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8005e0c:	f001 f98c 	bl	8007128 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005e10:	f001 f968 	bl	80070e4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005e14:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8005e18:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e1a:	2d00      	cmp	r5, #0
 8005e1c:	dd11      	ble.n	8005e42 <xQueueReceive+0x18e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e1e:	6923      	ldr	r3, [r4, #16]
 8005e20:	b17b      	cbz	r3, 8005e42 <xQueueReceive+0x18e>
 8005e22:	f104 0a10 	add.w	sl, r4, #16
 8005e26:	e001      	b.n	8005e2c <xQueueReceive+0x178>
 8005e28:	6923      	ldr	r3, [r4, #16]
 8005e2a:	b153      	cbz	r3, 8005e42 <xQueueReceive+0x18e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e2c:	4650      	mov	r0, sl
 8005e2e:	f000 fe19 	bl	8006a64 <xTaskRemoveFromEventList>
 8005e32:	b108      	cbz	r0, 8005e38 <xQueueReceive+0x184>
					vTaskMissedYield();
 8005e34:	f000 feac 	bl	8006b90 <vTaskMissedYield>
 8005e38:	3d01      	subs	r5, #1
 8005e3a:	b2eb      	uxtb	r3, r5
 8005e3c:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1f2      	bne.n	8005e28 <xQueueReceive+0x174>
		pxQueue->cRxLock = queueUNLOCKED;
 8005e42:	23ff      	movs	r3, #255	; 0xff
 8005e44:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8005e48:	f001 f96e 	bl	8007128 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8005e4c:	f000 fc8e 	bl	800676c <xTaskResumeAll>
	taskENTER_CRITICAL();
 8005e50:	f001 f948 	bl	80070e4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005e54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d0ba      	beq.n	8005dd0 <xQueueReceive+0x11c>
	taskEXIT_CRITICAL();
 8005e5a:	f001 f965 	bl	8007128 <vPortExitCritical>
		taskENTER_CRITICAL();
 8005e5e:	f001 f941 	bl	80070e4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e62:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e64:	2d00      	cmp	r5, #0
 8005e66:	d0b0      	beq.n	8005dca <xQueueReceive+0x116>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005e68:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005e6a:	b152      	cbz	r2, 8005e82 <xQueueReceive+0x1ce>
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005e6c:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e70:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005e72:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e74:	60e1      	str	r1, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005e76:	bf24      	itt	cs
 8005e78:	6821      	ldrcs	r1, [r4, #0]
 8005e7a:	60e1      	strcs	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e7c:	4638      	mov	r0, r7
 8005e7e:	f001 fe2f 	bl	8007ae0 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005e82:	3d01      	subs	r5, #1
 8005e84:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e86:	6923      	ldr	r3, [r4, #16]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d165      	bne.n	8005f58 <xQueueReceive+0x2a4>
				taskEXIT_CRITICAL();
 8005e8c:	f001 f94c 	bl	8007128 <vPortExitCritical>
				return pdPASS;
 8005e90:	2001      	movs	r0, #1
}
 8005e92:	b004      	add	sp, #16
 8005e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskEXIT_CRITICAL();
 8005e98:	f001 f946 	bl	8007128 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005e9c:	9901      	ldr	r1, [sp, #4]
 8005e9e:	4630      	mov	r0, r6
 8005ea0:	f000 fd52 	bl	8006948 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8005ea4:	f001 f91e 	bl	80070e4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8005ea8:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8005eac:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005eae:	2d00      	cmp	r5, #0
 8005eb0:	dc0a      	bgt.n	8005ec8 <xQueueReceive+0x214>
 8005eb2:	e00c      	b.n	8005ece <xQueueReceive+0x21a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005eb4:	4630      	mov	r0, r6
 8005eb6:	f000 fdd5 	bl	8006a64 <xTaskRemoveFromEventList>
 8005eba:	b108      	cbz	r0, 8005ec0 <xQueueReceive+0x20c>
						vTaskMissedYield();
 8005ebc:	f000 fe68 	bl	8006b90 <vTaskMissedYield>
 8005ec0:	3d01      	subs	r5, #1
 8005ec2:	b2eb      	uxtb	r3, r5
 8005ec4:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ec6:	b113      	cbz	r3, 8005ece <xQueueReceive+0x21a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ec8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d1f2      	bne.n	8005eb4 <xQueueReceive+0x200>
		pxQueue->cTxLock = queueUNLOCKED;
 8005ece:	23ff      	movs	r3, #255	; 0xff
 8005ed0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8005ed4:	f001 f928 	bl	8007128 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005ed8:	f001 f904 	bl	80070e4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005edc:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8005ee0:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ee2:	2d00      	cmp	r5, #0
 8005ee4:	dd10      	ble.n	8005f08 <xQueueReceive+0x254>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ee6:	6923      	ldr	r3, [r4, #16]
 8005ee8:	b173      	cbz	r3, 8005f08 <xQueueReceive+0x254>
 8005eea:	f104 0a10 	add.w	sl, r4, #16
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005eee:	4650      	mov	r0, sl
 8005ef0:	f000 fdb8 	bl	8006a64 <xTaskRemoveFromEventList>
 8005ef4:	b108      	cbz	r0, 8005efa <xQueueReceive+0x246>
					vTaskMissedYield();
 8005ef6:	f000 fe4b 	bl	8006b90 <vTaskMissedYield>
 8005efa:	3d01      	subs	r5, #1
 8005efc:	b2eb      	uxtb	r3, r5
 8005efe:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f00:	b113      	cbz	r3, 8005f08 <xQueueReceive+0x254>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f02:	6923      	ldr	r3, [r4, #16]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d1f2      	bne.n	8005eee <xQueueReceive+0x23a>
		pxQueue->cRxLock = queueUNLOCKED;
 8005f08:	23ff      	movs	r3, #255	; 0xff
 8005f0a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8005f0e:	f001 f90b 	bl	8007128 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8005f12:	f000 fc2b 	bl	800676c <xTaskResumeAll>
 8005f16:	2800      	cmp	r0, #0
 8005f18:	d1a1      	bne.n	8005e5e <xQueueReceive+0x1aa>
					portYIELD_WITHIN_API();
 8005f1a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005f1e:	f8c9 3000 	str.w	r3, [r9]
 8005f22:	f3bf 8f4f 	dsb	sy
 8005f26:	f3bf 8f6f 	isb	sy
 8005f2a:	e798      	b.n	8005e5e <xQueueReceive+0x1aa>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f2c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	f43f aeca 	beq.w	8005cc8 <xQueueReceive+0x14>
 8005f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f38:	f383 8811 	msr	BASEPRI, r3
 8005f3c:	f3bf 8f6f 	isb	sy
 8005f40:	f3bf 8f4f 	dsb	sy
 8005f44:	e7fe      	b.n	8005f44 <xQueueReceive+0x290>
 8005f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f4a:	f383 8811 	msr	BASEPRI, r3
 8005f4e:	f3bf 8f6f 	isb	sy
 8005f52:	f3bf 8f4f 	dsb	sy
 8005f56:	e7fe      	b.n	8005f56 <xQueueReceive+0x2a2>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f58:	f104 0010 	add.w	r0, r4, #16
 8005f5c:	f000 fd82 	bl	8006a64 <xTaskRemoveFromEventList>
 8005f60:	2800      	cmp	r0, #0
 8005f62:	d093      	beq.n	8005e8c <xQueueReceive+0x1d8>
						queueYIELD_IF_USING_PREEMPTION();
 8005f64:	4b04      	ldr	r3, [pc, #16]	; (8005f78 <xQueueReceive+0x2c4>)
 8005f66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f6a:	601a      	str	r2, [r3, #0]
 8005f6c:	f3bf 8f4f 	dsb	sy
 8005f70:	f3bf 8f6f 	isb	sy
 8005f74:	e78a      	b.n	8005e8c <xQueueReceive+0x1d8>
 8005f76:	bf00      	nop
 8005f78:	e000ed04 	.word	0xe000ed04

08005f7c <vQueueAddToRegistry>:

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005f7c:	4b13      	ldr	r3, [pc, #76]	; (8005fcc <vQueueAddToRegistry+0x50>)
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	b17a      	cbz	r2, 8005fa2 <vQueueAddToRegistry+0x26>
 8005f82:	689a      	ldr	r2, [r3, #8]
 8005f84:	b1b2      	cbz	r2, 8005fb4 <vQueueAddToRegistry+0x38>
 8005f86:	691a      	ldr	r2, [r3, #16]
 8005f88:	b1b2      	cbz	r2, 8005fb8 <vQueueAddToRegistry+0x3c>
 8005f8a:	699a      	ldr	r2, [r3, #24]
 8005f8c:	b1b2      	cbz	r2, 8005fbc <vQueueAddToRegistry+0x40>
 8005f8e:	6a1a      	ldr	r2, [r3, #32]
 8005f90:	b1b2      	cbz	r2, 8005fc0 <vQueueAddToRegistry+0x44>
 8005f92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f94:	b1b2      	cbz	r2, 8005fc4 <vQueueAddToRegistry+0x48>
 8005f96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f98:	b112      	cbz	r2, 8005fa0 <vQueueAddToRegistry+0x24>
 8005f9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f9c:	b1a2      	cbz	r2, 8005fc8 <vQueueAddToRegistry+0x4c>
 8005f9e:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005fa0:	2206      	movs	r2, #6
	{
 8005fa2:	b410      	push	{r4}
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005fa4:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005fa8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005fac:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005fae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005fb2:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	e7f4      	b.n	8005fa2 <vQueueAddToRegistry+0x26>
 8005fb8:	2202      	movs	r2, #2
 8005fba:	e7f2      	b.n	8005fa2 <vQueueAddToRegistry+0x26>
 8005fbc:	2203      	movs	r2, #3
 8005fbe:	e7f0      	b.n	8005fa2 <vQueueAddToRegistry+0x26>
 8005fc0:	2204      	movs	r2, #4
 8005fc2:	e7ee      	b.n	8005fa2 <vQueueAddToRegistry+0x26>
 8005fc4:	2205      	movs	r2, #5
 8005fc6:	e7ec      	b.n	8005fa2 <vQueueAddToRegistry+0x26>
 8005fc8:	2207      	movs	r2, #7
 8005fca:	e7ea      	b.n	8005fa2 <vQueueAddToRegistry+0x26>
 8005fcc:	20004dbc 	.word	0x20004dbc

08005fd0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005fd0:	b570      	push	{r4, r5, r6, lr}
 8005fd2:	4605      	mov	r5, r0
 8005fd4:	460c      	mov	r4, r1
 8005fd6:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005fd8:	f001 f884 	bl	80070e4 <vPortEnterCritical>
 8005fdc:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 8005fe0:	2bff      	cmp	r3, #255	; 0xff
 8005fe2:	bf04      	itt	eq
 8005fe4:	2300      	moveq	r3, #0
 8005fe6:	f885 3044 	strbeq.w	r3, [r5, #68]	; 0x44
 8005fea:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 8005fee:	2bff      	cmp	r3, #255	; 0xff
 8005ff0:	bf04      	itt	eq
 8005ff2:	2300      	moveq	r3, #0
 8005ff4:	f885 3045 	strbeq.w	r3, [r5, #69]	; 0x45
 8005ff8:	f001 f896 	bl	8007128 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005ffc:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005ffe:	b92b      	cbnz	r3, 800600c <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006000:	4632      	mov	r2, r6
 8006002:	4621      	mov	r1, r4
 8006004:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8006008:	f000 fce2 	bl	80069d0 <vTaskPlaceOnEventListRestricted>
	taskENTER_CRITICAL();
 800600c:	f001 f86a 	bl	80070e4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8006010:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8006014:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006016:	2c00      	cmp	r4, #0
 8006018:	dd16      	ble.n	8006048 <vQueueWaitForMessageRestricted+0x78>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800601a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800601c:	b1a3      	cbz	r3, 8006048 <vQueueWaitForMessageRestricted+0x78>
 800601e:	f105 0624 	add.w	r6, r5, #36	; 0x24
 8006022:	e005      	b.n	8006030 <vQueueWaitForMessageRestricted+0x60>
 8006024:	3c01      	subs	r4, #1
 8006026:	b2e3      	uxtb	r3, r4
 8006028:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800602a:	b16b      	cbz	r3, 8006048 <vQueueWaitForMessageRestricted+0x78>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800602c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800602e:	b15b      	cbz	r3, 8006048 <vQueueWaitForMessageRestricted+0x78>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006030:	4630      	mov	r0, r6
 8006032:	f000 fd17 	bl	8006a64 <xTaskRemoveFromEventList>
 8006036:	2800      	cmp	r0, #0
 8006038:	d0f4      	beq.n	8006024 <vQueueWaitForMessageRestricted+0x54>
 800603a:	3c01      	subs	r4, #1
						vTaskMissedYield();
 800603c:	f000 fda8 	bl	8006b90 <vTaskMissedYield>
 8006040:	b2e3      	uxtb	r3, r4
 8006042:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1f1      	bne.n	800602c <vQueueWaitForMessageRestricted+0x5c>
		pxQueue->cTxLock = queueUNLOCKED;
 8006048:	23ff      	movs	r3, #255	; 0xff
 800604a:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 800604e:	f001 f86b 	bl	8007128 <vPortExitCritical>
	taskENTER_CRITICAL();
 8006052:	f001 f847 	bl	80070e4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8006056:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 800605a:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800605c:	2c00      	cmp	r4, #0
 800605e:	dd16      	ble.n	800608e <vQueueWaitForMessageRestricted+0xbe>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006060:	692b      	ldr	r3, [r5, #16]
 8006062:	b1a3      	cbz	r3, 800608e <vQueueWaitForMessageRestricted+0xbe>
 8006064:	f105 0610 	add.w	r6, r5, #16
 8006068:	e005      	b.n	8006076 <vQueueWaitForMessageRestricted+0xa6>
 800606a:	3c01      	subs	r4, #1
 800606c:	b2e3      	uxtb	r3, r4
 800606e:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006070:	b16b      	cbz	r3, 800608e <vQueueWaitForMessageRestricted+0xbe>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006072:	692b      	ldr	r3, [r5, #16]
 8006074:	b15b      	cbz	r3, 800608e <vQueueWaitForMessageRestricted+0xbe>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006076:	4630      	mov	r0, r6
 8006078:	f000 fcf4 	bl	8006a64 <xTaskRemoveFromEventList>
 800607c:	2800      	cmp	r0, #0
 800607e:	d0f4      	beq.n	800606a <vQueueWaitForMessageRestricted+0x9a>
 8006080:	3c01      	subs	r4, #1
					vTaskMissedYield();
 8006082:	f000 fd85 	bl	8006b90 <vTaskMissedYield>
 8006086:	b2e3      	uxtb	r3, r4
 8006088:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1f1      	bne.n	8006072 <vQueueWaitForMessageRestricted+0xa2>
		pxQueue->cRxLock = queueUNLOCKED;
 800608e:	23ff      	movs	r3, #255	; 0xff
 8006090:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
 8006094:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8006098:	f001 b846 	b.w	8007128 <vPortExitCritical>

0800609c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800609c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060a0:	4605      	mov	r5, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80060a2:	f001 f81f 	bl	80070e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80060a6:	4a34      	ldr	r2, [pc, #208]	; (8006178 <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
 80060a8:	4e34      	ldr	r6, [pc, #208]	; (800617c <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
 80060aa:	6813      	ldr	r3, [r2, #0]
 80060ac:	3301      	adds	r3, #1
 80060ae:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80060b0:	6833      	ldr	r3, [r6, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d031      	beq.n	800611a <prvAddNewTaskToReadyList+0x7e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80060b6:	4c32      	ldr	r4, [pc, #200]	; (8006180 <prvAddNewTaskToReadyList+0xe4>)
 80060b8:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80060ba:	6823      	ldr	r3, [r4, #0]
 80060bc:	b333      	cbz	r3, 800610c <prvAddNewTaskToReadyList+0x70>
 80060be:	4f31      	ldr	r7, [pc, #196]	; (8006184 <prvAddNewTaskToReadyList+0xe8>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80060c0:	4931      	ldr	r1, [pc, #196]	; (8006188 <prvAddNewTaskToReadyList+0xec>)
		uxTaskNumber++;
 80060c2:	4a32      	ldr	r2, [pc, #200]	; (800618c <prvAddNewTaskToReadyList+0xf0>)
		prvAddTaskToReadyList( pxNewTCB );
 80060c4:	f8d1 c000 	ldr.w	ip, [r1]
		uxTaskNumber++;
 80060c8:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80060ca:	4584      	cmp	ip, r0
		uxTaskNumber++;
 80060cc:	f103 0301 	add.w	r3, r3, #1
		prvAddTaskToReadyList( pxNewTCB );
 80060d0:	bf38      	it	cc
 80060d2:	6008      	strcc	r0, [r1, #0]
 80060d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80060d8:	646b      	str	r3, [r5, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 80060da:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 80060de:	1d29      	adds	r1, r5, #4
		uxTaskNumber++;
 80060e0:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80060e2:	f7ff fb43 	bl	800576c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80060e6:	f001 f81f 	bl	8007128 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80060ea:	6823      	ldr	r3, [r4, #0]
 80060ec:	b163      	cbz	r3, 8006108 <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80060ee:	6832      	ldr	r2, [r6, #0]
 80060f0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80060f2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d207      	bcs.n	8006108 <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80060f8:	4b25      	ldr	r3, [pc, #148]	; (8006190 <prvAddNewTaskToReadyList+0xf4>)
 80060fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060fe:	601a      	str	r2, [r3, #0]
 8006100:	f3bf 8f4f 	dsb	sy
 8006104:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006108:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800610c:	6833      	ldr	r3, [r6, #0]
 800610e:	4f1d      	ldr	r7, [pc, #116]	; (8006184 <prvAddNewTaskToReadyList+0xe8>)
 8006110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006112:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
 8006114:	bf98      	it	ls
 8006116:	6035      	strls	r5, [r6, #0]
 8006118:	e7d2      	b.n	80060c0 <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
 800611a:	6035      	str	r5, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800611c:	6813      	ldr	r3, [r2, #0]
 800611e:	2b01      	cmp	r3, #1
 8006120:	d003      	beq.n	800612a <prvAddNewTaskToReadyList+0x8e>
 8006122:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8006124:	4f17      	ldr	r7, [pc, #92]	; (8006184 <prvAddNewTaskToReadyList+0xe8>)
 8006126:	4c16      	ldr	r4, [pc, #88]	; (8006180 <prvAddNewTaskToReadyList+0xe4>)
 8006128:	e7ca      	b.n	80060c0 <prvAddNewTaskToReadyList+0x24>
 800612a:	4f16      	ldr	r7, [pc, #88]	; (8006184 <prvAddNewTaskToReadyList+0xe8>)
 800612c:	463c      	mov	r4, r7
 800612e:	f507 688c 	add.w	r8, r7, #1120	; 0x460
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006132:	4620      	mov	r0, r4
 8006134:	3414      	adds	r4, #20
 8006136:	f7ff fb09 	bl	800574c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800613a:	45a0      	cmp	r8, r4
 800613c:	d1f9      	bne.n	8006132 <prvAddNewTaskToReadyList+0x96>
	}

	vListInitialise( &xDelayedTaskList1 );
 800613e:	f8df 9068 	ldr.w	r9, [pc, #104]	; 80061a8 <prvAddNewTaskToReadyList+0x10c>
	vListInitialise( &xDelayedTaskList2 );
 8006142:	f8df 8068 	ldr.w	r8, [pc, #104]	; 80061ac <prvAddNewTaskToReadyList+0x110>
 8006146:	4c0e      	ldr	r4, [pc, #56]	; (8006180 <prvAddNewTaskToReadyList+0xe4>)
	vListInitialise( &xDelayedTaskList1 );
 8006148:	4648      	mov	r0, r9
 800614a:	f7ff faff 	bl	800574c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800614e:	4640      	mov	r0, r8
 8006150:	f7ff fafc 	bl	800574c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006154:	480f      	ldr	r0, [pc, #60]	; (8006194 <prvAddNewTaskToReadyList+0xf8>)
 8006156:	f7ff faf9 	bl	800574c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800615a:	480f      	ldr	r0, [pc, #60]	; (8006198 <prvAddNewTaskToReadyList+0xfc>)
 800615c:	f7ff faf6 	bl	800574c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006160:	480e      	ldr	r0, [pc, #56]	; (800619c <prvAddNewTaskToReadyList+0x100>)
 8006162:	f7ff faf3 	bl	800574c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006166:	4a0e      	ldr	r2, [pc, #56]	; (80061a0 <prvAddNewTaskToReadyList+0x104>)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006168:	4b0e      	ldr	r3, [pc, #56]	; (80061a4 <prvAddNewTaskToReadyList+0x108>)
	pxDelayedTaskList = &xDelayedTaskList1;
 800616a:	f8c2 9000 	str.w	r9, [r2]
 800616e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006170:	f8c3 8000 	str.w	r8, [r3]
 8006174:	e7a4      	b.n	80060c0 <prvAddNewTaskToReadyList+0x24>
 8006176:	bf00      	nop
 8006178:	20000f14 	.word	0x20000f14
 800617c:	20000aa8 	.word	0x20000aa8
 8006180:	20000f70 	.word	0x20000f70
 8006184:	20000ab4 	.word	0x20000ab4
 8006188:	20000f28 	.word	0x20000f28
 800618c:	20000f24 	.word	0x20000f24
 8006190:	e000ed04 	.word	0xe000ed04
 8006194:	20000f5c 	.word	0x20000f5c
 8006198:	20000f88 	.word	0x20000f88
 800619c:	20000f74 	.word	0x20000f74
 80061a0:	20000aac 	.word	0x20000aac
 80061a4:	20000ab0 	.word	0x20000ab0
 80061a8:	20000f2c 	.word	0x20000f2c
 80061ac:	20000f40 	.word	0x20000f40

080061b0 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80061b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80061b6:	ea4f 0a82 	mov.w	sl, r2, lsl #2
 80061ba:	4652      	mov	r2, sl
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80061bc:	4680      	mov	r8, r0
 80061be:	460e      	mov	r6, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80061c0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80061c2:	21a5      	movs	r1, #165	; 0xa5
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80061c4:	4699      	mov	r9, r3
 80061c6:	e9dd 5708 	ldrd	r5, r7, [sp, #32]
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80061ca:	f001 fc94 	bl	8007af6 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80061ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80061d0:	f1aa 0a04 	sub.w	sl, sl, #4
 80061d4:	449a      	add	sl, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80061d6:	f02a 0a07 	bic.w	sl, sl, #7
	if( pcName != NULL )
 80061da:	b17e      	cbz	r6, 80061fc <prvInitialiseNewTask.isra.2+0x4c>
 80061dc:	1e73      	subs	r3, r6, #1
 80061de:	f104 0234 	add.w	r2, r4, #52	; 0x34
 80061e2:	360f      	adds	r6, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80061e4:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80061e8:	f802 1b01 	strb.w	r1, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 80061ec:	7819      	ldrb	r1, [r3, #0]
 80061ee:	b109      	cbz	r1, 80061f4 <prvInitialiseNewTask.isra.2+0x44>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80061f0:	42b3      	cmp	r3, r6
 80061f2:	d1f7      	bne.n	80061e4 <prvInitialiseNewTask.isra.2+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80061f4:	2300      	movs	r3, #0
 80061f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061fa:	e001      	b.n	8006200 <prvInitialiseNewTask.isra.2+0x50>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80061fc:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
 8006200:	2d37      	cmp	r5, #55	; 0x37
 8006202:	bf28      	it	cs
 8006204:	2537      	movcs	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8006206:	2600      	movs	r6, #0
	pxNewTCB->uxPriority = uxPriority;
 8006208:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
 800620a:	e9c4 5613 	strd	r5, r6, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800620e:	1d20      	adds	r0, r4, #4
 8006210:	f7ff faa8 	bl	8005764 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006214:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006218:	f104 0018 	add.w	r0, r4, #24
 800621c:	f7ff faa2 	bl	8005764 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8006220:	6566      	str	r6, [r4, #84]	; 0x54
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006222:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006224:	6124      	str	r4, [r4, #16]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006226:	f884 6058 	strb.w	r6, [r4, #88]	; 0x58
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800622a:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800622c:	464a      	mov	r2, r9
 800622e:	4641      	mov	r1, r8
 8006230:	4650      	mov	r0, sl
 8006232:	f000 ff2f 	bl	8007094 <pxPortInitialiseStack>
 8006236:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8006238:	b107      	cbz	r7, 800623c <prvInitialiseNewTask.isra.2+0x8c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800623a:	603c      	str	r4, [r7, #0]
}
 800623c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006240 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006242:	4b16      	ldr	r3, [pc, #88]	; (800629c <prvAddCurrentTaskToDelayedList+0x5c>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006244:	4e16      	ldr	r6, [pc, #88]	; (80062a0 <prvAddCurrentTaskToDelayedList+0x60>)
const TickType_t xConstTickCount = xTickCount;
 8006246:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006248:	6833      	ldr	r3, [r6, #0]
{
 800624a:	4605      	mov	r5, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800624c:	1d18      	adds	r0, r3, #4
{
 800624e:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006250:	f7ff fab6 	bl	80057c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006254:	1c6b      	adds	r3, r5, #1
 8006256:	4633      	mov	r3, r6
 8006258:	d107      	bne.n	800626a <prvAddCurrentTaskToDelayedList+0x2a>
 800625a:	b137      	cbz	r7, 800626a <prvAddCurrentTaskToDelayedList+0x2a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800625c:	6831      	ldr	r1, [r6, #0]
 800625e:	4811      	ldr	r0, [pc, #68]	; (80062a4 <prvAddCurrentTaskToDelayedList+0x64>)
 8006260:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006262:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006266:	f7ff ba81 	b.w	800576c <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	1964      	adds	r4, r4, r5
 800626e:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8006270:	d307      	bcc.n	8006282 <prvAddCurrentTaskToDelayedList+0x42>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006272:	4a0d      	ldr	r2, [pc, #52]	; (80062a8 <prvAddCurrentTaskToDelayedList+0x68>)
 8006274:	6810      	ldr	r0, [r2, #0]
 8006276:	6819      	ldr	r1, [r3, #0]
}
 8006278:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800627c:	3104      	adds	r1, #4
 800627e:	f7ff ba85 	b.w	800578c <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006282:	4a0a      	ldr	r2, [pc, #40]	; (80062ac <prvAddCurrentTaskToDelayedList+0x6c>)
 8006284:	6810      	ldr	r0, [r2, #0]
 8006286:	6819      	ldr	r1, [r3, #0]
 8006288:	3104      	adds	r1, #4
 800628a:	f7ff fa7f 	bl	800578c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800628e:	4b08      	ldr	r3, [pc, #32]	; (80062b0 <prvAddCurrentTaskToDelayedList+0x70>)
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8006294:	bf88      	it	hi
 8006296:	601c      	strhi	r4, [r3, #0]
}
 8006298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800629a:	bf00      	nop
 800629c:	20000f9c 	.word	0x20000f9c
 80062a0:	20000aa8 	.word	0x20000aa8
 80062a4:	20000f74 	.word	0x20000f74
 80062a8:	20000ab0 	.word	0x20000ab0
 80062ac:	20000aac 	.word	0x20000aac
 80062b0:	20000f54 	.word	0x20000f54

080062b4 <prvIdleTask>:
{
 80062b4:	f8df a090 	ldr.w	sl, [pc, #144]	; 8006348 <prvIdleTask+0x94>
 80062b8:	4e21      	ldr	r6, [pc, #132]	; (8006340 <prvIdleTask+0x8c>)
 80062ba:	4d22      	ldr	r5, [pc, #136]	; (8006344 <prvIdleTask+0x90>)
 80062bc:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800634c <prvIdleTask+0x98>
				taskYIELD();
 80062c0:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8006350 <prvIdleTask+0x9c>
{
 80062c4:	b580      	push	{r7, lr}
				taskYIELD();
 80062c6:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80062ca:	682b      	ldr	r3, [r5, #0]
 80062cc:	b343      	cbz	r3, 8006320 <prvIdleTask+0x6c>
			taskENTER_CRITICAL();
 80062ce:	f000 ff09 	bl	80070e4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062d2:	f8da 300c 	ldr.w	r3, [sl, #12]
 80062d6:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062d8:	1d20      	adds	r0, r4, #4
 80062da:	f7ff fa71 	bl	80057c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80062de:	6833      	ldr	r3, [r6, #0]
 80062e0:	3b01      	subs	r3, #1
 80062e2:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 80062e4:	682b      	ldr	r3, [r5, #0]
 80062e6:	3b01      	subs	r3, #1
 80062e8:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
 80062ea:	f000 ff1d 	bl	8007128 <vPortExitCritical>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80062ee:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 80062f2:	b163      	cbz	r3, 800630e <prvIdleTask+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d01e      	beq.n	8006336 <prvIdleTask+0x82>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80062f8:	2b02      	cmp	r3, #2
 80062fa:	d0e6      	beq.n	80062ca <prvIdleTask+0x16>
 80062fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006300:	f383 8811 	msr	BASEPRI, r3
 8006304:	f3bf 8f6f 	isb	sy
 8006308:	f3bf 8f4f 	dsb	sy
 800630c:	e7fe      	b.n	800630c <prvIdleTask+0x58>
				vPortFree( pxTCB->pxStack );
 800630e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8006310:	f001 f8c0 	bl	8007494 <vPortFree>
				vPortFree( pxTCB );
 8006314:	4620      	mov	r0, r4
 8006316:	f001 f8bd 	bl	8007494 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800631a:	682b      	ldr	r3, [r5, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d1d6      	bne.n	80062ce <prvIdleTask+0x1a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006320:	f8d9 3000 	ldr.w	r3, [r9]
 8006324:	2b01      	cmp	r3, #1
 8006326:	d9d0      	bls.n	80062ca <prvIdleTask+0x16>
				taskYIELD();
 8006328:	f8c8 7000 	str.w	r7, [r8]
 800632c:	f3bf 8f4f 	dsb	sy
 8006330:	f3bf 8f6f 	isb	sy
 8006334:	e7c9      	b.n	80062ca <prvIdleTask+0x16>
				vPortFree( pxTCB );
 8006336:	4620      	mov	r0, r4
 8006338:	f001 f8ac 	bl	8007494 <vPortFree>
 800633c:	e7c5      	b.n	80062ca <prvIdleTask+0x16>
 800633e:	bf00      	nop
 8006340:	20000f14 	.word	0x20000f14
 8006344:	20000f18 	.word	0x20000f18
 8006348:	20000f88 	.word	0x20000f88
 800634c:	20000ab4 	.word	0x20000ab4
 8006350:	e000ed04 	.word	0xe000ed04

08006354 <xTaskCreateStatic>:
	{
 8006354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006356:	b087      	sub	sp, #28
 8006358:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	; 0x30
 800635c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
		configASSERT( puxStackBuffer != NULL );
 800635e:	b1bd      	cbz	r5, 8006390 <xTaskCreateStatic+0x3c>
		configASSERT( pxTaskBuffer != NULL );
 8006360:	b16c      	cbz	r4, 800637e <xTaskCreateStatic+0x2a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8006362:	275c      	movs	r7, #92	; 0x5c
 8006364:	9705      	str	r7, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006366:	9f05      	ldr	r7, [sp, #20]
 8006368:	2f5c      	cmp	r7, #92	; 0x5c
 800636a:	d01a      	beq.n	80063a2 <xTaskCreateStatic+0x4e>
 800636c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006370:	f383 8811 	msr	BASEPRI, r3
 8006374:	f3bf 8f6f 	isb	sy
 8006378:	f3bf 8f4f 	dsb	sy
 800637c:	e7fe      	b.n	800637c <xTaskCreateStatic+0x28>
 800637e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006382:	f383 8811 	msr	BASEPRI, r3
 8006386:	f3bf 8f6f 	isb	sy
 800638a:	f3bf 8f4f 	dsb	sy
 800638e:	e7fe      	b.n	800638e <xTaskCreateStatic+0x3a>
 8006390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006394:	f383 8811 	msr	BASEPRI, r3
 8006398:	f3bf 8f6f 	isb	sy
 800639c:	f3bf 8f4f 	dsb	sy
 80063a0:	e7fe      	b.n	80063a0 <xTaskCreateStatic+0x4c>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80063a2:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80063a4:	2702      	movs	r7, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80063a6:	ad04      	add	r5, sp, #16
 80063a8:	9402      	str	r4, [sp, #8]
 80063aa:	9600      	str	r6, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80063ac:	f884 7059 	strb.w	r7, [r4, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80063b0:	9501      	str	r5, [sp, #4]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80063b2:	9d05      	ldr	r5, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80063b4:	f7ff fefc 	bl	80061b0 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 80063b8:	4620      	mov	r0, r4
 80063ba:	f7ff fe6f 	bl	800609c <prvAddNewTaskToReadyList>
	}
 80063be:	9804      	ldr	r0, [sp, #16]
 80063c0:	b007      	add	sp, #28
 80063c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080063c4 <xTaskCreate>:
	{
 80063c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80063c8:	0096      	lsls	r6, r2, #2
	{
 80063ca:	4680      	mov	r8, r0
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80063cc:	4630      	mov	r0, r6
	{
 80063ce:	460d      	mov	r5, r1
 80063d0:	4699      	mov	r9, r3
 80063d2:	9f09      	ldr	r7, [sp, #36]	; 0x24
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80063d4:	f000 ffd2 	bl	800737c <pvPortMalloc>
			if( pxStack != NULL )
 80063d8:	2800      	cmp	r0, #0
 80063da:	f000 809f 	beq.w	800651c <xTaskCreate+0x158>
 80063de:	4682      	mov	sl, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80063e0:	205c      	movs	r0, #92	; 0x5c
 80063e2:	f000 ffcb 	bl	800737c <pvPortMalloc>
				if( pxNewTCB != NULL )
 80063e6:	4604      	mov	r4, r0
 80063e8:	2800      	cmp	r0, #0
 80063ea:	f000 8090 	beq.w	800650e <xTaskCreate+0x14a>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80063ee:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 80063f0:	f8c0 a030 	str.w	sl, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80063f4:	4632      	mov	r2, r6
 80063f6:	4650      	mov	r0, sl
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80063f8:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80063fc:	21a5      	movs	r1, #165	; 0xa5
 80063fe:	f001 fb7a 	bl	8007af6 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006402:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006404:	3e04      	subs	r6, #4
 8006406:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006408:	f026 0a07 	bic.w	sl, r6, #7
	if( pcName != NULL )
 800640c:	2d00      	cmp	r5, #0
 800640e:	d07b      	beq.n	8006508 <xTaskCreate+0x144>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006410:	782b      	ldrb	r3, [r5, #0]
 8006412:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8006416:	782b      	ldrb	r3, [r5, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d04d      	beq.n	80064b8 <xTaskCreate+0xf4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800641c:	786b      	ldrb	r3, [r5, #1]
 800641e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
			if( pcName[ x ] == ( char ) 0x00 )
 8006422:	786b      	ldrb	r3, [r5, #1]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d047      	beq.n	80064b8 <xTaskCreate+0xf4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006428:	78ab      	ldrb	r3, [r5, #2]
 800642a:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
			if( pcName[ x ] == ( char ) 0x00 )
 800642e:	78ab      	ldrb	r3, [r5, #2]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d041      	beq.n	80064b8 <xTaskCreate+0xf4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006434:	78eb      	ldrb	r3, [r5, #3]
 8006436:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
			if( pcName[ x ] == ( char ) 0x00 )
 800643a:	78eb      	ldrb	r3, [r5, #3]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d03b      	beq.n	80064b8 <xTaskCreate+0xf4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006440:	792b      	ldrb	r3, [r5, #4]
 8006442:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			if( pcName[ x ] == ( char ) 0x00 )
 8006446:	792b      	ldrb	r3, [r5, #4]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d035      	beq.n	80064b8 <xTaskCreate+0xf4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800644c:	796b      	ldrb	r3, [r5, #5]
 800644e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
			if( pcName[ x ] == ( char ) 0x00 )
 8006452:	796b      	ldrb	r3, [r5, #5]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d02f      	beq.n	80064b8 <xTaskCreate+0xf4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006458:	79ab      	ldrb	r3, [r5, #6]
 800645a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
 800645e:	79ab      	ldrb	r3, [r5, #6]
 8006460:	b353      	cbz	r3, 80064b8 <xTaskCreate+0xf4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006462:	79eb      	ldrb	r3, [r5, #7]
 8006464:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
 8006468:	79eb      	ldrb	r3, [r5, #7]
 800646a:	b32b      	cbz	r3, 80064b8 <xTaskCreate+0xf4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800646c:	7a2b      	ldrb	r3, [r5, #8]
 800646e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
 8006472:	7a2b      	ldrb	r3, [r5, #8]
 8006474:	b303      	cbz	r3, 80064b8 <xTaskCreate+0xf4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006476:	7a6b      	ldrb	r3, [r5, #9]
 8006478:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
 800647c:	7a6b      	ldrb	r3, [r5, #9]
 800647e:	b1db      	cbz	r3, 80064b8 <xTaskCreate+0xf4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006480:	7aab      	ldrb	r3, [r5, #10]
 8006482:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
 8006486:	7aab      	ldrb	r3, [r5, #10]
 8006488:	b1b3      	cbz	r3, 80064b8 <xTaskCreate+0xf4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800648a:	7aeb      	ldrb	r3, [r5, #11]
 800648c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
 8006490:	7aeb      	ldrb	r3, [r5, #11]
 8006492:	b18b      	cbz	r3, 80064b8 <xTaskCreate+0xf4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006494:	7b2b      	ldrb	r3, [r5, #12]
 8006496:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			if( pcName[ x ] == ( char ) 0x00 )
 800649a:	7b2b      	ldrb	r3, [r5, #12]
 800649c:	b163      	cbz	r3, 80064b8 <xTaskCreate+0xf4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800649e:	7b6b      	ldrb	r3, [r5, #13]
 80064a0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
			if( pcName[ x ] == ( char ) 0x00 )
 80064a4:	7b6b      	ldrb	r3, [r5, #13]
 80064a6:	b13b      	cbz	r3, 80064b8 <xTaskCreate+0xf4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80064a8:	7bab      	ldrb	r3, [r5, #14]
 80064aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
			if( pcName[ x ] == ( char ) 0x00 )
 80064ae:	7bab      	ldrb	r3, [r5, #14]
 80064b0:	b113      	cbz	r3, 80064b8 <xTaskCreate+0xf4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80064b2:	7beb      	ldrb	r3, [r5, #15]
 80064b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80064b8:	2300      	movs	r3, #0
 80064ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064be:	9d08      	ldr	r5, [sp, #32]
 80064c0:	2d37      	cmp	r5, #55	; 0x37
 80064c2:	bf28      	it	cs
 80064c4:	2537      	movcs	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 80064c6:	2600      	movs	r6, #0
	pxNewTCB->uxPriority = uxPriority;
 80064c8:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
 80064ca:	e9c4 5613 	strd	r5, r6, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80064ce:	1d20      	adds	r0, r4, #4
 80064d0:	f7ff f948 	bl	8005764 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064d4:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80064d8:	f104 0018 	add.w	r0, r4, #24
 80064dc:	f7ff f942 	bl	8005764 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80064e0:	6566      	str	r6, [r4, #84]	; 0x54
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064e2:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80064e4:	6124      	str	r4, [r4, #16]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80064e6:	f884 6058 	strb.w	r6, [r4, #88]	; 0x58
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80064ea:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80064ec:	464a      	mov	r2, r9
 80064ee:	4641      	mov	r1, r8
 80064f0:	4650      	mov	r0, sl
 80064f2:	f000 fdcf 	bl	8007094 <pxPortInitialiseStack>
 80064f6:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80064f8:	b107      	cbz	r7, 80064fc <xTaskCreate+0x138>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80064fa:	603c      	str	r4, [r7, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 80064fc:	4620      	mov	r0, r4
 80064fe:	f7ff fdcd 	bl	800609c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006502:	2001      	movs	r0, #1
	}
 8006504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006508:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 800650c:	e7d7      	b.n	80064be <xTaskCreate+0xfa>
					vPortFree( pxStack );
 800650e:	4650      	mov	r0, sl
 8006510:	f000 ffc0 	bl	8007494 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006514:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8006518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800651c:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8006520:	e7f0      	b.n	8006504 <xTaskCreate+0x140>
 8006522:	bf00      	nop

08006524 <vTaskStartScheduler>:
{
 8006524:	b570      	push	{r4, r5, r6, lr}
 8006526:	b08a      	sub	sp, #40	; 0x28
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006528:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800652a:	aa07      	add	r2, sp, #28
 800652c:	a906      	add	r1, sp, #24
 800652e:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006530:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006534:	f7ff f8ec 	bl	8005710 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006538:	e9dd 5305 	ldrd	r5, r3, [sp, #20]
		configASSERT( puxStackBuffer != NULL );
 800653c:	b1c3      	cbz	r3, 8006570 <vTaskStartScheduler+0x4c>
		configASSERT( pxTaskBuffer != NULL );
 800653e:	b175      	cbz	r5, 800655e <vTaskStartScheduler+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8006540:	225c      	movs	r2, #92	; 0x5c
 8006542:	9209      	str	r2, [sp, #36]	; 0x24
			configASSERT( xSize == sizeof( TCB_t ) );
 8006544:	9909      	ldr	r1, [sp, #36]	; 0x24
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006546:	9a07      	ldr	r2, [sp, #28]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006548:	295c      	cmp	r1, #92	; 0x5c
 800654a:	d01a      	beq.n	8006582 <vTaskStartScheduler+0x5e>
 800654c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006550:	f383 8811 	msr	BASEPRI, r3
 8006554:	f3bf 8f6f 	isb	sy
 8006558:	f3bf 8f4f 	dsb	sy
 800655c:	e7fe      	b.n	800655c <vTaskStartScheduler+0x38>
 800655e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006562:	f383 8811 	msr	BASEPRI, r3
 8006566:	f3bf 8f6f 	isb	sy
 800656a:	f3bf 8f4f 	dsb	sy
 800656e:	e7fe      	b.n	800656e <vTaskStartScheduler+0x4a>
 8006570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006574:	f383 8811 	msr	BASEPRI, r3
 8006578:	f3bf 8f6f 	isb	sy
 800657c:	f3bf 8f4f 	dsb	sy
 8006580:	e7fe      	b.n	8006580 <vTaskStartScheduler+0x5c>
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006582:	2002      	movs	r0, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006584:	a908      	add	r1, sp, #32
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006586:	632b      	str	r3, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006588:	f885 0059 	strb.w	r0, [r5, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800658c:	4623      	mov	r3, r4
 800658e:	e9cd 4100 	strd	r4, r1, [sp]
 8006592:	4817      	ldr	r0, [pc, #92]	; (80065f0 <vTaskStartScheduler+0xcc>)
 8006594:	4917      	ldr	r1, [pc, #92]	; (80065f4 <vTaskStartScheduler+0xd0>)
 8006596:	9502      	str	r5, [sp, #8]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006598:	9e09      	ldr	r6, [sp, #36]	; 0x24
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800659a:	f7ff fe09 	bl	80061b0 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 800659e:	4628      	mov	r0, r5
 80065a0:	f7ff fd7c 	bl	800609c <prvAddNewTaskToReadyList>
		return xReturn;
 80065a4:	9b08      	ldr	r3, [sp, #32]
		if( xIdleTaskHandle != NULL )
 80065a6:	b12b      	cbz	r3, 80065b4 <vTaskStartScheduler+0x90>
			xReturn = xTimerCreateTimerTask();
 80065a8:	f000 fcd8 	bl	8006f5c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80065ac:	2801      	cmp	r0, #1
 80065ae:	d00c      	beq.n	80065ca <vTaskStartScheduler+0xa6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80065b0:	3001      	adds	r0, #1
 80065b2:	d001      	beq.n	80065b8 <vTaskStartScheduler+0x94>
}
 80065b4:	b00a      	add	sp, #40	; 0x28
 80065b6:	bd70      	pop	{r4, r5, r6, pc}
 80065b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065bc:	f383 8811 	msr	BASEPRI, r3
 80065c0:	f3bf 8f6f 	isb	sy
 80065c4:	f3bf 8f4f 	dsb	sy
 80065c8:	e7fe      	b.n	80065c8 <vTaskStartScheduler+0xa4>
 80065ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ce:	f383 8811 	msr	BASEPRI, r3
 80065d2:	f3bf 8f6f 	isb	sy
 80065d6:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80065da:	4907      	ldr	r1, [pc, #28]	; (80065f8 <vTaskStartScheduler+0xd4>)
		xSchedulerRunning = pdTRUE;
 80065dc:	4a07      	ldr	r2, [pc, #28]	; (80065fc <vTaskStartScheduler+0xd8>)
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80065de:	4b08      	ldr	r3, [pc, #32]	; (8006600 <vTaskStartScheduler+0xdc>)
		xNextTaskUnblockTime = portMAX_DELAY;
 80065e0:	f04f 35ff 	mov.w	r5, #4294967295
 80065e4:	600d      	str	r5, [r1, #0]
		xSchedulerRunning = pdTRUE;
 80065e6:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80065e8:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 80065ea:	f000 fe17 	bl	800721c <xPortStartScheduler>
 80065ee:	e7e1      	b.n	80065b4 <vTaskStartScheduler+0x90>
 80065f0:	080062b5 	.word	0x080062b5
 80065f4:	0800a134 	.word	0x0800a134
 80065f8:	20000f54 	.word	0x20000f54
 80065fc:	20000f70 	.word	0x20000f70
 8006600:	20000f9c 	.word	0x20000f9c

08006604 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8006604:	4a02      	ldr	r2, [pc, #8]	; (8006610 <vTaskSuspendAll+0xc>)
 8006606:	6813      	ldr	r3, [r2, #0]
 8006608:	3301      	adds	r3, #1
 800660a:	6013      	str	r3, [r2, #0]
}
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop
 8006610:	20000f20 	.word	0x20000f20

08006614 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8006614:	4b01      	ldr	r3, [pc, #4]	; (800661c <xTaskGetTickCount+0x8>)
 8006616:	6818      	ldr	r0, [r3, #0]
}
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop
 800661c:	20000f9c 	.word	0x20000f9c

08006620 <xTaskIncrementTick>:
{
 8006620:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006624:	4b46      	ldr	r3, [pc, #280]	; (8006740 <xTaskIncrementTick+0x120>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	b9cb      	cbnz	r3, 800665e <xTaskIncrementTick+0x3e>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800662a:	4b46      	ldr	r3, [pc, #280]	; (8006744 <xTaskIncrementTick+0x124>)
 800662c:	681f      	ldr	r7, [r3, #0]
 800662e:	3701      	adds	r7, #1
		xTickCount = xConstTickCount;
 8006630:	601f      	str	r7, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006632:	b30f      	cbz	r7, 8006678 <xTaskIncrementTick+0x58>
 8006634:	4e44      	ldr	r6, [pc, #272]	; (8006748 <xTaskIncrementTick+0x128>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006636:	6833      	ldr	r3, [r6, #0]
 8006638:	42bb      	cmp	r3, r7
 800663a:	d92b      	bls.n	8006694 <xTaskIncrementTick+0x74>
 800663c:	f8df 8124 	ldr.w	r8, [pc, #292]	; 8006764 <xTaskIncrementTick+0x144>
 8006640:	f8df 9124 	ldr.w	r9, [pc, #292]	; 8006768 <xTaskIncrementTick+0x148>
BaseType_t xSwitchRequired = pdFALSE;
 8006644:	2500      	movs	r5, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006646:	f8d9 3000 	ldr.w	r3, [r9]
 800664a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800664c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	f858 3003 	ldr.w	r3, [r8, r3]
				xSwitchRequired = pdTRUE;
 8006656:	2b02      	cmp	r3, #2
 8006658:	bf28      	it	cs
 800665a:	2501      	movcs	r5, #1
 800665c:	e004      	b.n	8006668 <xTaskIncrementTick+0x48>
		++uxPendedTicks;
 800665e:	4a3b      	ldr	r2, [pc, #236]	; (800674c <xTaskIncrementTick+0x12c>)
 8006660:	6813      	ldr	r3, [r2, #0]
 8006662:	3301      	adds	r3, #1
 8006664:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8006666:	2500      	movs	r5, #0
		if( xYieldPending != pdFALSE )
 8006668:	4b39      	ldr	r3, [pc, #228]	; (8006750 <xTaskIncrementTick+0x130>)
 800666a:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 800666c:	2b00      	cmp	r3, #0
}
 800666e:	bf0c      	ite	eq
 8006670:	4628      	moveq	r0, r5
 8006672:	2001      	movne	r0, #1
 8006674:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8006678:	4c36      	ldr	r4, [pc, #216]	; (8006754 <xTaskIncrementTick+0x134>)
 800667a:	6823      	ldr	r3, [r4, #0]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d045      	beq.n	800670e <xTaskIncrementTick+0xee>
 8006682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006686:	f383 8811 	msr	BASEPRI, r3
 800668a:	f3bf 8f6f 	isb	sy
 800668e:	f3bf 8f4f 	dsb	sy
 8006692:	e7fe      	b.n	8006692 <xTaskIncrementTick+0x72>
 8006694:	4c2f      	ldr	r4, [pc, #188]	; (8006754 <xTaskIncrementTick+0x134>)
 8006696:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8006764 <xTaskIncrementTick+0x144>
 800669a:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8006768 <xTaskIncrementTick+0x148>
BaseType_t xSwitchRequired = pdFALSE;
 800669e:	2500      	movs	r5, #0
 80066a0:	e02b      	b.n	80066fa <xTaskIncrementTick+0xda>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066a2:	6823      	ldr	r3, [r4, #0]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	f8d3 a00c 	ldr.w	sl, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80066aa:	f8da 2004 	ldr.w	r2, [sl, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066ae:	f10a 0b04 	add.w	fp, sl, #4
					if( xConstTickCount < xItemValue )
 80066b2:	4297      	cmp	r7, r2
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066b4:	4658      	mov	r0, fp
					if( xConstTickCount < xItemValue )
 80066b6:	d328      	bcc.n	800670a <xTaskIncrementTick+0xea>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066b8:	f7ff f882 	bl	80057c0 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80066bc:	f8da 2028 	ldr.w	r2, [sl, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80066c0:	f10a 0018 	add.w	r0, sl, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80066c4:	b10a      	cbz	r2, 80066ca <xTaskIncrementTick+0xaa>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80066c6:	f7ff f87b 	bl	80057c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80066ca:	4b23      	ldr	r3, [pc, #140]	; (8006758 <xTaskIncrementTick+0x138>)
 80066cc:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	bf88      	it	hi
 80066d6:	4b20      	ldrhi	r3, [pc, #128]	; (8006758 <xTaskIncrementTick+0x138>)
 80066d8:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 80066dc:	4659      	mov	r1, fp
 80066de:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 80066e2:	bf88      	it	hi
 80066e4:	601a      	strhi	r2, [r3, #0]
 80066e6:	f7ff f841 	bl	800576c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066ea:	f8d9 1000 	ldr.w	r1, [r9]
 80066ee:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
 80066f2:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80066f4:	429a      	cmp	r2, r3
 80066f6:	bf28      	it	cs
 80066f8:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066fa:	6823      	ldr	r3, [r4, #0]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d1cf      	bne.n	80066a2 <xTaskIncrementTick+0x82>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006702:	f04f 33ff 	mov.w	r3, #4294967295
 8006706:	6033      	str	r3, [r6, #0]
					break;
 8006708:	e79d      	b.n	8006646 <xTaskIncrementTick+0x26>
						xNextTaskUnblockTime = xItemValue;
 800670a:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800670c:	e79b      	b.n	8006646 <xTaskIncrementTick+0x26>
			taskSWITCH_DELAYED_LISTS();
 800670e:	4b13      	ldr	r3, [pc, #76]	; (800675c <xTaskIncrementTick+0x13c>)
 8006710:	6821      	ldr	r1, [r4, #0]
 8006712:	4a13      	ldr	r2, [pc, #76]	; (8006760 <xTaskIncrementTick+0x140>)
 8006714:	6818      	ldr	r0, [r3, #0]
 8006716:	6020      	str	r0, [r4, #0]
 8006718:	6019      	str	r1, [r3, #0]
 800671a:	6813      	ldr	r3, [r2, #0]
 800671c:	3301      	adds	r3, #1
 800671e:	6013      	str	r3, [r2, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006720:	6823      	ldr	r3, [r4, #0]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	b923      	cbnz	r3, 8006730 <xTaskIncrementTick+0x110>
		xNextTaskUnblockTime = portMAX_DELAY;
 8006726:	4e08      	ldr	r6, [pc, #32]	; (8006748 <xTaskIncrementTick+0x128>)
 8006728:	f04f 33ff 	mov.w	r3, #4294967295
 800672c:	6033      	str	r3, [r6, #0]
 800672e:	e782      	b.n	8006636 <xTaskIncrementTick+0x16>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006730:	6823      	ldr	r3, [r4, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006732:	4e05      	ldr	r6, [pc, #20]	; (8006748 <xTaskIncrementTick+0x128>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006734:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	6033      	str	r3, [r6, #0]
 800673c:	e77b      	b.n	8006636 <xTaskIncrementTick+0x16>
 800673e:	bf00      	nop
 8006740:	20000f20 	.word	0x20000f20
 8006744:	20000f9c 	.word	0x20000f9c
 8006748:	20000f54 	.word	0x20000f54
 800674c:	20000f1c 	.word	0x20000f1c
 8006750:	20000fa0 	.word	0x20000fa0
 8006754:	20000aac 	.word	0x20000aac
 8006758:	20000f28 	.word	0x20000f28
 800675c:	20000ab0 	.word	0x20000ab0
 8006760:	20000f58 	.word	0x20000f58
 8006764:	20000ab4 	.word	0x20000ab4
 8006768:	20000aa8 	.word	0x20000aa8

0800676c <xTaskResumeAll>:
{
 800676c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	configASSERT( uxSchedulerSuspended );
 8006770:	4c36      	ldr	r4, [pc, #216]	; (800684c <xTaskResumeAll+0xe0>)
 8006772:	6823      	ldr	r3, [r4, #0]
 8006774:	b943      	cbnz	r3, 8006788 <xTaskResumeAll+0x1c>
 8006776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800677a:	f383 8811 	msr	BASEPRI, r3
 800677e:	f3bf 8f6f 	isb	sy
 8006782:	f3bf 8f4f 	dsb	sy
 8006786:	e7fe      	b.n	8006786 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8006788:	f000 fcac 	bl	80070e4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800678c:	6823      	ldr	r3, [r4, #0]
 800678e:	3b01      	subs	r3, #1
 8006790:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006792:	6824      	ldr	r4, [r4, #0]
 8006794:	bb64      	cbnz	r4, 80067f0 <xTaskResumeAll+0x84>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006796:	4b2e      	ldr	r3, [pc, #184]	; (8006850 <xTaskResumeAll+0xe4>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	b34b      	cbz	r3, 80067f0 <xTaskResumeAll+0x84>
 800679c:	4e2d      	ldr	r6, [pc, #180]	; (8006854 <xTaskResumeAll+0xe8>)
 800679e:	4f2e      	ldr	r7, [pc, #184]	; (8006858 <xTaskResumeAll+0xec>)
					prvAddTaskToReadyList( pxTCB );
 80067a0:	4d2e      	ldr	r5, [pc, #184]	; (800685c <xTaskResumeAll+0xf0>)
 80067a2:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8006870 <xTaskResumeAll+0x104>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80067a6:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8006874 <xTaskResumeAll+0x108>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	b333      	cbz	r3, 80067fc <xTaskResumeAll+0x90>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067b2:	f104 0a04 	add.w	sl, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80067b6:	f104 0018 	add.w	r0, r4, #24
 80067ba:	f7ff f801 	bl	80057c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067be:	4650      	mov	r0, sl
 80067c0:	f7fe fffe 	bl	80057c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80067c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80067c6:	682a      	ldr	r2, [r5, #0]
 80067c8:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 80067cc:	4293      	cmp	r3, r2
 80067ce:	4651      	mov	r1, sl
 80067d0:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80067d4:	bf88      	it	hi
 80067d6:	602b      	strhi	r3, [r5, #0]
 80067d8:	f7fe ffc8 	bl	800576c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80067dc:	f8d8 3000 	ldr.w	r3, [r8]
 80067e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80067e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e4:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 80067e6:	f04f 0301 	mov.w	r3, #1
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80067ea:	d3de      	bcc.n	80067aa <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
 80067ec:	6033      	str	r3, [r6, #0]
 80067ee:	e7dc      	b.n	80067aa <xTaskResumeAll+0x3e>
BaseType_t xAlreadyYielded = pdFALSE;
 80067f0:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80067f2:	f000 fc99 	bl	8007128 <vPortExitCritical>
}
 80067f6:	4620      	mov	r0, r4
 80067f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if( pxTCB != NULL )
 80067fc:	b13c      	cbz	r4, 800680e <xTaskResumeAll+0xa2>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067fe:	4b18      	ldr	r3, [pc, #96]	; (8006860 <xTaskResumeAll+0xf4>)
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	6812      	ldr	r2, [r2, #0]
 8006804:	b9da      	cbnz	r2, 800683e <xTaskResumeAll+0xd2>
		xNextTaskUnblockTime = portMAX_DELAY;
 8006806:	4b17      	ldr	r3, [pc, #92]	; (8006864 <xTaskResumeAll+0xf8>)
 8006808:	f04f 32ff 	mov.w	r2, #4294967295
 800680c:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800680e:	4d16      	ldr	r5, [pc, #88]	; (8006868 <xTaskResumeAll+0xfc>)
 8006810:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006812:	b13c      	cbz	r4, 8006824 <xTaskResumeAll+0xb8>
								xYieldPending = pdTRUE;
 8006814:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8006816:	f7ff ff03 	bl	8006620 <xTaskIncrementTick>
 800681a:	b100      	cbz	r0, 800681e <xTaskResumeAll+0xb2>
								xYieldPending = pdTRUE;
 800681c:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800681e:	3c01      	subs	r4, #1
 8006820:	d1f9      	bne.n	8006816 <xTaskResumeAll+0xaa>
						uxPendedTicks = 0;
 8006822:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8006824:	6833      	ldr	r3, [r6, #0]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d0e2      	beq.n	80067f0 <xTaskResumeAll+0x84>
					taskYIELD_IF_USING_PREEMPTION();
 800682a:	4b10      	ldr	r3, [pc, #64]	; (800686c <xTaskResumeAll+0x100>)
 800682c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006830:	601a      	str	r2, [r3, #0]
 8006832:	f3bf 8f4f 	dsb	sy
 8006836:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800683a:	2401      	movs	r4, #1
 800683c:	e7d9      	b.n	80067f2 <xTaskResumeAll+0x86>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800683e:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006840:	4b08      	ldr	r3, [pc, #32]	; (8006864 <xTaskResumeAll+0xf8>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006842:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006844:	68d2      	ldr	r2, [r2, #12]
 8006846:	6852      	ldr	r2, [r2, #4]
 8006848:	601a      	str	r2, [r3, #0]
 800684a:	e7e0      	b.n	800680e <xTaskResumeAll+0xa2>
 800684c:	20000f20 	.word	0x20000f20
 8006850:	20000f14 	.word	0x20000f14
 8006854:	20000fa0 	.word	0x20000fa0
 8006858:	20000f5c 	.word	0x20000f5c
 800685c:	20000f28 	.word	0x20000f28
 8006860:	20000aac 	.word	0x20000aac
 8006864:	20000f54 	.word	0x20000f54
 8006868:	20000f1c 	.word	0x20000f1c
 800686c:	e000ed04 	.word	0xe000ed04
 8006870:	20000ab4 	.word	0x20000ab4
 8006874:	20000aa8 	.word	0x20000aa8

08006878 <vTaskDelay>:
	{
 8006878:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800687a:	b198      	cbz	r0, 80068a4 <vTaskDelay+0x2c>
			configASSERT( uxSchedulerSuspended == 0 );
 800687c:	4b0e      	ldr	r3, [pc, #56]	; (80068b8 <vTaskDelay+0x40>)
 800687e:	6819      	ldr	r1, [r3, #0]
 8006880:	b141      	cbz	r1, 8006894 <vTaskDelay+0x1c>
 8006882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006886:	f383 8811 	msr	BASEPRI, r3
 800688a:	f3bf 8f6f 	isb	sy
 800688e:	f3bf 8f4f 	dsb	sy
 8006892:	e7fe      	b.n	8006892 <vTaskDelay+0x1a>
	++uxSchedulerSuspended;
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	3201      	adds	r2, #1
 8006898:	601a      	str	r2, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800689a:	f7ff fcd1 	bl	8006240 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800689e:	f7ff ff65 	bl	800676c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80068a2:	b938      	cbnz	r0, 80068b4 <vTaskDelay+0x3c>
			portYIELD_WITHIN_API();
 80068a4:	4b05      	ldr	r3, [pc, #20]	; (80068bc <vTaskDelay+0x44>)
 80068a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068aa:	601a      	str	r2, [r3, #0]
 80068ac:	f3bf 8f4f 	dsb	sy
 80068b0:	f3bf 8f6f 	isb	sy
	}
 80068b4:	bd08      	pop	{r3, pc}
 80068b6:	bf00      	nop
 80068b8:	20000f20 	.word	0x20000f20
 80068bc:	e000ed04 	.word	0xe000ed04

080068c0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80068c0:	4b1c      	ldr	r3, [pc, #112]	; (8006934 <vTaskSwitchContext+0x74>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	bb13      	cbnz	r3, 800690c <vTaskSwitchContext+0x4c>
		xYieldPending = pdFALSE;
 80068c6:	4a1c      	ldr	r2, [pc, #112]	; (8006938 <vTaskSwitchContext+0x78>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068c8:	481c      	ldr	r0, [pc, #112]	; (800693c <vTaskSwitchContext+0x7c>)
{
 80068ca:	b430      	push	{r4, r5}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068cc:	4c1c      	ldr	r4, [pc, #112]	; (8006940 <vTaskSwitchContext+0x80>)
		xYieldPending = pdFALSE;
 80068ce:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068d0:	6822      	ldr	r2, [r4, #0]
 80068d2:	0093      	lsls	r3, r2, #2
 80068d4:	1899      	adds	r1, r3, r2
 80068d6:	0089      	lsls	r1, r1, #2
 80068d8:	5841      	ldr	r1, [r0, r1]
 80068da:	b939      	cbnz	r1, 80068ec <vTaskSwitchContext+0x2c>
 80068dc:	b1d2      	cbz	r2, 8006914 <vTaskSwitchContext+0x54>
 80068de:	3a01      	subs	r2, #1
 80068e0:	0093      	lsls	r3, r2, #2
 80068e2:	1899      	adds	r1, r3, r2
 80068e4:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 80068e8:	2900      	cmp	r1, #0
 80068ea:	d0f7      	beq.n	80068dc <vTaskSwitchContext+0x1c>
 80068ec:	4413      	add	r3, r2
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	18c5      	adds	r5, r0, r3
 80068f2:	3308      	adds	r3, #8
 80068f4:	6869      	ldr	r1, [r5, #4]
 80068f6:	6849      	ldr	r1, [r1, #4]
 80068f8:	6069      	str	r1, [r5, #4]
 80068fa:	4403      	add	r3, r0
 80068fc:	4299      	cmp	r1, r3
 80068fe:	d012      	beq.n	8006926 <vTaskSwitchContext+0x66>
 8006900:	4b10      	ldr	r3, [pc, #64]	; (8006944 <vTaskSwitchContext+0x84>)
 8006902:	68c9      	ldr	r1, [r1, #12]
 8006904:	6019      	str	r1, [r3, #0]
 8006906:	6022      	str	r2, [r4, #0]
}
 8006908:	bc30      	pop	{r4, r5}
 800690a:	4770      	bx	lr
		xYieldPending = pdTRUE;
 800690c:	4b0a      	ldr	r3, [pc, #40]	; (8006938 <vTaskSwitchContext+0x78>)
 800690e:	2201      	movs	r2, #1
 8006910:	601a      	str	r2, [r3, #0]
 8006912:	4770      	bx	lr
 8006914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006918:	f383 8811 	msr	BASEPRI, r3
 800691c:	f3bf 8f6f 	isb	sy
 8006920:	f3bf 8f4f 	dsb	sy
 8006924:	e7fe      	b.n	8006924 <vTaskSwitchContext+0x64>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006926:	2314      	movs	r3, #20
 8006928:	fb03 0002 	mla	r0, r3, r2, r0
 800692c:	6849      	ldr	r1, [r1, #4]
 800692e:	6041      	str	r1, [r0, #4]
 8006930:	e7e6      	b.n	8006900 <vTaskSwitchContext+0x40>
 8006932:	bf00      	nop
 8006934:	20000f20 	.word	0x20000f20
 8006938:	20000fa0 	.word	0x20000fa0
 800693c:	20000ab4 	.word	0x20000ab4
 8006940:	20000f28 	.word	0x20000f28
 8006944:	20000aa8 	.word	0x20000aa8

08006948 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8006948:	b940      	cbnz	r0, 800695c <vTaskPlaceOnEventList+0x14>
 800694a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800694e:	f383 8811 	msr	BASEPRI, r3
 8006952:	f3bf 8f6f 	isb	sy
 8006956:	f3bf 8f4f 	dsb	sy
 800695a:	e7fe      	b.n	800695a <vTaskPlaceOnEventList+0x12>
{
 800695c:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800695e:	4d16      	ldr	r5, [pc, #88]	; (80069b8 <vTaskPlaceOnEventList+0x70>)
 8006960:	460c      	mov	r4, r1
 8006962:	6829      	ldr	r1, [r5, #0]
 8006964:	3118      	adds	r1, #24
 8006966:	f7fe ff11 	bl	800578c <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 800696a:	4b14      	ldr	r3, [pc, #80]	; (80069bc <vTaskPlaceOnEventList+0x74>)
 800696c:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800696e:	6828      	ldr	r0, [r5, #0]
 8006970:	3004      	adds	r0, #4
 8006972:	f7fe ff25 	bl	80057c0 <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006976:	1c63      	adds	r3, r4, #1
 8006978:	d00f      	beq.n	800699a <vTaskPlaceOnEventList+0x52>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800697a:	682b      	ldr	r3, [r5, #0]
 800697c:	19a4      	adds	r4, r4, r6
 800697e:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006980:	d212      	bcs.n	80069a8 <vTaskPlaceOnEventList+0x60>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006982:	4b0f      	ldr	r3, [pc, #60]	; (80069c0 <vTaskPlaceOnEventList+0x78>)
 8006984:	6818      	ldr	r0, [r3, #0]
 8006986:	6829      	ldr	r1, [r5, #0]
 8006988:	3104      	adds	r1, #4
 800698a:	f7fe feff 	bl	800578c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800698e:	4b0d      	ldr	r3, [pc, #52]	; (80069c4 <vTaskPlaceOnEventList+0x7c>)
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8006994:	bf38      	it	cc
 8006996:	601c      	strcc	r4, [r3, #0]
}
 8006998:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800699a:	6829      	ldr	r1, [r5, #0]
 800699c:	480a      	ldr	r0, [pc, #40]	; (80069c8 <vTaskPlaceOnEventList+0x80>)
 800699e:	3104      	adds	r1, #4
}
 80069a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069a4:	f7fe bee2 	b.w	800576c <vListInsertEnd>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069a8:	4b08      	ldr	r3, [pc, #32]	; (80069cc <vTaskPlaceOnEventList+0x84>)
 80069aa:	6818      	ldr	r0, [r3, #0]
 80069ac:	6829      	ldr	r1, [r5, #0]
}
 80069ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069b2:	3104      	adds	r1, #4
 80069b4:	f7fe beea 	b.w	800578c <vListInsert>
 80069b8:	20000aa8 	.word	0x20000aa8
 80069bc:	20000f9c 	.word	0x20000f9c
 80069c0:	20000aac 	.word	0x20000aac
 80069c4:	20000f54 	.word	0x20000f54
 80069c8:	20000f74 	.word	0x20000f74
 80069cc:	20000ab0 	.word	0x20000ab0

080069d0 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
 80069d0:	b1a8      	cbz	r0, 80069fe <vTaskPlaceOnEventListRestricted+0x2e>
	{
 80069d2:	b570      	push	{r4, r5, r6, lr}
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069d4:	4d1d      	ldr	r5, [pc, #116]	; (8006a4c <vTaskPlaceOnEventListRestricted+0x7c>)
 80069d6:	460c      	mov	r4, r1
 80069d8:	6829      	ldr	r1, [r5, #0]
 80069da:	4616      	mov	r6, r2
 80069dc:	3118      	adds	r1, #24
 80069de:	f7fe fec5 	bl	800576c <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
 80069e2:	4b1b      	ldr	r3, [pc, #108]	; (8006a50 <vTaskPlaceOnEventListRestricted+0x80>)
		if( xWaitIndefinitely != pdFALSE )
 80069e4:	b1a6      	cbz	r6, 8006a10 <vTaskPlaceOnEventListRestricted+0x40>
const TickType_t xConstTickCount = xTickCount;
 80069e6:	681b      	ldr	r3, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069e8:	6828      	ldr	r0, [r5, #0]
 80069ea:	3004      	adds	r0, #4
 80069ec:	f7fe fee8 	bl	80057c0 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069f0:	6829      	ldr	r1, [r5, #0]
 80069f2:	4818      	ldr	r0, [pc, #96]	; (8006a54 <vTaskPlaceOnEventListRestricted+0x84>)
 80069f4:	3104      	adds	r1, #4
	}
 80069f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069fa:	f7fe beb7 	b.w	800576c <vListInsertEnd>
 80069fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a02:	f383 8811 	msr	BASEPRI, r3
 8006a06:	f3bf 8f6f 	isb	sy
 8006a0a:	f3bf 8f4f 	dsb	sy
 8006a0e:	e7fe      	b.n	8006a0e <vTaskPlaceOnEventListRestricted+0x3e>
const TickType_t xConstTickCount = xTickCount;
 8006a10:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a12:	6828      	ldr	r0, [r5, #0]
 8006a14:	3004      	adds	r0, #4
 8006a16:	f7fe fed3 	bl	80057c0 <uxListRemove>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006a1a:	682b      	ldr	r3, [r5, #0]
 8006a1c:	19a4      	adds	r4, r4, r6
 8006a1e:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006a20:	d20b      	bcs.n	8006a3a <vTaskPlaceOnEventListRestricted+0x6a>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a22:	4b0d      	ldr	r3, [pc, #52]	; (8006a58 <vTaskPlaceOnEventListRestricted+0x88>)
 8006a24:	6818      	ldr	r0, [r3, #0]
 8006a26:	6829      	ldr	r1, [r5, #0]
 8006a28:	3104      	adds	r1, #4
 8006a2a:	f7fe feaf 	bl	800578c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006a2e:	4b0b      	ldr	r3, [pc, #44]	; (8006a5c <vTaskPlaceOnEventListRestricted+0x8c>)
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8006a34:	bf38      	it	cc
 8006a36:	601c      	strcc	r4, [r3, #0]
	}
 8006a38:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a3a:	4b09      	ldr	r3, [pc, #36]	; (8006a60 <vTaskPlaceOnEventListRestricted+0x90>)
 8006a3c:	6818      	ldr	r0, [r3, #0]
 8006a3e:	6829      	ldr	r1, [r5, #0]
	}
 8006a40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a44:	3104      	adds	r1, #4
 8006a46:	f7fe bea1 	b.w	800578c <vListInsert>
 8006a4a:	bf00      	nop
 8006a4c:	20000aa8 	.word	0x20000aa8
 8006a50:	20000f9c 	.word	0x20000f9c
 8006a54:	20000f74 	.word	0x20000f74
 8006a58:	20000aac 	.word	0x20000aac
 8006a5c:	20000f54 	.word	0x20000f54
 8006a60:	20000ab0 	.word	0x20000ab0

08006a64 <xTaskRemoveFromEventList>:
{
 8006a64:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a66:	68c3      	ldr	r3, [r0, #12]
 8006a68:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8006a6a:	b324      	cbz	r4, 8006ab6 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006a6c:	f104 0518 	add.w	r5, r4, #24
 8006a70:	4628      	mov	r0, r5
 8006a72:	f7fe fea5 	bl	80057c0 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a76:	4b17      	ldr	r3, [pc, #92]	; (8006ad4 <xTaskRemoveFromEventList+0x70>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	bb2b      	cbnz	r3, 8006ac8 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006a7c:	1d25      	adds	r5, r4, #4
 8006a7e:	4628      	mov	r0, r5
 8006a80:	f7fe fe9e 	bl	80057c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006a84:	4a14      	ldr	r2, [pc, #80]	; (8006ad8 <xTaskRemoveFromEventList+0x74>)
 8006a86:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006a88:	6811      	ldr	r1, [r2, #0]
 8006a8a:	4814      	ldr	r0, [pc, #80]	; (8006adc <xTaskRemoveFromEventList+0x78>)
 8006a8c:	428b      	cmp	r3, r1
 8006a8e:	bf88      	it	hi
 8006a90:	6013      	strhi	r3, [r2, #0]
 8006a92:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006a96:	4629      	mov	r1, r5
 8006a98:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8006a9c:	f7fe fe66 	bl	800576c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006aa0:	4b0f      	ldr	r3, [pc, #60]	; (8006ae0 <xTaskRemoveFromEventList+0x7c>)
 8006aa2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa8:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8006aaa:	bf83      	ittte	hi
 8006aac:	4b0d      	ldrhi	r3, [pc, #52]	; (8006ae4 <xTaskRemoveFromEventList+0x80>)
 8006aae:	2001      	movhi	r0, #1
 8006ab0:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8006ab2:	2000      	movls	r0, #0
}
 8006ab4:	bd38      	pop	{r3, r4, r5, pc}
 8006ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aba:	f383 8811 	msr	BASEPRI, r3
 8006abe:	f3bf 8f6f 	isb	sy
 8006ac2:	f3bf 8f4f 	dsb	sy
 8006ac6:	e7fe      	b.n	8006ac6 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006ac8:	4629      	mov	r1, r5
 8006aca:	4807      	ldr	r0, [pc, #28]	; (8006ae8 <xTaskRemoveFromEventList+0x84>)
 8006acc:	f7fe fe4e 	bl	800576c <vListInsertEnd>
 8006ad0:	e7e6      	b.n	8006aa0 <xTaskRemoveFromEventList+0x3c>
 8006ad2:	bf00      	nop
 8006ad4:	20000f20 	.word	0x20000f20
 8006ad8:	20000f28 	.word	0x20000f28
 8006adc:	20000ab4 	.word	0x20000ab4
 8006ae0:	20000aa8 	.word	0x20000aa8
 8006ae4:	20000fa0 	.word	0x20000fa0
 8006ae8:	20000f5c 	.word	0x20000f5c

08006aec <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006aec:	4a03      	ldr	r2, [pc, #12]	; (8006afc <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006aee:	4b04      	ldr	r3, [pc, #16]	; (8006b00 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006af0:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	e9c0 2300 	strd	r2, r3, [r0]
}
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop
 8006afc:	20000f58 	.word	0x20000f58
 8006b00:	20000f9c 	.word	0x20000f9c

08006b04 <xTaskCheckForTimeOut>:
{
 8006b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8006b06:	b340      	cbz	r0, 8006b5a <xTaskCheckForTimeOut+0x56>
	configASSERT( pxTicksToWait );
 8006b08:	b1f1      	cbz	r1, 8006b48 <xTaskCheckForTimeOut+0x44>
 8006b0a:	460d      	mov	r5, r1
 8006b0c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8006b0e:	f000 fae9 	bl	80070e4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8006b12:	f8df c078 	ldr.w	ip, [pc, #120]	; 8006b8c <xTaskCheckForTimeOut+0x88>
			if( *pxTicksToWait == portMAX_DELAY )
 8006b16:	682b      	ldr	r3, [r5, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006b18:	6867      	ldr	r7, [r4, #4]
		const TickType_t xConstTickCount = xTickCount;
 8006b1a:	f8dc 6000 	ldr.w	r6, [ip]
			if( *pxTicksToWait == portMAX_DELAY )
 8006b1e:	1c5a      	adds	r2, r3, #1
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006b20:	eba6 0007 	sub.w	r0, r6, r7
			if( *pxTicksToWait == portMAX_DELAY )
 8006b24:	d022      	beq.n	8006b6c <xTaskCheckForTimeOut+0x68>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006b26:	4918      	ldr	r1, [pc, #96]	; (8006b88 <xTaskCheckForTimeOut+0x84>)
 8006b28:	6822      	ldr	r2, [r4, #0]
 8006b2a:	f8d1 e000 	ldr.w	lr, [r1]
 8006b2e:	4572      	cmp	r2, lr
 8006b30:	d001      	beq.n	8006b36 <xTaskCheckForTimeOut+0x32>
 8006b32:	42b7      	cmp	r7, r6
 8006b34:	d925      	bls.n	8006b82 <xTaskCheckForTimeOut+0x7e>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006b36:	4283      	cmp	r3, r0
 8006b38:	d81a      	bhi.n	8006b70 <xTaskCheckForTimeOut+0x6c>
			*pxTicksToWait = 0;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 8006b3e:	2501      	movs	r5, #1
	taskEXIT_CRITICAL();
 8006b40:	f000 faf2 	bl	8007128 <vPortExitCritical>
}
 8006b44:	4628      	mov	r0, r5
 8006b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b4c:	f383 8811 	msr	BASEPRI, r3
 8006b50:	f3bf 8f6f 	isb	sy
 8006b54:	f3bf 8f4f 	dsb	sy
 8006b58:	e7fe      	b.n	8006b58 <xTaskCheckForTimeOut+0x54>
 8006b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b5e:	f383 8811 	msr	BASEPRI, r3
 8006b62:	f3bf 8f6f 	isb	sy
 8006b66:	f3bf 8f4f 	dsb	sy
 8006b6a:	e7fe      	b.n	8006b6a <xTaskCheckForTimeOut+0x66>
				xReturn = pdFALSE;
 8006b6c:	2500      	movs	r5, #0
 8006b6e:	e7e7      	b.n	8006b40 <xTaskCheckForTimeOut+0x3c>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006b70:	6809      	ldr	r1, [r1, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006b72:	f8dc 2000 	ldr.w	r2, [ip]
			*pxTicksToWait -= xElapsedTime;
 8006b76:	1a1b      	subs	r3, r3, r0
 8006b78:	602b      	str	r3, [r5, #0]
			xReturn = pdFALSE;
 8006b7a:	2500      	movs	r5, #0
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006b7c:	e9c4 1200 	strd	r1, r2, [r4]
 8006b80:	e7de      	b.n	8006b40 <xTaskCheckForTimeOut+0x3c>
			xReturn = pdTRUE;
 8006b82:	2501      	movs	r5, #1
 8006b84:	e7dc      	b.n	8006b40 <xTaskCheckForTimeOut+0x3c>
 8006b86:	bf00      	nop
 8006b88:	20000f58 	.word	0x20000f58
 8006b8c:	20000f9c 	.word	0x20000f9c

08006b90 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8006b90:	4b01      	ldr	r3, [pc, #4]	; (8006b98 <vTaskMissedYield+0x8>)
 8006b92:	2201      	movs	r2, #1
 8006b94:	601a      	str	r2, [r3, #0]
}
 8006b96:	4770      	bx	lr
 8006b98:	20000fa0 	.word	0x20000fa0

08006b9c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8006b9c:	4b05      	ldr	r3, [pc, #20]	; (8006bb4 <xTaskGetSchedulerState+0x18>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	b133      	cbz	r3, 8006bb0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ba2:	4b05      	ldr	r3, [pc, #20]	; (8006bb8 <xTaskGetSchedulerState+0x1c>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8006ba8:	bf0c      	ite	eq
 8006baa:	2002      	moveq	r0, #2
 8006bac:	2000      	movne	r0, #0
 8006bae:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006bb0:	2001      	movs	r0, #1
	}
 8006bb2:	4770      	bx	lr
 8006bb4:	20000f70 	.word	0x20000f70
 8006bb8:	20000f20 	.word	0x20000f20

08006bbc <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8006bbc:	b168      	cbz	r0, 8006bda <xTaskPriorityDisinherit+0x1e>
	{
 8006bbe:	b538      	push	{r3, r4, r5, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 8006bc0:	4b1c      	ldr	r3, [pc, #112]	; (8006c34 <xTaskPriorityDisinherit+0x78>)
 8006bc2:	681c      	ldr	r4, [r3, #0]
 8006bc4:	4284      	cmp	r4, r0
 8006bc6:	d00a      	beq.n	8006bde <xTaskPriorityDisinherit+0x22>
 8006bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bcc:	f383 8811 	msr	BASEPRI, r3
 8006bd0:	f3bf 8f6f 	isb	sy
 8006bd4:	f3bf 8f4f 	dsb	sy
 8006bd8:	e7fe      	b.n	8006bd8 <xTaskPriorityDisinherit+0x1c>
	BaseType_t xReturn = pdFALSE;
 8006bda:	2000      	movs	r0, #0
	}
 8006bdc:	4770      	bx	lr
			configASSERT( pxTCB->uxMutexesHeld );
 8006bde:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006be0:	b943      	cbnz	r3, 8006bf4 <xTaskPriorityDisinherit+0x38>
 8006be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be6:	f383 8811 	msr	BASEPRI, r3
 8006bea:	f3bf 8f6f 	isb	sy
 8006bee:	f3bf 8f4f 	dsb	sy
 8006bf2:	e7fe      	b.n	8006bf2 <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006bf4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006bf6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 8006bf8:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006bfa:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8006bfc:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006bfe:	d000      	beq.n	8006c02 <xTaskPriorityDisinherit+0x46>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006c00:	b10b      	cbz	r3, 8006c06 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8006c02:	2000      	movs	r0, #0
	}
 8006c04:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c06:	1d25      	adds	r5, r4, #4
 8006c08:	4628      	mov	r0, r5
 8006c0a:	f7fe fdd9 	bl	80057c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006c0e:	4a0a      	ldr	r2, [pc, #40]	; (8006c38 <xTaskPriorityDisinherit+0x7c>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006c10:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 8006c12:	6811      	ldr	r1, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006c14:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8006c16:	428b      	cmp	r3, r1
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c18:	f1c3 0038 	rsb	r0, r3, #56	; 0x38
					prvAddTaskToReadyList( pxTCB );
 8006c1c:	bf88      	it	hi
 8006c1e:	6013      	strhi	r3, [r2, #0]
 8006c20:	4a06      	ldr	r2, [pc, #24]	; (8006c3c <xTaskPriorityDisinherit+0x80>)
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c22:	61a0      	str	r0, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8006c24:	2014      	movs	r0, #20
 8006c26:	fb00 2003 	mla	r0, r0, r3, r2
 8006c2a:	4629      	mov	r1, r5
 8006c2c:	f7fe fd9e 	bl	800576c <vListInsertEnd>
					xReturn = pdTRUE;
 8006c30:	2001      	movs	r0, #1
	}
 8006c32:	bd38      	pop	{r3, r4, r5, pc}
 8006c34:	20000aa8 	.word	0x20000aa8
 8006c38:	20000f28 	.word	0x20000f28
 8006c3c:	20000ab4 	.word	0x20000ab4

08006c40 <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006c40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c44:	4e21      	ldr	r6, [pc, #132]	; (8006ccc <prvSwitchTimerLists+0x8c>)
	if( xTimerQueue != NULL )
 8006c46:	4f22      	ldr	r7, [pc, #136]	; (8006cd0 <prvSwitchTimerLists+0x90>)
{
 8006c48:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 8006c4a:	f04f 0800 	mov.w	r8, #0

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c4e:	e00e      	b.n	8006c6e <prvSwitchTimerLists+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c50:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c52:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c54:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c58:	1d25      	adds	r5, r4, #4
 8006c5a:	4628      	mov	r0, r5
 8006c5c:	f7fe fdb0 	bl	80057c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c60:	6a23      	ldr	r3, [r4, #32]
 8006c62:	4620      	mov	r0, r4
 8006c64:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c66:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8006c6a:	075b      	lsls	r3, r3, #29
 8006c6c:	d40a      	bmi.n	8006c84 <prvSwitchTimerLists+0x44>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c6e:	6833      	ldr	r3, [r6, #0]
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	2a00      	cmp	r2, #0
 8006c74:	d1ec      	bne.n	8006c50 <prvSwitchTimerLists+0x10>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 8006c76:	4a17      	ldr	r2, [pc, #92]	; (8006cd4 <prvSwitchTimerLists+0x94>)
 8006c78:	6811      	ldr	r1, [r2, #0]
 8006c7a:	6031      	str	r1, [r6, #0]
	pxOverflowTimerList = pxTemp;
 8006c7c:	6013      	str	r3, [r2, #0]
}
 8006c7e:	b005      	add	sp, #20
 8006c80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006c84:	69a3      	ldr	r3, [r4, #24]
 8006c86:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 8006c88:	4599      	cmp	r9, r3
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c8a:	4629      	mov	r1, r5
			if( xReloadTime > xNextExpireTime )
 8006c8c:	d317      	bcc.n	8006cbe <prvSwitchTimerLists+0x7e>
	if( xTimerQueue != NULL )
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	b163      	cbz	r3, 8006cac <prvSwitchTimerLists+0x6c>
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006c92:	e9cd 8900 	strd	r8, r9, [sp]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006c96:	9402      	str	r4, [sp, #8]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006c98:	f7ff ff80 	bl	8006b9c <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	4669      	mov	r1, sp
 8006ca2:	6838      	ldr	r0, [r7, #0]
 8006ca4:	f7fe fe3a 	bl	800591c <xQueueGenericSend>
				configASSERT( xResult );
 8006ca8:	2800      	cmp	r0, #0
 8006caa:	d1e0      	bne.n	8006c6e <prvSwitchTimerLists+0x2e>
 8006cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb0:	f383 8811 	msr	BASEPRI, r3
 8006cb4:	f3bf 8f6f 	isb	sy
 8006cb8:	f3bf 8f4f 	dsb	sy
 8006cbc:	e7fe      	b.n	8006cbc <prvSwitchTimerLists+0x7c>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006cbe:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006cc0:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006cc2:	6830      	ldr	r0, [r6, #0]
 8006cc4:	f7fe fd62 	bl	800578c <vListInsert>
 8006cc8:	e7d1      	b.n	8006c6e <prvSwitchTimerLists+0x2e>
 8006cca:	bf00      	nop
 8006ccc:	20000fa4 	.word	0x20000fa4
 8006cd0:	200010c8 	.word	0x200010c8
 8006cd4:	20000fa8 	.word	0x20000fa8

08006cd8 <prvTimerTask>:
{
 8006cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cdc:	4f9a      	ldr	r7, [pc, #616]	; (8006f48 <prvTimerTask+0x270>)
 8006cde:	4e9b      	ldr	r6, [pc, #620]	; (8006f4c <prvTimerTask+0x274>)
 8006ce0:	f8df 8274 	ldr.w	r8, [pc, #628]	; 8006f58 <prvTimerTask+0x280>
 8006ce4:	4d9a      	ldr	r5, [pc, #616]	; (8006f50 <prvTimerTask+0x278>)
 8006ce6:	b08b      	sub	sp, #44	; 0x2c
		xNextExpireTime = ( TickType_t ) 0U;
 8006ce8:	f04f 0900 	mov.w	r9, #0
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	681c      	ldr	r4, [r3, #0]
 8006cf0:	2c00      	cmp	r4, #0
 8006cf2:	f000 80ab 	beq.w	8006e4c <prvTimerTask+0x174>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	f8d3 b000 	ldr.w	fp, [r3]
	vTaskSuspendAll();
 8006cfc:	f7ff fc82 	bl	8006604 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8006d00:	f7ff fc88 	bl	8006614 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8006d04:	6832      	ldr	r2, [r6, #0]
 8006d06:	4290      	cmp	r0, r2
	xTimeNow = xTaskGetTickCount();
 8006d08:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8006d0a:	f0c0 80b1 	bcc.w	8006e70 <prvTimerTask+0x198>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006d0e:	4583      	cmp	fp, r0
	xLastTime = xTimeNow;
 8006d10:	6030      	str	r0, [r6, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006d12:	f240 80b9 	bls.w	8006e88 <prvTimerTask+0x1b0>
 8006d16:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006d18:	ebab 010a 	sub.w	r1, fp, sl
 8006d1c:	6828      	ldr	r0, [r5, #0]
 8006d1e:	f7ff f957 	bl	8005fd0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006d22:	f7ff fd23 	bl	800676c <xTaskResumeAll>
 8006d26:	b938      	cbnz	r0, 8006d38 <prvTimerTask+0x60>
					portYIELD_WITHIN_API();
 8006d28:	4b8a      	ldr	r3, [pc, #552]	; (8006f54 <prvTimerTask+0x27c>)
 8006d2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d2e:	601a      	str	r2, [r3, #0]
 8006d30:	f3bf 8f4f 	dsb	sy
 8006d34:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d38:	2200      	movs	r2, #0
 8006d3a:	a902      	add	r1, sp, #8
 8006d3c:	6828      	ldr	r0, [r5, #0]
 8006d3e:	f7fe ffb9 	bl	8005cb4 <xQueueReceive>
 8006d42:	2800      	cmp	r0, #0
 8006d44:	d0d2      	beq.n	8006cec <prvTimerTask+0x14>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006d46:	9b02      	ldr	r3, [sp, #8]
 8006d48:	9c04      	ldr	r4, [sp, #16]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	da07      	bge.n	8006d5e <prvTimerTask+0x86>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006d4e:	9b03      	ldr	r3, [sp, #12]
 8006d50:	9905      	ldr	r1, [sp, #20]
 8006d52:	4620      	mov	r0, r4
 8006d54:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006d56:	9b02      	ldr	r3, [sp, #8]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	dbed      	blt.n	8006d38 <prvTimerTask+0x60>
 8006d5c:	9c04      	ldr	r4, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006d5e:	6963      	ldr	r3, [r4, #20]
 8006d60:	b113      	cbz	r3, 8006d68 <prvTimerTask+0x90>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d62:	1d20      	adds	r0, r4, #4
 8006d64:	f7fe fd2c 	bl	80057c0 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8006d68:	f7ff fc54 	bl	8006614 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8006d6c:	6833      	ldr	r3, [r6, #0]
 8006d6e:	4298      	cmp	r0, r3
 8006d70:	f0c0 8085 	bcc.w	8006e7e <prvTimerTask+0x1a6>
			switch( xMessage.xMessageID )
 8006d74:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 8006d76:	6030      	str	r0, [r6, #0]
			switch( xMessage.xMessageID )
 8006d78:	2b09      	cmp	r3, #9
 8006d7a:	d8dd      	bhi.n	8006d38 <prvTimerTask+0x60>
 8006d7c:	e8df f003 	tbb	[pc, r3]
 8006d80:	272e2e2e 	.word	0x272e2e2e
 8006d84:	2e2e050f 	.word	0x2e2e050f
 8006d88:	0f27      	.short	0x0f27
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006d8a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8006d8e:	079a      	lsls	r2, r3, #30
 8006d90:	f140 809b 	bpl.w	8006eca <prvTimerTask+0x1f2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d94:	f023 0301 	bic.w	r3, r3, #1
 8006d98:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8006d9c:	e7cc      	b.n	8006d38 <prvTimerTask+0x60>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006d9e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006da2:	9b03      	ldr	r3, [sp, #12]
 8006da4:	61a3      	str	r3, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006da6:	f042 0201 	orr.w	r2, r2, #1
 8006daa:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	f000 80bc 	beq.w	8006f2c <prvTimerTask+0x254>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006db4:	4403      	add	r3, r0
	if( xNextExpiryTime <= xTimeNow )
 8006db6:	4283      	cmp	r3, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006db8:	6063      	str	r3, [r4, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006dba:	6124      	str	r4, [r4, #16]
 8006dbc:	f104 0104 	add.w	r1, r4, #4
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006dc0:	bf94      	ite	ls
 8006dc2:	f8d8 0000 	ldrls.w	r0, [r8]
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006dc6:	6838      	ldrhi	r0, [r7, #0]
 8006dc8:	f7fe fce0 	bl	800578c <vListInsert>
 8006dcc:	e7b4      	b.n	8006d38 <prvTimerTask+0x60>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006dce:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8006dd2:	f023 0301 	bic.w	r3, r3, #1
 8006dd6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8006dda:	e7ad      	b.n	8006d38 <prvTimerTask+0x60>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006ddc:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006de0:	9b03      	ldr	r3, [sp, #12]
 8006de2:	69a2      	ldr	r2, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006de4:	6124      	str	r4, [r4, #16]
 8006de6:	eb13 0c02 	adds.w	ip, r3, r2
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006dea:	f041 0101 	orr.w	r1, r1, #1
 8006dee:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 8006df2:	bf2c      	ite	cs
 8006df4:	2101      	movcs	r1, #1
 8006df6:	2100      	movcc	r1, #0
	if( xNextExpiryTime <= xTimeNow )
 8006df8:	4584      	cmp	ip, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006dfa:	f8c4 c004 	str.w	ip, [r4, #4]
	if( xNextExpiryTime <= xTimeNow )
 8006dfe:	d85b      	bhi.n	8006eb8 <prvTimerTask+0x1e0>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e00:	1ac3      	subs	r3, r0, r3
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d865      	bhi.n	8006ed2 <prvTimerTask+0x1fa>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e06:	6a23      	ldr	r3, [r4, #32]
 8006e08:	4620      	mov	r0, r4
 8006e0a:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e0c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8006e10:	075b      	lsls	r3, r3, #29
 8006e12:	d591      	bpl.n	8006d38 <prvTimerTask+0x60>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006e14:	9b03      	ldr	r3, [sp, #12]
 8006e16:	69a1      	ldr	r1, [r4, #24]
	if( xTimerQueue != NULL )
 8006e18:	682a      	ldr	r2, [r5, #0]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006e1a:	440b      	add	r3, r1
	if( xTimerQueue != NULL )
 8006e1c:	b16a      	cbz	r2, 8006e3a <prvTimerTask+0x162>
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006e1e:	e9cd 9306 	strd	r9, r3, [sp, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006e22:	9408      	str	r4, [sp, #32]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006e24:	f7ff feba 	bl	8006b9c <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006e28:	2300      	movs	r3, #0
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	a906      	add	r1, sp, #24
 8006e2e:	6828      	ldr	r0, [r5, #0]
 8006e30:	f7fe fd74 	bl	800591c <xQueueGenericSend>
							configASSERT( xResult );
 8006e34:	2800      	cmp	r0, #0
 8006e36:	f47f af7f 	bne.w	8006d38 <prvTimerTask+0x60>
 8006e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e3e:	f383 8811 	msr	BASEPRI, r3
 8006e42:	f3bf 8f6f 	isb	sy
 8006e46:	f3bf 8f4f 	dsb	sy
 8006e4a:	e7fe      	b.n	8006e4a <prvTimerTask+0x172>
	vTaskSuspendAll();
 8006e4c:	f7ff fbda 	bl	8006604 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8006e50:	f7ff fbe0 	bl	8006614 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8006e54:	6832      	ldr	r2, [r6, #0]
 8006e56:	4282      	cmp	r2, r0
	xTimeNow = xTaskGetTickCount();
 8006e58:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8006e5a:	d809      	bhi.n	8006e70 <prvTimerTask+0x198>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006e5c:	f8d8 2000 	ldr.w	r2, [r8]
	xLastTime = xTimeNow;
 8006e60:	f8c6 a000 	str.w	sl, [r6]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006e64:	6812      	ldr	r2, [r2, #0]
 8006e66:	fab2 f282 	clz	r2, r2
		xNextExpireTime = ( TickType_t ) 0U;
 8006e6a:	46a3      	mov	fp, r4
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006e6c:	0952      	lsrs	r2, r2, #5
 8006e6e:	e753      	b.n	8006d18 <prvTimerTask+0x40>
		prvSwitchTimerLists();
 8006e70:	f7ff fee6 	bl	8006c40 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8006e74:	f8c6 a000 	str.w	sl, [r6]
			( void ) xTaskResumeAll();
 8006e78:	f7ff fc78 	bl	800676c <xTaskResumeAll>
 8006e7c:	e75c      	b.n	8006d38 <prvTimerTask+0x60>
 8006e7e:	9001      	str	r0, [sp, #4]
		prvSwitchTimerLists();
 8006e80:	f7ff fede 	bl	8006c40 <prvSwitchTimerLists>
 8006e84:	9801      	ldr	r0, [sp, #4]
 8006e86:	e775      	b.n	8006d74 <prvTimerTask+0x9c>
				( void ) xTaskResumeAll();
 8006e88:	f7ff fc70 	bl	800676c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e8c:	683a      	ldr	r2, [r7, #0]
 8006e8e:	68d2      	ldr	r2, [r2, #12]
 8006e90:	68d4      	ldr	r4, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e92:	1d21      	adds	r1, r4, #4
 8006e94:	4608      	mov	r0, r1
 8006e96:	9101      	str	r1, [sp, #4]
 8006e98:	f7fe fc92 	bl	80057c0 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e9c:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 8006ea0:	9901      	ldr	r1, [sp, #4]
 8006ea2:	f010 0f04 	tst.w	r0, #4
 8006ea6:	d11a      	bne.n	8006ede <prvTimerTask+0x206>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ea8:	f020 0001 	bic.w	r0, r0, #1
 8006eac:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006eb0:	6a23      	ldr	r3, [r4, #32]
 8006eb2:	4620      	mov	r0, r4
 8006eb4:	4798      	blx	r3
 8006eb6:	e73f      	b.n	8006d38 <prvTimerTask+0x60>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006eb8:	4283      	cmp	r3, r0
 8006eba:	d901      	bls.n	8006ec0 <prvTimerTask+0x1e8>
 8006ebc:	2900      	cmp	r1, #0
 8006ebe:	d0a2      	beq.n	8006e06 <prvTimerTask+0x12e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006ec0:	1d21      	adds	r1, r4, #4
 8006ec2:	6838      	ldr	r0, [r7, #0]
 8006ec4:	f7fe fc62 	bl	800578c <vListInsert>
 8006ec8:	e736      	b.n	8006d38 <prvTimerTask+0x60>
							vPortFree( pxTimer );
 8006eca:	4620      	mov	r0, r4
 8006ecc:	f000 fae2 	bl	8007494 <vPortFree>
 8006ed0:	e732      	b.n	8006d38 <prvTimerTask+0x60>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006ed2:	1d21      	adds	r1, r4, #4
 8006ed4:	f8d8 0000 	ldr.w	r0, [r8]
 8006ed8:	f7fe fc58 	bl	800578c <vListInsert>
 8006edc:	e72c      	b.n	8006d38 <prvTimerTask+0x60>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006ede:	69a0      	ldr	r0, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ee0:	6124      	str	r4, [r4, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006ee2:	eb0b 0300 	add.w	r3, fp, r0
	if( xNextExpiryTime <= xTimeNow )
 8006ee6:	4553      	cmp	r3, sl
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006ee8:	6063      	str	r3, [r4, #4]
	if( xNextExpiryTime <= xTimeNow )
 8006eea:	d81b      	bhi.n	8006f24 <prvTimerTask+0x24c>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006eec:	ebaa 030b 	sub.w	r3, sl, fp
 8006ef0:	4298      	cmp	r0, r3
 8006ef2:	d824      	bhi.n	8006f3e <prvTimerTask+0x266>
	if( xTimerQueue != NULL )
 8006ef4:	682b      	ldr	r3, [r5, #0]
 8006ef6:	b163      	cbz	r3, 8006f12 <prvTimerTask+0x23a>
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006ef8:	e9cd 9b06 	strd	r9, fp, [sp, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006efc:	9408      	str	r4, [sp, #32]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006efe:	f7ff fe4d 	bl	8006b9c <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006f02:	2300      	movs	r3, #0
 8006f04:	461a      	mov	r2, r3
 8006f06:	a906      	add	r1, sp, #24
 8006f08:	6828      	ldr	r0, [r5, #0]
 8006f0a:	f7fe fd07 	bl	800591c <xQueueGenericSend>
			configASSERT( xResult );
 8006f0e:	2800      	cmp	r0, #0
 8006f10:	d1ce      	bne.n	8006eb0 <prvTimerTask+0x1d8>
 8006f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f16:	f383 8811 	msr	BASEPRI, r3
 8006f1a:	f3bf 8f6f 	isb	sy
 8006f1e:	f3bf 8f4f 	dsb	sy
 8006f22:	e7fe      	b.n	8006f22 <prvTimerTask+0x24a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006f24:	6838      	ldr	r0, [r7, #0]
 8006f26:	f7fe fc31 	bl	800578c <vListInsert>
 8006f2a:	e7c1      	b.n	8006eb0 <prvTimerTask+0x1d8>
 8006f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f30:	f383 8811 	msr	BASEPRI, r3
 8006f34:	f3bf 8f6f 	isb	sy
 8006f38:	f3bf 8f4f 	dsb	sy
 8006f3c:	e7fe      	b.n	8006f3c <prvTimerTask+0x264>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006f3e:	f8d8 0000 	ldr.w	r0, [r8]
 8006f42:	f7fe fc23 	bl	800578c <vListInsert>
 8006f46:	e7b3      	b.n	8006eb0 <prvTimerTask+0x1d8>
 8006f48:	20000fa4 	.word	0x20000fa4
 8006f4c:	20001074 	.word	0x20001074
 8006f50:	200010c8 	.word	0x200010c8
 8006f54:	e000ed04 	.word	0xe000ed04
 8006f58:	20000fa8 	.word	0x20000fa8

08006f5c <xTimerCreateTimerTask>:
{
 8006f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8006f5e:	4c23      	ldr	r4, [pc, #140]	; (8006fec <xTimerCreateTimerTask+0x90>)
{
 8006f60:	b089      	sub	sp, #36	; 0x24
	taskENTER_CRITICAL();
 8006f62:	f000 f8bf 	bl	80070e4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8006f66:	6827      	ldr	r7, [r4, #0]
 8006f68:	b337      	cbz	r7, 8006fb8 <xTimerCreateTimerTask+0x5c>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f6a:	f000 f8dd 	bl	8007128 <vPortExitCritical>
	if( xTimerQueue != NULL )
 8006f6e:	6823      	ldr	r3, [r4, #0]
 8006f70:	b1cb      	cbz	r3, 8006fa6 <xTimerCreateTimerTask+0x4a>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006f72:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006f74:	aa07      	add	r2, sp, #28
 8006f76:	a906      	add	r1, sp, #24
 8006f78:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006f7a:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006f7e:	f7fe fbd5 	bl	800572c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006f82:	e9dd 3005 	ldrd	r3, r0, [sp, #20]
 8006f86:	2102      	movs	r1, #2
 8006f88:	e9cd 1000 	strd	r1, r0, [sp]
 8006f8c:	9302      	str	r3, [sp, #8]
 8006f8e:	9a07      	ldr	r2, [sp, #28]
 8006f90:	4917      	ldr	r1, [pc, #92]	; (8006ff0 <xTimerCreateTimerTask+0x94>)
 8006f92:	4818      	ldr	r0, [pc, #96]	; (8006ff4 <xTimerCreateTimerTask+0x98>)
 8006f94:	4623      	mov	r3, r4
 8006f96:	f7ff f9dd 	bl	8006354 <xTaskCreateStatic>
 8006f9a:	4b17      	ldr	r3, [pc, #92]	; (8006ff8 <xTimerCreateTimerTask+0x9c>)
 8006f9c:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8006f9e:	b110      	cbz	r0, 8006fa6 <xTimerCreateTimerTask+0x4a>
}
 8006fa0:	2001      	movs	r0, #1
 8006fa2:	b009      	add	sp, #36	; 0x24
 8006fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006faa:	f383 8811 	msr	BASEPRI, r3
 8006fae:	f3bf 8f6f 	isb	sy
 8006fb2:	f3bf 8f4f 	dsb	sy
 8006fb6:	e7fe      	b.n	8006fb6 <xTimerCreateTimerTask+0x5a>
			vListInitialise( &xActiveTimerList1 );
 8006fb8:	4e10      	ldr	r6, [pc, #64]	; (8006ffc <xTimerCreateTimerTask+0xa0>)
			vListInitialise( &xActiveTimerList2 );
 8006fba:	4d11      	ldr	r5, [pc, #68]	; (8007000 <xTimerCreateTimerTask+0xa4>)
			vListInitialise( &xActiveTimerList1 );
 8006fbc:	4630      	mov	r0, r6
 8006fbe:	f7fe fbc5 	bl	800574c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006fc2:	4628      	mov	r0, r5
 8006fc4:	f7fe fbc2 	bl	800574c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006fc8:	4a0e      	ldr	r2, [pc, #56]	; (8007004 <xTimerCreateTimerTask+0xa8>)
			pxOverflowTimerList = &xActiveTimerList2;
 8006fca:	490f      	ldr	r1, [pc, #60]	; (8007008 <xTimerCreateTimerTask+0xac>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006fcc:	9700      	str	r7, [sp, #0]
 8006fce:	4b0f      	ldr	r3, [pc, #60]	; (800700c <xTimerCreateTimerTask+0xb0>)
			pxCurrentTimerList = &xActiveTimerList1;
 8006fd0:	6016      	str	r6, [r2, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006fd2:	600d      	str	r5, [r1, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006fd4:	4a0e      	ldr	r2, [pc, #56]	; (8007010 <xTimerCreateTimerTask+0xb4>)
 8006fd6:	2110      	movs	r1, #16
 8006fd8:	200a      	movs	r0, #10
 8006fda:	f7fe fc47 	bl	800586c <xQueueGenericCreateStatic>
 8006fde:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 8006fe0:	2800      	cmp	r0, #0
 8006fe2:	d0c2      	beq.n	8006f6a <xTimerCreateTimerTask+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006fe4:	490b      	ldr	r1, [pc, #44]	; (8007014 <xTimerCreateTimerTask+0xb8>)
 8006fe6:	f7fe ffc9 	bl	8005f7c <vQueueAddToRegistry>
 8006fea:	e7be      	b.n	8006f6a <xTimerCreateTimerTask+0xe>
 8006fec:	200010c8 	.word	0x200010c8
 8006ff0:	0800a144 	.word	0x0800a144
 8006ff4:	08006cd9 	.word	0x08006cd9
 8006ff8:	200010cc 	.word	0x200010cc
 8006ffc:	2000104c 	.word	0x2000104c
 8007000:	20001060 	.word	0x20001060
 8007004:	20000fa4 	.word	0x20000fa4
 8007008:	20000fa8 	.word	0x20000fa8
 800700c:	20001078 	.word	0x20001078
 8007010:	20000fac 	.word	0x20000fac
 8007014:	0800a13c 	.word	0x0800a13c

08007018 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007018:	4b0e      	ldr	r3, [pc, #56]	; (8007054 <prvTaskExitError+0x3c>)
 800701a:	681b      	ldr	r3, [r3, #0]
{
 800701c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800701e:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 8007020:	3301      	adds	r3, #1
volatile uint32_t ulDummy = 0;
 8007022:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8007024:	d008      	beq.n	8007038 <prvTaskExitError+0x20>
 8007026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800702a:	f383 8811 	msr	BASEPRI, r3
 800702e:	f3bf 8f6f 	isb	sy
 8007032:	f3bf 8f4f 	dsb	sy
 8007036:	e7fe      	b.n	8007036 <prvTaskExitError+0x1e>
 8007038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800703c:	f383 8811 	msr	BASEPRI, r3
 8007040:	f3bf 8f6f 	isb	sy
 8007044:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007048:	9b01      	ldr	r3, [sp, #4]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d0fc      	beq.n	8007048 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800704e:	b002      	add	sp, #8
 8007050:	4770      	bx	lr
 8007052:	bf00      	nop
 8007054:	20000130 	.word	0x20000130

08007058 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007058:	4808      	ldr	r0, [pc, #32]	; (800707c <prvPortStartFirstTask+0x24>)
 800705a:	6800      	ldr	r0, [r0, #0]
 800705c:	6800      	ldr	r0, [r0, #0]
 800705e:	f380 8808 	msr	MSP, r0
 8007062:	f04f 0000 	mov.w	r0, #0
 8007066:	f380 8814 	msr	CONTROL, r0
 800706a:	b662      	cpsie	i
 800706c:	b661      	cpsie	f
 800706e:	f3bf 8f4f 	dsb	sy
 8007072:	f3bf 8f6f 	isb	sy
 8007076:	df00      	svc	0
 8007078:	bf00      	nop
 800707a:	0000      	.short	0x0000
 800707c:	e000ed08 	.word	0xe000ed08

08007080 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007080:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007090 <vPortEnableVFP+0x10>
 8007084:	6801      	ldr	r1, [r0, #0]
 8007086:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800708a:	6001      	str	r1, [r0, #0]
 800708c:	4770      	bx	lr
 800708e:	0000      	.short	0x0000
 8007090:	e000ed88 	.word	0xe000ed88

08007094 <pxPortInitialiseStack>:
{
 8007094:	b430      	push	{r4, r5}
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007096:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800709a:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800709e:	4c07      	ldr	r4, [pc, #28]	; (80070bc <pxPortInitialiseStack+0x28>)
 80070a0:	f840 4c0c 	str.w	r4, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80070a4:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80070a8:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80070ac:	e940 1502 	strd	r1, r5, [r0, #-8]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80070b0:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80070b4:	bc30      	pop	{r4, r5}
 80070b6:	3844      	subs	r0, #68	; 0x44
 80070b8:	4770      	bx	lr
 80070ba:	bf00      	nop
 80070bc:	08007019 	.word	0x08007019

080070c0 <SVC_Handler>:
	__asm volatile (
 80070c0:	4b07      	ldr	r3, [pc, #28]	; (80070e0 <pxCurrentTCBConst2>)
 80070c2:	6819      	ldr	r1, [r3, #0]
 80070c4:	6808      	ldr	r0, [r1, #0]
 80070c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070ca:	f380 8809 	msr	PSP, r0
 80070ce:	f3bf 8f6f 	isb	sy
 80070d2:	f04f 0000 	mov.w	r0, #0
 80070d6:	f380 8811 	msr	BASEPRI, r0
 80070da:	4770      	bx	lr
 80070dc:	f3af 8000 	nop.w

080070e0 <pxCurrentTCBConst2>:
 80070e0:	20000aa8 	.word	0x20000aa8

080070e4 <vPortEnterCritical>:
 80070e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e8:	f383 8811 	msr	BASEPRI, r3
 80070ec:	f3bf 8f6f 	isb	sy
 80070f0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80070f4:	4a0a      	ldr	r2, [pc, #40]	; (8007120 <vPortEnterCritical+0x3c>)
 80070f6:	6813      	ldr	r3, [r2, #0]
 80070f8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80070fa:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80070fc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80070fe:	d000      	beq.n	8007102 <vPortEnterCritical+0x1e>
}
 8007100:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007102:	4b08      	ldr	r3, [pc, #32]	; (8007124 <vPortEnterCritical+0x40>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f013 0fff 	tst.w	r3, #255	; 0xff
 800710a:	d0f9      	beq.n	8007100 <vPortEnterCritical+0x1c>
 800710c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007110:	f383 8811 	msr	BASEPRI, r3
 8007114:	f3bf 8f6f 	isb	sy
 8007118:	f3bf 8f4f 	dsb	sy
 800711c:	e7fe      	b.n	800711c <vPortEnterCritical+0x38>
 800711e:	bf00      	nop
 8007120:	20000130 	.word	0x20000130
 8007124:	e000ed04 	.word	0xe000ed04

08007128 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8007128:	4a08      	ldr	r2, [pc, #32]	; (800714c <vPortExitCritical+0x24>)
 800712a:	6813      	ldr	r3, [r2, #0]
 800712c:	b943      	cbnz	r3, 8007140 <vPortExitCritical+0x18>
 800712e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007132:	f383 8811 	msr	BASEPRI, r3
 8007136:	f3bf 8f6f 	isb	sy
 800713a:	f3bf 8f4f 	dsb	sy
 800713e:	e7fe      	b.n	800713e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8007140:	3b01      	subs	r3, #1
 8007142:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007144:	b90b      	cbnz	r3, 800714a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007146:	f383 8811 	msr	BASEPRI, r3
}
 800714a:	4770      	bx	lr
 800714c:	20000130 	.word	0x20000130

08007150 <PendSV_Handler>:
	__asm volatile
 8007150:	f3ef 8009 	mrs	r0, PSP
 8007154:	f3bf 8f6f 	isb	sy
 8007158:	4b15      	ldr	r3, [pc, #84]	; (80071b0 <pxCurrentTCBConst>)
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	f01e 0f10 	tst.w	lr, #16
 8007160:	bf08      	it	eq
 8007162:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007166:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800716a:	6010      	str	r0, [r2, #0]
 800716c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007170:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007174:	f380 8811 	msr	BASEPRI, r0
 8007178:	f3bf 8f4f 	dsb	sy
 800717c:	f3bf 8f6f 	isb	sy
 8007180:	f7ff fb9e 	bl	80068c0 <vTaskSwitchContext>
 8007184:	f04f 0000 	mov.w	r0, #0
 8007188:	f380 8811 	msr	BASEPRI, r0
 800718c:	bc09      	pop	{r0, r3}
 800718e:	6819      	ldr	r1, [r3, #0]
 8007190:	6808      	ldr	r0, [r1, #0]
 8007192:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007196:	f01e 0f10 	tst.w	lr, #16
 800719a:	bf08      	it	eq
 800719c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80071a0:	f380 8809 	msr	PSP, r0
 80071a4:	f3bf 8f6f 	isb	sy
 80071a8:	4770      	bx	lr
 80071aa:	bf00      	nop
 80071ac:	f3af 8000 	nop.w

080071b0 <pxCurrentTCBConst>:
 80071b0:	20000aa8 	.word	0x20000aa8

080071b4 <SysTick_Handler>:
{
 80071b4:	b508      	push	{r3, lr}
	__asm volatile
 80071b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ba:	f383 8811 	msr	BASEPRI, r3
 80071be:	f3bf 8f6f 	isb	sy
 80071c2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80071c6:	f7ff fa2b 	bl	8006620 <xTaskIncrementTick>
 80071ca:	b118      	cbz	r0, 80071d4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80071cc:	4b03      	ldr	r3, [pc, #12]	; (80071dc <SysTick_Handler+0x28>)
 80071ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071d2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80071d4:	2300      	movs	r3, #0
 80071d6:	f383 8811 	msr	BASEPRI, r3
}
 80071da:	bd08      	pop	{r3, pc}
 80071dc:	e000ed04 	.word	0xe000ed04

080071e0 <vPortSetupTimerInterrupt>:
{
 80071e0:	b430      	push	{r4, r5}
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80071e2:	4a09      	ldr	r2, [pc, #36]	; (8007208 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80071e4:	4d09      	ldr	r5, [pc, #36]	; (800720c <vPortSetupTimerInterrupt+0x2c>)
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80071e6:	4b0a      	ldr	r3, [pc, #40]	; (8007210 <vPortSetupTimerInterrupt+0x30>)
 80071e8:	4c0a      	ldr	r4, [pc, #40]	; (8007214 <vPortSetupTimerInterrupt+0x34>)
 80071ea:	480b      	ldr	r0, [pc, #44]	; (8007218 <vPortSetupTimerInterrupt+0x38>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80071ec:	2100      	movs	r1, #0
 80071ee:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80071f0:	6029      	str	r1, [r5, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	fba4 1303 	umull	r1, r3, r4, r3
 80071f8:	099b      	lsrs	r3, r3, #6
 80071fa:	3b01      	subs	r3, #1
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80071fc:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80071fe:	6003      	str	r3, [r0, #0]
}
 8007200:	bc30      	pop	{r4, r5}
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007202:	6011      	str	r1, [r2, #0]
}
 8007204:	4770      	bx	lr
 8007206:	bf00      	nop
 8007208:	e000e010 	.word	0xe000e010
 800720c:	e000e018 	.word	0xe000e018
 8007210:	20000000 	.word	0x20000000
 8007214:	10624dd3 	.word	0x10624dd3
 8007218:	e000e014 	.word	0xe000e014

0800721c <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800721c:	4b3a      	ldr	r3, [pc, #232]	; (8007308 <xPortStartScheduler+0xec>)
 800721e:	4a3b      	ldr	r2, [pc, #236]	; (800730c <xPortStartScheduler+0xf0>)
 8007220:	6819      	ldr	r1, [r3, #0]
 8007222:	4291      	cmp	r1, r2
 8007224:	d040      	beq.n	80072a8 <xPortStartScheduler+0x8c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	4b39      	ldr	r3, [pc, #228]	; (8007310 <xPortStartScheduler+0xf4>)
 800722a:	429a      	cmp	r2, r3
 800722c:	d033      	beq.n	8007296 <xPortStartScheduler+0x7a>
{
 800722e:	b510      	push	{r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007230:	4b38      	ldr	r3, [pc, #224]	; (8007314 <xPortStartScheduler+0xf8>)
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007232:	4839      	ldr	r0, [pc, #228]	; (8007318 <xPortStartScheduler+0xfc>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007234:	781a      	ldrb	r2, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007236:	4c39      	ldr	r4, [pc, #228]	; (800731c <xPortStartScheduler+0x100>)
{
 8007238:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800723a:	b2d2      	uxtb	r2, r2
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800723c:	21ff      	movs	r1, #255	; 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800723e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007240:	7019      	strb	r1, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	b2db      	uxtb	r3, r3
 8007246:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800724a:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800724e:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007252:	2107      	movs	r1, #7
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007254:	f003 0350 	and.w	r3, r3, #80	; 0x50
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007258:	6001      	str	r1, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800725a:	0611      	lsls	r1, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800725c:	7023      	strb	r3, [r4, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800725e:	d511      	bpl.n	8007284 <xPortStartScheduler+0x68>
 8007260:	2306      	movs	r3, #6
 8007262:	e000      	b.n	8007266 <xPortStartScheduler+0x4a>
 8007264:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007266:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800726a:	0052      	lsls	r2, r2, #1
 800726c:	b2d2      	uxtb	r2, r2
 800726e:	f88d 2003 	strb.w	r2, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007272:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8007276:	0612      	lsls	r2, r2, #24
 8007278:	f103 31ff 	add.w	r1, r3, #4294967295
 800727c:	d4f2      	bmi.n	8007264 <xPortStartScheduler+0x48>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800727e:	2b03      	cmp	r3, #3
 8007280:	6003      	str	r3, [r0, #0]
 8007282:	d01a      	beq.n	80072ba <xPortStartScheduler+0x9e>
	__asm volatile
 8007284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007288:	f383 8811 	msr	BASEPRI, r3
 800728c:	f3bf 8f6f 	isb	sy
 8007290:	f3bf 8f4f 	dsb	sy
 8007294:	e7fe      	b.n	8007294 <xPortStartScheduler+0x78>
 8007296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800729a:	f383 8811 	msr	BASEPRI, r3
 800729e:	f3bf 8f6f 	isb	sy
 80072a2:	f3bf 8f4f 	dsb	sy
 80072a6:	e7fe      	b.n	80072a6 <xPortStartScheduler+0x8a>
 80072a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ac:	f383 8811 	msr	BASEPRI, r3
 80072b0:	f3bf 8f6f 	isb	sy
 80072b4:	f3bf 8f4f 	dsb	sy
 80072b8:	e7fe      	b.n	80072b8 <xPortStartScheduler+0x9c>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80072ba:	9901      	ldr	r1, [sp, #4]
 80072bc:	4c15      	ldr	r4, [pc, #84]	; (8007314 <xPortStartScheduler+0xf8>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80072be:	4a18      	ldr	r2, [pc, #96]	; (8007320 <xPortStartScheduler+0x104>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80072c0:	021b      	lsls	r3, r3, #8
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80072c2:	b2c9      	uxtb	r1, r1
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80072c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80072c8:	6003      	str	r3, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80072ca:	7021      	strb	r1, [r4, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80072cc:	6813      	ldr	r3, [r2, #0]
 80072ce:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80072d2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80072d4:	6813      	ldr	r3, [r2, #0]
 80072d6:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80072da:	6013      	str	r3, [r2, #0]
	vPortSetupTimerInterrupt();
 80072dc:	f7ff ff80 	bl	80071e0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80072e0:	4b10      	ldr	r3, [pc, #64]	; (8007324 <xPortStartScheduler+0x108>)
 80072e2:	2400      	movs	r4, #0
 80072e4:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 80072e6:	f7ff fecb 	bl	8007080 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80072ea:	4a0f      	ldr	r2, [pc, #60]	; (8007328 <xPortStartScheduler+0x10c>)
 80072ec:	6813      	ldr	r3, [r2, #0]
 80072ee:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80072f2:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80072f4:	f7ff feb0 	bl	8007058 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80072f8:	f7ff fae2 	bl	80068c0 <vTaskSwitchContext>
	prvTaskExitError();
 80072fc:	f7ff fe8c 	bl	8007018 <prvTaskExitError>
}
 8007300:	4620      	mov	r0, r4
 8007302:	b002      	add	sp, #8
 8007304:	bd10      	pop	{r4, pc}
 8007306:	bf00      	nop
 8007308:	e000ed00 	.word	0xe000ed00
 800730c:	410fc271 	.word	0x410fc271
 8007310:	410fc270 	.word	0x410fc270
 8007314:	e000e400 	.word	0xe000e400
 8007318:	200010d4 	.word	0x200010d4
 800731c:	200010d0 	.word	0x200010d0
 8007320:	e000ed20 	.word	0xe000ed20
 8007324:	20000130 	.word	0x20000130
 8007328:	e000ef34 	.word	0xe000ef34

0800732c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800732c:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800732e:	4b11      	ldr	r3, [pc, #68]	; (8007374 <prvInsertBlockIntoFreeList+0x48>)
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	4282      	cmp	r2, r0
 8007334:	d201      	bcs.n	800733a <prvInsertBlockIntoFreeList+0xe>
 8007336:	4613      	mov	r3, r2
 8007338:	e7fa      	b.n	8007330 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800733a:	685c      	ldr	r4, [r3, #4]
 800733c:	1919      	adds	r1, r3, r4
 800733e:	4288      	cmp	r0, r1
 8007340:	d103      	bne.n	800734a <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007342:	6841      	ldr	r1, [r0, #4]
 8007344:	4421      	add	r1, r4
 8007346:	6059      	str	r1, [r3, #4]
 8007348:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800734a:	6844      	ldr	r4, [r0, #4]
 800734c:	1901      	adds	r1, r0, r4
 800734e:	428a      	cmp	r2, r1
 8007350:	d109      	bne.n	8007366 <prvInsertBlockIntoFreeList+0x3a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007352:	4909      	ldr	r1, [pc, #36]	; (8007378 <prvInsertBlockIntoFreeList+0x4c>)
 8007354:	6809      	ldr	r1, [r1, #0]
 8007356:	428a      	cmp	r2, r1
 8007358:	d005      	beq.n	8007366 <prvInsertBlockIntoFreeList+0x3a>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800735a:	e9d2 2100 	ldrd	r2, r1, [r2]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800735e:	4421      	add	r1, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007360:	6002      	str	r2, [r0, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007362:	6041      	str	r1, [r0, #4]
 8007364:	e000      	b.n	8007368 <prvInsertBlockIntoFreeList+0x3c>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007366:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007368:	4298      	cmp	r0, r3
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800736a:	bf18      	it	ne
 800736c:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800736e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007372:	4770      	bx	lr
 8007374:	20004ce8 	.word	0x20004ce8
 8007378:	200010d8 	.word	0x200010d8

0800737c <pvPortMalloc>:
{
 800737c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxEnd == NULL )
 800737e:	4d3e      	ldr	r5, [pc, #248]	; (8007478 <pvPortMalloc+0xfc>)
{
 8007380:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8007382:	f7ff f93f 	bl	8006604 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8007386:	682a      	ldr	r2, [r5, #0]
 8007388:	2a00      	cmp	r2, #0
 800738a:	d056      	beq.n	800743a <pvPortMalloc+0xbe>
 800738c:	4b3b      	ldr	r3, [pc, #236]	; (800747c <pvPortMalloc+0x100>)
 800738e:	681d      	ldr	r5, [r3, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007390:	422c      	tst	r4, r5
 8007392:	d14d      	bne.n	8007430 <pvPortMalloc+0xb4>
			if( xWantedSize > 0 )
 8007394:	2c00      	cmp	r4, #0
 8007396:	d04b      	beq.n	8007430 <pvPortMalloc+0xb4>
				xWantedSize += xHeapStructSize;
 8007398:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800739c:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800739e:	bf1c      	itt	ne
 80073a0:	f023 0307 	bicne.w	r3, r3, #7
 80073a4:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d042      	beq.n	8007430 <pvPortMalloc+0xb4>
 80073aa:	4f35      	ldr	r7, [pc, #212]	; (8007480 <pvPortMalloc+0x104>)
 80073ac:	683e      	ldr	r6, [r7, #0]
 80073ae:	429e      	cmp	r6, r3
 80073b0:	d33e      	bcc.n	8007430 <pvPortMalloc+0xb4>
				pxBlock = xStart.pxNextFreeBlock;
 80073b2:	4834      	ldr	r0, [pc, #208]	; (8007484 <pvPortMalloc+0x108>)
 80073b4:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073b6:	e006      	b.n	80073c6 <pvPortMalloc+0x4a>
 80073b8:	f8d4 c000 	ldr.w	ip, [r4]
 80073bc:	f1bc 0f00 	cmp.w	ip, #0
 80073c0:	d004      	beq.n	80073cc <pvPortMalloc+0x50>
 80073c2:	4620      	mov	r0, r4
 80073c4:	4664      	mov	r4, ip
 80073c6:	6861      	ldr	r1, [r4, #4]
 80073c8:	4299      	cmp	r1, r3
 80073ca:	d3f5      	bcc.n	80073b8 <pvPortMalloc+0x3c>
				if( pxBlock != pxEnd )
 80073cc:	4294      	cmp	r4, r2
 80073ce:	d02f      	beq.n	8007430 <pvPortMalloc+0xb4>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80073d0:	6822      	ldr	r2, [r4, #0]
 80073d2:	6002      	str	r2, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80073d4:	1aca      	subs	r2, r1, r3
 80073d6:	2a10      	cmp	r2, #16
 80073d8:	d910      	bls.n	80073fc <pvPortMalloc+0x80>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80073da:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073dc:	0741      	lsls	r1, r0, #29
 80073de:	d008      	beq.n	80073f2 <pvPortMalloc+0x76>
 80073e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e4:	f383 8811 	msr	BASEPRI, r3
 80073e8:	f3bf 8f6f 	isb	sy
 80073ec:	f3bf 8f4f 	dsb	sy
 80073f0:	e7fe      	b.n	80073f0 <pvPortMalloc+0x74>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80073f2:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80073f4:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80073f6:	f7ff ff99 	bl	800732c <prvInsertBlockIntoFreeList>
 80073fa:	6861      	ldr	r1, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80073fc:	4a22      	ldr	r2, [pc, #136]	; (8007488 <pvPortMalloc+0x10c>)
 80073fe:	6810      	ldr	r0, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007400:	1a76      	subs	r6, r6, r1
					pxBlock->pxNextFreeBlock = NULL;
 8007402:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007404:	4329      	orrs	r1, r5
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007406:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 8007408:	e9c4 3100 	strd	r3, r1, [r4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800740c:	f104 0408 	add.w	r4, r4, #8
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007410:	bf38      	it	cc
 8007412:	6016      	strcc	r6, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007414:	603e      	str	r6, [r7, #0]
	( void ) xTaskResumeAll();
 8007416:	f7ff f9a9 	bl	800676c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800741a:	0763      	lsls	r3, r4, #29
 800741c:	d00b      	beq.n	8007436 <pvPortMalloc+0xba>
 800741e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007422:	f383 8811 	msr	BASEPRI, r3
 8007426:	f3bf 8f6f 	isb	sy
 800742a:	f3bf 8f4f 	dsb	sy
 800742e:	e7fe      	b.n	800742e <pvPortMalloc+0xb2>
	( void ) xTaskResumeAll();
 8007430:	f7ff f99c 	bl	800676c <xTaskResumeAll>
 8007434:	2400      	movs	r4, #0
}
 8007436:	4620      	mov	r0, r4
 8007438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uxAddress = ( size_t ) ucHeap;
 800743a:	4b14      	ldr	r3, [pc, #80]	; (800748c <pvPortMalloc+0x110>)
	uxAddress -= xHeapStructSize;
 800743c:	4a14      	ldr	r2, [pc, #80]	; (8007490 <pvPortMalloc+0x114>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800743e:	4911      	ldr	r1, [pc, #68]	; (8007484 <pvPortMalloc+0x108>)
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007440:	4f11      	ldr	r7, [pc, #68]	; (8007488 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007442:	075e      	lsls	r6, r3, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007444:	bf18      	it	ne
 8007446:	3307      	addne	r3, #7
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007448:	f022 0207 	bic.w	r2, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800744c:	bf18      	it	ne
 800744e:	f023 0307 	bicne.w	r3, r3, #7
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007452:	4e0b      	ldr	r6, [pc, #44]	; (8007480 <pvPortMalloc+0x104>)
	pxEnd = ( void * ) uxAddress;
 8007454:	602a      	str	r2, [r5, #0]
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007456:	4618      	mov	r0, r3
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007458:	1ad3      	subs	r3, r2, r3
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800745a:	4d08      	ldr	r5, [pc, #32]	; (800747c <pvPortMalloc+0x100>)
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800745c:	6033      	str	r3, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800745e:	2600      	movs	r6, #0
 8007460:	e9c1 0600 	strd	r0, r6, [r1]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007464:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
	pxEnd->pxNextFreeBlock = NULL;
 8007468:	e9c2 6600 	strd	r6, r6, [r2]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800746c:	6029      	str	r1, [r5, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800746e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007470:	e9c0 2300 	strd	r2, r3, [r0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007474:	460d      	mov	r5, r1
 8007476:	e78b      	b.n	8007390 <pvPortMalloc+0x14>
 8007478:	200010d8 	.word	0x200010d8
 800747c:	20004cdc 	.word	0x20004cdc
 8007480:	20004ce0 	.word	0x20004ce0
 8007484:	20004ce8 	.word	0x20004ce8
 8007488:	20004ce4 	.word	0x20004ce4
 800748c:	200010dc 	.word	0x200010dc
 8007490:	20004cd4 	.word	0x20004cd4

08007494 <vPortFree>:
	if( pv != NULL )
 8007494:	b1d0      	cbz	r0, 80074cc <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007496:	4a19      	ldr	r2, [pc, #100]	; (80074fc <vPortFree+0x68>)
 8007498:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800749c:	6812      	ldr	r2, [r2, #0]
 800749e:	4213      	tst	r3, r2
 80074a0:	d108      	bne.n	80074b4 <vPortFree+0x20>
 80074a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a6:	f383 8811 	msr	BASEPRI, r3
 80074aa:	f3bf 8f6f 	isb	sy
 80074ae:	f3bf 8f4f 	dsb	sy
 80074b2:	e7fe      	b.n	80074b2 <vPortFree+0x1e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80074b4:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80074b8:	b149      	cbz	r1, 80074ce <vPortFree+0x3a>
 80074ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074be:	f383 8811 	msr	BASEPRI, r3
 80074c2:	f3bf 8f6f 	isb	sy
 80074c6:	f3bf 8f4f 	dsb	sy
 80074ca:	e7fe      	b.n	80074ca <vPortFree+0x36>
 80074cc:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80074ce:	ea23 0302 	bic.w	r3, r3, r2
{
 80074d2:	b510      	push	{r4, lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80074d4:	f840 3c04 	str.w	r3, [r0, #-4]
 80074d8:	4604      	mov	r4, r0
				vTaskSuspendAll();
 80074da:	f7ff f893 	bl	8006604 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80074de:	4a08      	ldr	r2, [pc, #32]	; (8007500 <vPortFree+0x6c>)
 80074e0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80074e4:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80074e6:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80074ea:	440b      	add	r3, r1
 80074ec:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80074ee:	f7ff ff1d 	bl	800732c <prvInsertBlockIntoFreeList>
}
 80074f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80074f6:	f7ff b939 	b.w	800676c <xTaskResumeAll>
 80074fa:	bf00      	nop
 80074fc:	20004cdc 	.word	0x20004cdc
 8007500:	20004ce0 	.word	0x20004ce0

08007504 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007504:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007506:	2200      	movs	r2, #0
 8007508:	4910      	ldr	r1, [pc, #64]	; (800754c <MX_USB_DEVICE_Init+0x48>)
 800750a:	4811      	ldr	r0, [pc, #68]	; (8007550 <MX_USB_DEVICE_Init+0x4c>)
 800750c:	f7fd fbf6 	bl	8004cfc <USBD_Init>
 8007510:	b9c0      	cbnz	r0, 8007544 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007512:	4910      	ldr	r1, [pc, #64]	; (8007554 <MX_USB_DEVICE_Init+0x50>)
 8007514:	480e      	ldr	r0, [pc, #56]	; (8007550 <MX_USB_DEVICE_Init+0x4c>)
 8007516:	f7fd fc09 	bl	8004d2c <USBD_RegisterClass>
 800751a:	b980      	cbnz	r0, 800753e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800751c:	490e      	ldr	r1, [pc, #56]	; (8007558 <MX_USB_DEVICE_Init+0x54>)
 800751e:	480c      	ldr	r0, [pc, #48]	; (8007550 <MX_USB_DEVICE_Init+0x4c>)
 8007520:	f7fd fba6 	bl	8004c70 <USBD_CDC_RegisterInterface>
 8007524:	b940      	cbnz	r0, 8007538 <MX_USB_DEVICE_Init+0x34>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007526:	480a      	ldr	r0, [pc, #40]	; (8007550 <MX_USB_DEVICE_Init+0x4c>)
 8007528:	f7fd fc14 	bl	8004d54 <USBD_Start>
 800752c:	b900      	cbnz	r0, 8007530 <MX_USB_DEVICE_Init+0x2c>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800752e:	bd08      	pop	{r3, pc}
 8007530:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8007534:	f7f9 be86 	b.w	8001244 <Error_Handler>
    Error_Handler();
 8007538:	f7f9 fe84 	bl	8001244 <Error_Handler>
 800753c:	e7f3      	b.n	8007526 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 800753e:	f7f9 fe81 	bl	8001244 <Error_Handler>
 8007542:	e7eb      	b.n	800751c <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8007544:	f7f9 fe7e 	bl	8001244 <Error_Handler>
 8007548:	e7e3      	b.n	8007512 <MX_USB_DEVICE_Init+0xe>
 800754a:	bf00      	nop
 800754c:	20000150 	.word	0x20000150
 8007550:	20004dfc 	.word	0x20004dfc
 8007554:	20000020 	.word	0x20000020
 8007558:	20000134 	.word	0x20000134

0800755c <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800755c:	2000      	movs	r0, #0
 800755e:	4770      	bx	lr

08007560 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 8007560:	2000      	movs	r0, #0
 8007562:	4770      	bx	lr

08007564 <CDC_Receive_FS>:
{
 8007564:	b510      	push	{r4, lr}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007566:	4c05      	ldr	r4, [pc, #20]	; (800757c <CDC_Receive_FS+0x18>)
 8007568:	4601      	mov	r1, r0
 800756a:	4620      	mov	r0, r4
 800756c:	f7fd fb90 	bl	8004c90 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007570:	4620      	mov	r0, r4
 8007572:	f7fd fbab 	bl	8004ccc <USBD_CDC_ReceivePacket>
}
 8007576:	2000      	movs	r0, #0
 8007578:	bd10      	pop	{r4, pc}
 800757a:	bf00      	nop
 800757c:	20004dfc 	.word	0x20004dfc

08007580 <CDC_Init_FS>:
{
 8007580:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007582:	4c06      	ldr	r4, [pc, #24]	; (800759c <CDC_Init_FS+0x1c>)
 8007584:	4906      	ldr	r1, [pc, #24]	; (80075a0 <CDC_Init_FS+0x20>)
 8007586:	2200      	movs	r2, #0
 8007588:	4620      	mov	r0, r4
 800758a:	f7fd fb79 	bl	8004c80 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800758e:	4620      	mov	r0, r4
 8007590:	4904      	ldr	r1, [pc, #16]	; (80075a4 <CDC_Init_FS+0x24>)
 8007592:	f7fd fb7d 	bl	8004c90 <USBD_CDC_SetRxBuffer>
}
 8007596:	2000      	movs	r0, #0
 8007598:	bd10      	pop	{r4, pc}
 800759a:	bf00      	nop
 800759c:	20004dfc 	.word	0x20004dfc
 80075a0:	200058cc 	.word	0x200058cc
 80075a4:	200050cc 	.word	0x200050cc

080075a8 <CDC_Control_FS>:
  switch(cmd)
 80075a8:	2820      	cmp	r0, #32
 80075aa:	d00a      	beq.n	80075c2 <CDC_Control_FS+0x1a>
 80075ac:	2821      	cmp	r0, #33	; 0x21
 80075ae:	d106      	bne.n	80075be <CDC_Control_FS+0x16>
    	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 80075b0:	4b0a      	ldr	r3, [pc, #40]	; (80075dc <CDC_Control_FS+0x34>)
 80075b2:	6818      	ldr	r0, [r3, #0]
 80075b4:	889a      	ldrh	r2, [r3, #4]
 80075b6:	799b      	ldrb	r3, [r3, #6]
 80075b8:	6008      	str	r0, [r1, #0]
 80075ba:	808a      	strh	r2, [r1, #4]
 80075bc:	718b      	strb	r3, [r1, #6]
}
 80075be:	2000      	movs	r0, #0
 80075c0:	4770      	bx	lr
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 80075c2:	4b06      	ldr	r3, [pc, #24]	; (80075dc <CDC_Control_FS+0x34>)
 80075c4:	6808      	ldr	r0, [r1, #0]
 80075c6:	798a      	ldrb	r2, [r1, #6]
{
 80075c8:	b410      	push	{r4}
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 80075ca:	888c      	ldrh	r4, [r1, #4]
 80075cc:	6018      	str	r0, [r3, #0]
 80075ce:	809c      	strh	r4, [r3, #4]
 80075d0:	719a      	strb	r2, [r3, #6]
}
 80075d2:	2000      	movs	r0, #0
 80075d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop
 80075dc:	20000148 	.word	0x20000148

080075e0 <CDC_Transmit_FS>:
{
 80075e0:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80075e2:	4c09      	ldr	r4, [pc, #36]	; (8007608 <CDC_Transmit_FS+0x28>)
 80075e4:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  if (hcdc->TxState != 0){
 80075e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80075ec:	b10b      	cbz	r3, 80075f2 <CDC_Transmit_FS+0x12>
}
 80075ee:	2001      	movs	r0, #1
 80075f0:	bd10      	pop	{r4, pc}
 80075f2:	460a      	mov	r2, r1
 80075f4:	4601      	mov	r1, r0
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80075f6:	4620      	mov	r0, r4
 80075f8:	f7fd fb42 	bl	8004c80 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80075fc:	4620      	mov	r0, r4
}
 80075fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007602:	f7fd bb4b 	b.w	8004c9c <USBD_CDC_TransmitPacket>
 8007606:	bf00      	nop
 8007608:	20004dfc 	.word	0x20004dfc

0800760c <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800760c:	2312      	movs	r3, #18
 800760e:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8007610:	4800      	ldr	r0, [pc, #0]	; (8007614 <USBD_FS_DeviceDescriptor+0x8>)
 8007612:	4770      	bx	lr
 8007614:	2000016c 	.word	0x2000016c

08007618 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007618:	2304      	movs	r3, #4
 800761a:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 800761c:	4800      	ldr	r0, [pc, #0]	; (8007620 <USBD_FS_LangIDStrDescriptor+0x8>)
 800761e:	4770      	bx	lr
 8007620:	20000180 	.word	0x20000180

08007624 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007624:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007626:	4c04      	ldr	r4, [pc, #16]	; (8007638 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8007628:	4804      	ldr	r0, [pc, #16]	; (800763c <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800762a:	460a      	mov	r2, r1
 800762c:	4621      	mov	r1, r4
 800762e:	f7fd ff57 	bl	80054e0 <USBD_GetString>
  return USBD_StrDesc;
}
 8007632:	4620      	mov	r0, r4
 8007634:	bd10      	pop	{r4, pc}
 8007636:	bf00      	nop
 8007638:	200060cc 	.word	0x200060cc
 800763c:	0800a168 	.word	0x0800a168

08007640 <USBD_FS_ProductStrDescriptor>:
{
 8007640:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007642:	4c04      	ldr	r4, [pc, #16]	; (8007654 <USBD_FS_ProductStrDescriptor+0x14>)
 8007644:	4804      	ldr	r0, [pc, #16]	; (8007658 <USBD_FS_ProductStrDescriptor+0x18>)
 8007646:	460a      	mov	r2, r1
 8007648:	4621      	mov	r1, r4
 800764a:	f7fd ff49 	bl	80054e0 <USBD_GetString>
}
 800764e:	4620      	mov	r0, r4
 8007650:	bd10      	pop	{r4, pc}
 8007652:	bf00      	nop
 8007654:	200060cc 	.word	0x200060cc
 8007658:	0800a17c 	.word	0x0800a17c

0800765c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800765c:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800765e:	4c04      	ldr	r4, [pc, #16]	; (8007670 <USBD_FS_ConfigStrDescriptor+0x14>)
 8007660:	4804      	ldr	r0, [pc, #16]	; (8007674 <USBD_FS_ConfigStrDescriptor+0x18>)
 8007662:	460a      	mov	r2, r1
 8007664:	4621      	mov	r1, r4
 8007666:	f7fd ff3b 	bl	80054e0 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800766a:	4620      	mov	r0, r4
 800766c:	bd10      	pop	{r4, pc}
 800766e:	bf00      	nop
 8007670:	200060cc 	.word	0x200060cc
 8007674:	0800a14c 	.word	0x0800a14c

08007678 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007678:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800767a:	4c04      	ldr	r4, [pc, #16]	; (800768c <USBD_FS_InterfaceStrDescriptor+0x14>)
 800767c:	4804      	ldr	r0, [pc, #16]	; (8007690 <USBD_FS_InterfaceStrDescriptor+0x18>)
 800767e:	460a      	mov	r2, r1
 8007680:	4621      	mov	r1, r4
 8007682:	f7fd ff2d 	bl	80054e0 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8007686:	4620      	mov	r0, r4
 8007688:	bd10      	pop	{r4, pc}
 800768a:	bf00      	nop
 800768c:	200060cc 	.word	0x200060cc
 8007690:	0800a158 	.word	0x0800a158

08007694 <USBD_FS_SerialStrDescriptor>:
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007694:	4a44      	ldr	r2, [pc, #272]	; (80077a8 <USBD_FS_SerialStrDescriptor+0x114>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007696:	4b45      	ldr	r3, [pc, #276]	; (80077ac <USBD_FS_SerialStrDescriptor+0x118>)
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007698:	6812      	ldr	r2, [r2, #0]

  deviceserial0 += deviceserial2;
 800769a:	681b      	ldr	r3, [r3, #0]
  *length = USB_SIZ_STRING_SERIAL;
 800769c:	201a      	movs	r0, #26

  if (deviceserial0 != 0)
 800769e:	18d2      	adds	r2, r2, r3
  *length = USB_SIZ_STRING_SERIAL;
 80076a0:	8008      	strh	r0, [r1, #0]
  if (deviceserial0 != 0)
 80076a2:	d101      	bne.n	80076a8 <USBD_FS_SerialStrDescriptor+0x14>
}
 80076a4:	4842      	ldr	r0, [pc, #264]	; (80077b0 <USBD_FS_SerialStrDescriptor+0x11c>)
 80076a6:	4770      	bx	lr
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
  {
    if (((value >> 28)) < 0xA)
 80076a8:	0f13      	lsrs	r3, r2, #28
 80076aa:	b2d8      	uxtb	r0, r3
 80076ac:	2b09      	cmp	r3, #9
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80076ae:	4941      	ldr	r1, [pc, #260]	; (80077b4 <USBD_FS_SerialStrDescriptor+0x120>)
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80076b0:	4b3f      	ldr	r3, [pc, #252]	; (80077b0 <USBD_FS_SerialStrDescriptor+0x11c>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80076b2:	6809      	ldr	r1, [r1, #0]
      pbuf[2 * idx] = (value >> 28) + '0';
 80076b4:	bf94      	ite	ls
 80076b6:	3030      	addls	r0, #48	; 0x30
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80076b8:	3037      	addhi	r0, #55	; 0x37
{
 80076ba:	b410      	push	{r4}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80076bc:	7098      	strb	r0, [r3, #2]
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 80076be:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 80076c0:	f3c2 6003 	ubfx	r0, r2, #24, #4
 80076c4:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 80076c6:	70dc      	strb	r4, [r3, #3]
 80076c8:	b2c4      	uxtb	r4, r0
      pbuf[2 * idx] = (value >> 28) + '0';
 80076ca:	bf94      	ite	ls
 80076cc:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80076ce:	3437      	addhi	r4, #55	; 0x37
    if (((value >> 28)) < 0xA)
 80076d0:	f3c2 5003 	ubfx	r0, r2, #20, #4
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80076d4:	711c      	strb	r4, [r3, #4]
    pbuf[2 * idx + 1] = 0;
 80076d6:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 80076d8:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 80076da:	715c      	strb	r4, [r3, #5]
 80076dc:	b2c4      	uxtb	r4, r0
      pbuf[2 * idx] = (value >> 28) + '0';
 80076de:	bf94      	ite	ls
 80076e0:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80076e2:	3437      	addhi	r4, #55	; 0x37
    if (((value >> 28)) < 0xA)
 80076e4:	f3c2 4003 	ubfx	r0, r2, #16, #4
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80076e8:	719c      	strb	r4, [r3, #6]
    pbuf[2 * idx + 1] = 0;
 80076ea:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 80076ec:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 80076ee:	71dc      	strb	r4, [r3, #7]
 80076f0:	b2c4      	uxtb	r4, r0
      pbuf[2 * idx] = (value >> 28) + '0';
 80076f2:	bf94      	ite	ls
 80076f4:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80076f6:	3437      	addhi	r4, #55	; 0x37
    if (((value >> 28)) < 0xA)
 80076f8:	f3c2 3003 	ubfx	r0, r2, #12, #4
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80076fc:	721c      	strb	r4, [r3, #8]
    pbuf[2 * idx + 1] = 0;
 80076fe:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 8007700:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 8007702:	725c      	strb	r4, [r3, #9]
 8007704:	b2c4      	uxtb	r4, r0
      pbuf[2 * idx] = (value >> 28) + '0';
 8007706:	bf94      	ite	ls
 8007708:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800770a:	3437      	addhi	r4, #55	; 0x37
    if (((value >> 28)) < 0xA)
 800770c:	f3c2 2003 	ubfx	r0, r2, #8, #4
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007710:	729c      	strb	r4, [r3, #10]
    pbuf[2 * idx + 1] = 0;
 8007712:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 8007714:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 8007716:	72dc      	strb	r4, [r3, #11]
 8007718:	b2c4      	uxtb	r4, r0
      pbuf[2 * idx] = (value >> 28) + '0';
 800771a:	bf94      	ite	ls
 800771c:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800771e:	3437      	addhi	r4, #55	; 0x37
    if (((value >> 28)) < 0xA)
 8007720:	f3c2 1003 	ubfx	r0, r2, #4, #4
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007724:	731c      	strb	r4, [r3, #12]
    pbuf[2 * idx + 1] = 0;
 8007726:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 8007728:	2809      	cmp	r0, #9
 800772a:	f002 020f 	and.w	r2, r2, #15
    pbuf[2 * idx + 1] = 0;
 800772e:	735c      	strb	r4, [r3, #13]
 8007730:	b2c4      	uxtb	r4, r0
      pbuf[2 * idx] = (value >> 28) + '0';
 8007732:	bf98      	it	ls
 8007734:	3430      	addls	r4, #48	; 0x30
 8007736:	b2d0      	uxtb	r0, r2
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007738:	bf88      	it	hi
 800773a:	3437      	addhi	r4, #55	; 0x37
    if (((value >> 28)) < 0xA)
 800773c:	2a09      	cmp	r2, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800773e:	bf94      	ite	ls
 8007740:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007742:	3037      	addhi	r0, #55	; 0x37
    if (((value >> 28)) < 0xA)
 8007744:	0f0a      	lsrs	r2, r1, #28
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007746:	7418      	strb	r0, [r3, #16]
    pbuf[2 * idx + 1] = 0;
 8007748:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 800774a:	2a09      	cmp	r2, #9
    pbuf[2 * idx + 1] = 0;
 800774c:	7458      	strb	r0, [r3, #17]
 800774e:	b2d0      	uxtb	r0, r2
      pbuf[2 * idx] = (value >> 28) + '0';
 8007750:	bf94      	ite	ls
 8007752:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007754:	3037      	addhi	r0, #55	; 0x37
    if (((value >> 28)) < 0xA)
 8007756:	f3c1 6203 	ubfx	r2, r1, #24, #4
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800775a:	7498      	strb	r0, [r3, #18]
    pbuf[2 * idx + 1] = 0;
 800775c:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 800775e:	2a09      	cmp	r2, #9
    pbuf[2 * idx + 1] = 0;
 8007760:	74d8      	strb	r0, [r3, #19]
 8007762:	b2d0      	uxtb	r0, r2
      pbuf[2 * idx] = (value >> 28) + '0';
 8007764:	bf94      	ite	ls
 8007766:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007768:	3037      	addhi	r0, #55	; 0x37
    if (((value >> 28)) < 0xA)
 800776a:	f3c1 5203 	ubfx	r2, r1, #20, #4
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800776e:	7518      	strb	r0, [r3, #20]
    pbuf[2 * idx + 1] = 0;
 8007770:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 8007772:	2a09      	cmp	r2, #9
    pbuf[2 * idx + 1] = 0;
 8007774:	7558      	strb	r0, [r3, #21]
    if (((value >> 28)) < 0xA)
 8007776:	f3c1 4103 	ubfx	r1, r1, #16, #4
 800777a:	b2d0      	uxtb	r0, r2
      pbuf[2 * idx] = (value >> 28) + '0';
 800777c:	bf98      	it	ls
 800777e:	3030      	addls	r0, #48	; 0x30
 8007780:	b2ca      	uxtb	r2, r1
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007782:	bf88      	it	hi
 8007784:	3037      	addhi	r0, #55	; 0x37
    if (((value >> 28)) < 0xA)
 8007786:	2909      	cmp	r1, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8007788:	bf94      	ite	ls
 800778a:	3230      	addls	r2, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800778c:	3237      	addhi	r2, #55	; 0x37
 800778e:	739c      	strb	r4, [r3, #14]
 8007790:	7598      	strb	r0, [r3, #22]
    pbuf[2 * idx + 1] = 0;
 8007792:	2400      	movs	r4, #0
 8007794:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007796:	761a      	strb	r2, [r3, #24]
    pbuf[2 * idx + 1] = 0;
 8007798:	2200      	movs	r2, #0
 800779a:	75d8      	strb	r0, [r3, #23]
 800779c:	73dc      	strb	r4, [r3, #15]
 800779e:	765a      	strb	r2, [r3, #25]
}
 80077a0:	4803      	ldr	r0, [pc, #12]	; (80077b0 <USBD_FS_SerialStrDescriptor+0x11c>)
 80077a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077a6:	4770      	bx	lr
 80077a8:	1fff7a10 	.word	0x1fff7a10
 80077ac:	1fff7a18 	.word	0x1fff7a18
 80077b0:	20000184 	.word	0x20000184
 80077b4:	1fff7a14 	.word	0x1fff7a14

080077b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80077b8:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(pcdHandle->Instance==USB_OTG_FS)
 80077ba:	6803      	ldr	r3, [r0, #0]
{
 80077bc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077be:	2400      	movs	r4, #0
  if(pcdHandle->Instance==USB_OTG_FS)
 80077c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077c4:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80077c8:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80077cc:	9407      	str	r4, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 80077ce:	d001      	beq.n	80077d4 <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80077d0:	b008      	add	sp, #32
 80077d2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80077d4:	4d17      	ldr	r5, [pc, #92]	; (8007834 <HAL_PCD_MspInit+0x7c>)
 80077d6:	9401      	str	r4, [sp, #4]
 80077d8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077da:	4817      	ldr	r0, [pc, #92]	; (8007838 <HAL_PCD_MspInit+0x80>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80077dc:	f043 0301 	orr.w	r3, r3, #1
 80077e0:	632b      	str	r3, [r5, #48]	; 0x30
 80077e2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80077e4:	f003 0301 	and.w	r3, r3, #1
 80077e8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80077ea:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077ee:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077f0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80077f2:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077f4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077f6:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80077f8:	230a      	movs	r3, #10
 80077fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80077fe:	9e01      	ldr	r6, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007800:	f7fa f948 	bl	8001a94 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007804:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8007806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800780a:	636b      	str	r3, [r5, #52]	; 0x34
 800780c:	9402      	str	r4, [sp, #8]
 800780e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8007810:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007814:	646b      	str	r3, [r5, #68]	; 0x44
 8007816:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8007818:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800781c:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800781e:	4622      	mov	r2, r4
 8007820:	4621      	mov	r1, r4
 8007822:	2043      	movs	r0, #67	; 0x43
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007824:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007826:	f7fa f8f1 	bl	8001a0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800782a:	2043      	movs	r0, #67	; 0x43
 800782c:	f7fa f924 	bl	8001a78 <HAL_NVIC_EnableIRQ>
}
 8007830:	b008      	add	sp, #32
 8007832:	bd70      	pop	{r4, r5, r6, pc}
 8007834:	40023800 	.word	0x40023800
 8007838:	40020000 	.word	0x40020000

0800783c <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800783c:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8007840:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8007844:	f7fd ba98 	b.w	8004d78 <USBD_LL_SetupStage>

08007848 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007848:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800784c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007850:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8007854:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007858:	f7fd babe 	b.w	8004dd8 <USBD_LL_DataOutStage>

0800785c <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800785c:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8007860:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007864:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8007868:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800786a:	f7fd baeb 	b.w	8004e44 <USBD_LL_DataInStage>
 800786e:	bf00      	nop

08007870 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007870:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8007874:	f7fd bb88 	b.w	8004f88 <USBD_LL_SOF>

08007878 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007878:	68c3      	ldr	r3, [r0, #12]
 800787a:	2b02      	cmp	r3, #2
{
 800787c:	b510      	push	{r4, lr}
 800787e:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007880:	d001      	beq.n	8007886 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8007882:	f7f9 fcdf 	bl	8001244 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007886:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 800788a:	2101      	movs	r1, #1
 800788c:	f7fd fb64 	bl	8004f58 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007890:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 8007894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007898:	f7fd bb36 	b.w	8004f08 <USBD_LL_Reset>

0800789c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800789c:	b510      	push	{r4, lr}
 800789e:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80078a0:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80078a4:	f7fd fb5c 	bl	8004f60 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80078a8:	6822      	ldr	r2, [r4, #0]
 80078aa:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 80078ae:	f043 0301 	orr.w	r3, r3, #1
 80078b2:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80078b6:	6a23      	ldr	r3, [r4, #32]
 80078b8:	b123      	cbz	r3, 80078c4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80078ba:	4a03      	ldr	r2, [pc, #12]	; (80078c8 <HAL_PCD_SuspendCallback+0x2c>)
 80078bc:	6913      	ldr	r3, [r2, #16]
 80078be:	f043 0306 	orr.w	r3, r3, #6
 80078c2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80078c4:	bd10      	pop	{r4, pc}
 80078c6:	bf00      	nop
 80078c8:	e000ed00 	.word	0xe000ed00

080078cc <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80078cc:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80078d0:	f7fd bb50 	b.w	8004f74 <USBD_LL_Resume>

080078d4 <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80078d4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80078d8:	f7fd bb66 	b.w	8004fa8 <USBD_LL_IsoOUTIncomplete>

080078dc <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80078dc:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80078e0:	f7fd bb60 	b.w	8004fa4 <USBD_LL_IsoINIncomplete>

080078e4 <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80078e4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80078e8:	f7fd bb60 	b.w	8004fac <USBD_LL_DevConnected>

080078ec <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80078ec:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80078f0:	f7fd bb5e 	b.w	8004fb0 <USBD_LL_DevDisconnected>

080078f4 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80078f4:	7802      	ldrb	r2, [r0, #0]
 80078f6:	b10a      	cbz	r2, 80078fc <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 80078f8:	2000      	movs	r0, #0
 80078fa:	4770      	bx	lr
{
 80078fc:	b538      	push	{r3, r4, r5, lr}
  hpcd_USB_OTG_FS.pData = pdev;
 80078fe:	4b15      	ldr	r3, [pc, #84]	; (8007954 <USBD_LL_Init+0x60>)
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007900:	2102      	movs	r1, #2
  hpcd_USB_OTG_FS.pData = pdev;
 8007902:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007906:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800790a:	2404      	movs	r4, #4
  pdev->pData = &hpcd_USB_OTG_FS;
 800790c:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007910:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007912:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007914:	e9c3 2207 	strd	r2, r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007918:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800791a:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800791e:	e9c3 5400 	strd	r5, r4, [r3]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007922:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007924:	6199      	str	r1, [r3, #24]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007926:	f7fa f98f 	bl	8001c48 <HAL_PCD_Init>
 800792a:	b978      	cbnz	r0, 800794c <USBD_LL_Init+0x58>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800792c:	2180      	movs	r1, #128	; 0x80
 800792e:	4809      	ldr	r0, [pc, #36]	; (8007954 <USBD_LL_Init+0x60>)
 8007930:	f7fa feb0 	bl	8002694 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007934:	2240      	movs	r2, #64	; 0x40
 8007936:	2100      	movs	r1, #0
 8007938:	4806      	ldr	r0, [pc, #24]	; (8007954 <USBD_LL_Init+0x60>)
 800793a:	f7fa fe87 	bl	800264c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800793e:	2280      	movs	r2, #128	; 0x80
 8007940:	2101      	movs	r1, #1
 8007942:	4804      	ldr	r0, [pc, #16]	; (8007954 <USBD_LL_Init+0x60>)
 8007944:	f7fa fe82 	bl	800264c <HAL_PCDEx_SetTxFiFo>
}
 8007948:	2000      	movs	r0, #0
 800794a:	bd38      	pop	{r3, r4, r5, pc}
    Error_Handler( );
 800794c:	f7f9 fc7a 	bl	8001244 <Error_Handler>
 8007950:	e7ec      	b.n	800792c <USBD_LL_Init+0x38>
 8007952:	bf00      	nop
 8007954:	200062cc 	.word	0x200062cc

08007958 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007958:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 800795a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800795e:	f7fa f9ff 	bl	8001d60 <HAL_PCD_Start>
 8007962:	2803      	cmp	r0, #3
 8007964:	bf96      	itet	ls
 8007966:	4b02      	ldrls	r3, [pc, #8]	; (8007970 <USBD_LL_Start+0x18>)
 8007968:	2003      	movhi	r0, #3
 800796a:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 800796c:	bd08      	pop	{r3, pc}
 800796e:	bf00      	nop
 8007970:	0800a194 	.word	0x0800a194

08007974 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007974:	b510      	push	{r4, lr}
 8007976:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007978:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800797c:	4613      	mov	r3, r2
 800797e:	4622      	mov	r2, r4
 8007980:	f7fa fd2e 	bl	80023e0 <HAL_PCD_EP_Open>
 8007984:	2803      	cmp	r0, #3
 8007986:	bf96      	itet	ls
 8007988:	4b01      	ldrls	r3, [pc, #4]	; (8007990 <USBD_LL_OpenEP+0x1c>)
 800798a:	2003      	movhi	r0, #3
 800798c:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 800798e:	bd10      	pop	{r4, pc}
 8007990:	0800a194 	.word	0x0800a194

08007994 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007994:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007996:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800799a:	f7fa fd55 	bl	8002448 <HAL_PCD_EP_Close>
 800799e:	2803      	cmp	r0, #3
 80079a0:	bf96      	itet	ls
 80079a2:	4b02      	ldrls	r3, [pc, #8]	; (80079ac <USBD_LL_CloseEP+0x18>)
 80079a4:	2003      	movhi	r0, #3
 80079a6:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 80079a8:	bd08      	pop	{r3, pc}
 80079aa:	bf00      	nop
 80079ac:	0800a194 	.word	0x0800a194

080079b0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079b0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80079b2:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80079b6:	f7fa fdcd 	bl	8002554 <HAL_PCD_EP_SetStall>
 80079ba:	2803      	cmp	r0, #3
 80079bc:	bf96      	itet	ls
 80079be:	4b02      	ldrls	r3, [pc, #8]	; (80079c8 <USBD_LL_StallEP+0x18>)
 80079c0:	2003      	movhi	r0, #3
 80079c2:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 80079c4:	bd08      	pop	{r3, pc}
 80079c6:	bf00      	nop
 80079c8:	0800a194 	.word	0x0800a194

080079cc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079cc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80079ce:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80079d2:	f7fa fe03 	bl	80025dc <HAL_PCD_EP_ClrStall>
 80079d6:	2803      	cmp	r0, #3
 80079d8:	bf96      	itet	ls
 80079da:	4b02      	ldrls	r3, [pc, #8]	; (80079e4 <USBD_LL_ClearStallEP+0x18>)
 80079dc:	2003      	movhi	r0, #3
 80079de:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 80079e0:	bd08      	pop	{r3, pc}
 80079e2:	bf00      	nop
 80079e4:	0800a194 	.word	0x0800a194

080079e8 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;

  if((ep_addr & 0x80) == 0x80)
 80079e8:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80079ea:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 80079ee:	d406      	bmi.n	80079fe <USBD_LL_IsStallEP+0x16>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80079f0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80079f4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80079f8:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
  }
}
 80079fc:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80079fe:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8007a02:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8007a06:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8007a0a:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 8007a0e:	4770      	bx	lr

08007a10 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007a10:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007a12:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8007a16:	f7fa fccf 	bl	80023b8 <HAL_PCD_SetAddress>
 8007a1a:	2803      	cmp	r0, #3
 8007a1c:	bf96      	itet	ls
 8007a1e:	4b02      	ldrls	r3, [pc, #8]	; (8007a28 <USBD_LL_SetUSBAddress+0x18>)
 8007a20:	2003      	movhi	r0, #3
 8007a22:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8007a24:	bd08      	pop	{r3, pc}
 8007a26:	bf00      	nop
 8007a28:	0800a194 	.word	0x0800a194

08007a2c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007a2c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007a2e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8007a32:	f7fa fd6b 	bl	800250c <HAL_PCD_EP_Transmit>
 8007a36:	2803      	cmp	r0, #3
 8007a38:	bf96      	itet	ls
 8007a3a:	4b02      	ldrls	r3, [pc, #8]	; (8007a44 <USBD_LL_Transmit+0x18>)
 8007a3c:	2003      	movhi	r0, #3
 8007a3e:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8007a40:	bd08      	pop	{r3, pc}
 8007a42:	bf00      	nop
 8007a44:	0800a194 	.word	0x0800a194

08007a48 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007a48:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007a4a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8007a4e:	f7fa fd2b 	bl	80024a8 <HAL_PCD_EP_Receive>
 8007a52:	2803      	cmp	r0, #3
 8007a54:	bf96      	itet	ls
 8007a56:	4b02      	ldrls	r3, [pc, #8]	; (8007a60 <USBD_LL_PrepareReceive+0x18>)
 8007a58:	2003      	movhi	r0, #3
 8007a5a:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8007a5c:	bd08      	pop	{r3, pc}
 8007a5e:	bf00      	nop
 8007a60:	0800a194 	.word	0x0800a194

08007a64 <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007a64:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8007a68:	f7fa bd46 	b.w	80024f8 <HAL_PCD_EP_GetRxCount>

08007a6c <__errno>:
 8007a6c:	4b01      	ldr	r3, [pc, #4]	; (8007a74 <__errno+0x8>)
 8007a6e:	6818      	ldr	r0, [r3, #0]
 8007a70:	4770      	bx	lr
 8007a72:	bf00      	nop
 8007a74:	200001a0 	.word	0x200001a0

08007a78 <__libc_init_array>:
 8007a78:	b570      	push	{r4, r5, r6, lr}
 8007a7a:	4e0d      	ldr	r6, [pc, #52]	; (8007ab0 <__libc_init_array+0x38>)
 8007a7c:	4c0d      	ldr	r4, [pc, #52]	; (8007ab4 <__libc_init_array+0x3c>)
 8007a7e:	1ba4      	subs	r4, r4, r6
 8007a80:	10a4      	asrs	r4, r4, #2
 8007a82:	2500      	movs	r5, #0
 8007a84:	42a5      	cmp	r5, r4
 8007a86:	d109      	bne.n	8007a9c <__libc_init_array+0x24>
 8007a88:	4e0b      	ldr	r6, [pc, #44]	; (8007ab8 <__libc_init_array+0x40>)
 8007a8a:	4c0c      	ldr	r4, [pc, #48]	; (8007abc <__libc_init_array+0x44>)
 8007a8c:	f002 fb06 	bl	800a09c <_init>
 8007a90:	1ba4      	subs	r4, r4, r6
 8007a92:	10a4      	asrs	r4, r4, #2
 8007a94:	2500      	movs	r5, #0
 8007a96:	42a5      	cmp	r5, r4
 8007a98:	d105      	bne.n	8007aa6 <__libc_init_array+0x2e>
 8007a9a:	bd70      	pop	{r4, r5, r6, pc}
 8007a9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007aa0:	4798      	blx	r3
 8007aa2:	3501      	adds	r5, #1
 8007aa4:	e7ee      	b.n	8007a84 <__libc_init_array+0xc>
 8007aa6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007aaa:	4798      	blx	r3
 8007aac:	3501      	adds	r5, #1
 8007aae:	e7f2      	b.n	8007a96 <__libc_init_array+0x1e>
 8007ab0:	0800a440 	.word	0x0800a440
 8007ab4:	0800a440 	.word	0x0800a440
 8007ab8:	0800a440 	.word	0x0800a440
 8007abc:	0800a444 	.word	0x0800a444

08007ac0 <malloc>:
 8007ac0:	4b02      	ldr	r3, [pc, #8]	; (8007acc <malloc+0xc>)
 8007ac2:	4601      	mov	r1, r0
 8007ac4:	6818      	ldr	r0, [r3, #0]
 8007ac6:	f000 b86d 	b.w	8007ba4 <_malloc_r>
 8007aca:	bf00      	nop
 8007acc:	200001a0 	.word	0x200001a0

08007ad0 <free>:
 8007ad0:	4b02      	ldr	r3, [pc, #8]	; (8007adc <free+0xc>)
 8007ad2:	4601      	mov	r1, r0
 8007ad4:	6818      	ldr	r0, [r3, #0]
 8007ad6:	f000 b817 	b.w	8007b08 <_free_r>
 8007ada:	bf00      	nop
 8007adc:	200001a0 	.word	0x200001a0

08007ae0 <memcpy>:
 8007ae0:	b510      	push	{r4, lr}
 8007ae2:	1e43      	subs	r3, r0, #1
 8007ae4:	440a      	add	r2, r1
 8007ae6:	4291      	cmp	r1, r2
 8007ae8:	d100      	bne.n	8007aec <memcpy+0xc>
 8007aea:	bd10      	pop	{r4, pc}
 8007aec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007af0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007af4:	e7f7      	b.n	8007ae6 <memcpy+0x6>

08007af6 <memset>:
 8007af6:	4402      	add	r2, r0
 8007af8:	4603      	mov	r3, r0
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d100      	bne.n	8007b00 <memset+0xa>
 8007afe:	4770      	bx	lr
 8007b00:	f803 1b01 	strb.w	r1, [r3], #1
 8007b04:	e7f9      	b.n	8007afa <memset+0x4>
	...

08007b08 <_free_r>:
 8007b08:	b538      	push	{r3, r4, r5, lr}
 8007b0a:	4605      	mov	r5, r0
 8007b0c:	2900      	cmp	r1, #0
 8007b0e:	d045      	beq.n	8007b9c <_free_r+0x94>
 8007b10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b14:	1f0c      	subs	r4, r1, #4
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	bfb8      	it	lt
 8007b1a:	18e4      	addlt	r4, r4, r3
 8007b1c:	f001 fb8e 	bl	800923c <__malloc_lock>
 8007b20:	4a1f      	ldr	r2, [pc, #124]	; (8007ba0 <_free_r+0x98>)
 8007b22:	6813      	ldr	r3, [r2, #0]
 8007b24:	4610      	mov	r0, r2
 8007b26:	b933      	cbnz	r3, 8007b36 <_free_r+0x2e>
 8007b28:	6063      	str	r3, [r4, #4]
 8007b2a:	6014      	str	r4, [r2, #0]
 8007b2c:	4628      	mov	r0, r5
 8007b2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b32:	f001 bb84 	b.w	800923e <__malloc_unlock>
 8007b36:	42a3      	cmp	r3, r4
 8007b38:	d90c      	bls.n	8007b54 <_free_r+0x4c>
 8007b3a:	6821      	ldr	r1, [r4, #0]
 8007b3c:	1862      	adds	r2, r4, r1
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	bf04      	itt	eq
 8007b42:	681a      	ldreq	r2, [r3, #0]
 8007b44:	685b      	ldreq	r3, [r3, #4]
 8007b46:	6063      	str	r3, [r4, #4]
 8007b48:	bf04      	itt	eq
 8007b4a:	1852      	addeq	r2, r2, r1
 8007b4c:	6022      	streq	r2, [r4, #0]
 8007b4e:	6004      	str	r4, [r0, #0]
 8007b50:	e7ec      	b.n	8007b2c <_free_r+0x24>
 8007b52:	4613      	mov	r3, r2
 8007b54:	685a      	ldr	r2, [r3, #4]
 8007b56:	b10a      	cbz	r2, 8007b5c <_free_r+0x54>
 8007b58:	42a2      	cmp	r2, r4
 8007b5a:	d9fa      	bls.n	8007b52 <_free_r+0x4a>
 8007b5c:	6819      	ldr	r1, [r3, #0]
 8007b5e:	1858      	adds	r0, r3, r1
 8007b60:	42a0      	cmp	r0, r4
 8007b62:	d10b      	bne.n	8007b7c <_free_r+0x74>
 8007b64:	6820      	ldr	r0, [r4, #0]
 8007b66:	4401      	add	r1, r0
 8007b68:	1858      	adds	r0, r3, r1
 8007b6a:	4282      	cmp	r2, r0
 8007b6c:	6019      	str	r1, [r3, #0]
 8007b6e:	d1dd      	bne.n	8007b2c <_free_r+0x24>
 8007b70:	6810      	ldr	r0, [r2, #0]
 8007b72:	6852      	ldr	r2, [r2, #4]
 8007b74:	605a      	str	r2, [r3, #4]
 8007b76:	4401      	add	r1, r0
 8007b78:	6019      	str	r1, [r3, #0]
 8007b7a:	e7d7      	b.n	8007b2c <_free_r+0x24>
 8007b7c:	d902      	bls.n	8007b84 <_free_r+0x7c>
 8007b7e:	230c      	movs	r3, #12
 8007b80:	602b      	str	r3, [r5, #0]
 8007b82:	e7d3      	b.n	8007b2c <_free_r+0x24>
 8007b84:	6820      	ldr	r0, [r4, #0]
 8007b86:	1821      	adds	r1, r4, r0
 8007b88:	428a      	cmp	r2, r1
 8007b8a:	bf04      	itt	eq
 8007b8c:	6811      	ldreq	r1, [r2, #0]
 8007b8e:	6852      	ldreq	r2, [r2, #4]
 8007b90:	6062      	str	r2, [r4, #4]
 8007b92:	bf04      	itt	eq
 8007b94:	1809      	addeq	r1, r1, r0
 8007b96:	6021      	streq	r1, [r4, #0]
 8007b98:	605c      	str	r4, [r3, #4]
 8007b9a:	e7c7      	b.n	8007b2c <_free_r+0x24>
 8007b9c:	bd38      	pop	{r3, r4, r5, pc}
 8007b9e:	bf00      	nop
 8007ba0:	20004cf0 	.word	0x20004cf0

08007ba4 <_malloc_r>:
 8007ba4:	b570      	push	{r4, r5, r6, lr}
 8007ba6:	1ccd      	adds	r5, r1, #3
 8007ba8:	f025 0503 	bic.w	r5, r5, #3
 8007bac:	3508      	adds	r5, #8
 8007bae:	2d0c      	cmp	r5, #12
 8007bb0:	bf38      	it	cc
 8007bb2:	250c      	movcc	r5, #12
 8007bb4:	2d00      	cmp	r5, #0
 8007bb6:	4606      	mov	r6, r0
 8007bb8:	db01      	blt.n	8007bbe <_malloc_r+0x1a>
 8007bba:	42a9      	cmp	r1, r5
 8007bbc:	d903      	bls.n	8007bc6 <_malloc_r+0x22>
 8007bbe:	230c      	movs	r3, #12
 8007bc0:	6033      	str	r3, [r6, #0]
 8007bc2:	2000      	movs	r0, #0
 8007bc4:	bd70      	pop	{r4, r5, r6, pc}
 8007bc6:	f001 fb39 	bl	800923c <__malloc_lock>
 8007bca:	4a21      	ldr	r2, [pc, #132]	; (8007c50 <_malloc_r+0xac>)
 8007bcc:	6814      	ldr	r4, [r2, #0]
 8007bce:	4621      	mov	r1, r4
 8007bd0:	b991      	cbnz	r1, 8007bf8 <_malloc_r+0x54>
 8007bd2:	4c20      	ldr	r4, [pc, #128]	; (8007c54 <_malloc_r+0xb0>)
 8007bd4:	6823      	ldr	r3, [r4, #0]
 8007bd6:	b91b      	cbnz	r3, 8007be0 <_malloc_r+0x3c>
 8007bd8:	4630      	mov	r0, r6
 8007bda:	f000 fc99 	bl	8008510 <_sbrk_r>
 8007bde:	6020      	str	r0, [r4, #0]
 8007be0:	4629      	mov	r1, r5
 8007be2:	4630      	mov	r0, r6
 8007be4:	f000 fc94 	bl	8008510 <_sbrk_r>
 8007be8:	1c43      	adds	r3, r0, #1
 8007bea:	d124      	bne.n	8007c36 <_malloc_r+0x92>
 8007bec:	230c      	movs	r3, #12
 8007bee:	6033      	str	r3, [r6, #0]
 8007bf0:	4630      	mov	r0, r6
 8007bf2:	f001 fb24 	bl	800923e <__malloc_unlock>
 8007bf6:	e7e4      	b.n	8007bc2 <_malloc_r+0x1e>
 8007bf8:	680b      	ldr	r3, [r1, #0]
 8007bfa:	1b5b      	subs	r3, r3, r5
 8007bfc:	d418      	bmi.n	8007c30 <_malloc_r+0x8c>
 8007bfe:	2b0b      	cmp	r3, #11
 8007c00:	d90f      	bls.n	8007c22 <_malloc_r+0x7e>
 8007c02:	600b      	str	r3, [r1, #0]
 8007c04:	50cd      	str	r5, [r1, r3]
 8007c06:	18cc      	adds	r4, r1, r3
 8007c08:	4630      	mov	r0, r6
 8007c0a:	f001 fb18 	bl	800923e <__malloc_unlock>
 8007c0e:	f104 000b 	add.w	r0, r4, #11
 8007c12:	1d23      	adds	r3, r4, #4
 8007c14:	f020 0007 	bic.w	r0, r0, #7
 8007c18:	1ac3      	subs	r3, r0, r3
 8007c1a:	d0d3      	beq.n	8007bc4 <_malloc_r+0x20>
 8007c1c:	425a      	negs	r2, r3
 8007c1e:	50e2      	str	r2, [r4, r3]
 8007c20:	e7d0      	b.n	8007bc4 <_malloc_r+0x20>
 8007c22:	428c      	cmp	r4, r1
 8007c24:	684b      	ldr	r3, [r1, #4]
 8007c26:	bf16      	itet	ne
 8007c28:	6063      	strne	r3, [r4, #4]
 8007c2a:	6013      	streq	r3, [r2, #0]
 8007c2c:	460c      	movne	r4, r1
 8007c2e:	e7eb      	b.n	8007c08 <_malloc_r+0x64>
 8007c30:	460c      	mov	r4, r1
 8007c32:	6849      	ldr	r1, [r1, #4]
 8007c34:	e7cc      	b.n	8007bd0 <_malloc_r+0x2c>
 8007c36:	1cc4      	adds	r4, r0, #3
 8007c38:	f024 0403 	bic.w	r4, r4, #3
 8007c3c:	42a0      	cmp	r0, r4
 8007c3e:	d005      	beq.n	8007c4c <_malloc_r+0xa8>
 8007c40:	1a21      	subs	r1, r4, r0
 8007c42:	4630      	mov	r0, r6
 8007c44:	f000 fc64 	bl	8008510 <_sbrk_r>
 8007c48:	3001      	adds	r0, #1
 8007c4a:	d0cf      	beq.n	8007bec <_malloc_r+0x48>
 8007c4c:	6025      	str	r5, [r4, #0]
 8007c4e:	e7db      	b.n	8007c08 <_malloc_r+0x64>
 8007c50:	20004cf0 	.word	0x20004cf0
 8007c54:	20004cf4 	.word	0x20004cf4

08007c58 <__cvt>:
 8007c58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c5c:	ec55 4b10 	vmov	r4, r5, d0
 8007c60:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007c62:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007c66:	2d00      	cmp	r5, #0
 8007c68:	460e      	mov	r6, r1
 8007c6a:	4691      	mov	r9, r2
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	bfb8      	it	lt
 8007c70:	4622      	movlt	r2, r4
 8007c72:	462b      	mov	r3, r5
 8007c74:	f027 0720 	bic.w	r7, r7, #32
 8007c78:	bfbb      	ittet	lt
 8007c7a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007c7e:	461d      	movlt	r5, r3
 8007c80:	2300      	movge	r3, #0
 8007c82:	232d      	movlt	r3, #45	; 0x2d
 8007c84:	bfb8      	it	lt
 8007c86:	4614      	movlt	r4, r2
 8007c88:	2f46      	cmp	r7, #70	; 0x46
 8007c8a:	700b      	strb	r3, [r1, #0]
 8007c8c:	d004      	beq.n	8007c98 <__cvt+0x40>
 8007c8e:	2f45      	cmp	r7, #69	; 0x45
 8007c90:	d100      	bne.n	8007c94 <__cvt+0x3c>
 8007c92:	3601      	adds	r6, #1
 8007c94:	2102      	movs	r1, #2
 8007c96:	e000      	b.n	8007c9a <__cvt+0x42>
 8007c98:	2103      	movs	r1, #3
 8007c9a:	ab03      	add	r3, sp, #12
 8007c9c:	9301      	str	r3, [sp, #4]
 8007c9e:	ab02      	add	r3, sp, #8
 8007ca0:	9300      	str	r3, [sp, #0]
 8007ca2:	4632      	mov	r2, r6
 8007ca4:	4653      	mov	r3, sl
 8007ca6:	ec45 4b10 	vmov	d0, r4, r5
 8007caa:	f000 fd01 	bl	80086b0 <_dtoa_r>
 8007cae:	2f47      	cmp	r7, #71	; 0x47
 8007cb0:	4680      	mov	r8, r0
 8007cb2:	d102      	bne.n	8007cba <__cvt+0x62>
 8007cb4:	f019 0f01 	tst.w	r9, #1
 8007cb8:	d026      	beq.n	8007d08 <__cvt+0xb0>
 8007cba:	2f46      	cmp	r7, #70	; 0x46
 8007cbc:	eb08 0906 	add.w	r9, r8, r6
 8007cc0:	d111      	bne.n	8007ce6 <__cvt+0x8e>
 8007cc2:	f898 3000 	ldrb.w	r3, [r8]
 8007cc6:	2b30      	cmp	r3, #48	; 0x30
 8007cc8:	d10a      	bne.n	8007ce0 <__cvt+0x88>
 8007cca:	2200      	movs	r2, #0
 8007ccc:	2300      	movs	r3, #0
 8007cce:	4620      	mov	r0, r4
 8007cd0:	4629      	mov	r1, r5
 8007cd2:	f7f8 ff01 	bl	8000ad8 <__aeabi_dcmpeq>
 8007cd6:	b918      	cbnz	r0, 8007ce0 <__cvt+0x88>
 8007cd8:	f1c6 0601 	rsb	r6, r6, #1
 8007cdc:	f8ca 6000 	str.w	r6, [sl]
 8007ce0:	f8da 3000 	ldr.w	r3, [sl]
 8007ce4:	4499      	add	r9, r3
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	2300      	movs	r3, #0
 8007cea:	4620      	mov	r0, r4
 8007cec:	4629      	mov	r1, r5
 8007cee:	f7f8 fef3 	bl	8000ad8 <__aeabi_dcmpeq>
 8007cf2:	b938      	cbnz	r0, 8007d04 <__cvt+0xac>
 8007cf4:	2230      	movs	r2, #48	; 0x30
 8007cf6:	9b03      	ldr	r3, [sp, #12]
 8007cf8:	454b      	cmp	r3, r9
 8007cfa:	d205      	bcs.n	8007d08 <__cvt+0xb0>
 8007cfc:	1c59      	adds	r1, r3, #1
 8007cfe:	9103      	str	r1, [sp, #12]
 8007d00:	701a      	strb	r2, [r3, #0]
 8007d02:	e7f8      	b.n	8007cf6 <__cvt+0x9e>
 8007d04:	f8cd 900c 	str.w	r9, [sp, #12]
 8007d08:	9b03      	ldr	r3, [sp, #12]
 8007d0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d0c:	eba3 0308 	sub.w	r3, r3, r8
 8007d10:	4640      	mov	r0, r8
 8007d12:	6013      	str	r3, [r2, #0]
 8007d14:	b004      	add	sp, #16
 8007d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007d1a <__exponent>:
 8007d1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d1c:	2900      	cmp	r1, #0
 8007d1e:	4604      	mov	r4, r0
 8007d20:	bfba      	itte	lt
 8007d22:	4249      	neglt	r1, r1
 8007d24:	232d      	movlt	r3, #45	; 0x2d
 8007d26:	232b      	movge	r3, #43	; 0x2b
 8007d28:	2909      	cmp	r1, #9
 8007d2a:	f804 2b02 	strb.w	r2, [r4], #2
 8007d2e:	7043      	strb	r3, [r0, #1]
 8007d30:	dd20      	ble.n	8007d74 <__exponent+0x5a>
 8007d32:	f10d 0307 	add.w	r3, sp, #7
 8007d36:	461f      	mov	r7, r3
 8007d38:	260a      	movs	r6, #10
 8007d3a:	fb91 f5f6 	sdiv	r5, r1, r6
 8007d3e:	fb06 1115 	mls	r1, r6, r5, r1
 8007d42:	3130      	adds	r1, #48	; 0x30
 8007d44:	2d09      	cmp	r5, #9
 8007d46:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007d4a:	f103 32ff 	add.w	r2, r3, #4294967295
 8007d4e:	4629      	mov	r1, r5
 8007d50:	dc09      	bgt.n	8007d66 <__exponent+0x4c>
 8007d52:	3130      	adds	r1, #48	; 0x30
 8007d54:	3b02      	subs	r3, #2
 8007d56:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007d5a:	42bb      	cmp	r3, r7
 8007d5c:	4622      	mov	r2, r4
 8007d5e:	d304      	bcc.n	8007d6a <__exponent+0x50>
 8007d60:	1a10      	subs	r0, r2, r0
 8007d62:	b003      	add	sp, #12
 8007d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d66:	4613      	mov	r3, r2
 8007d68:	e7e7      	b.n	8007d3a <__exponent+0x20>
 8007d6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d6e:	f804 2b01 	strb.w	r2, [r4], #1
 8007d72:	e7f2      	b.n	8007d5a <__exponent+0x40>
 8007d74:	2330      	movs	r3, #48	; 0x30
 8007d76:	4419      	add	r1, r3
 8007d78:	7083      	strb	r3, [r0, #2]
 8007d7a:	1d02      	adds	r2, r0, #4
 8007d7c:	70c1      	strb	r1, [r0, #3]
 8007d7e:	e7ef      	b.n	8007d60 <__exponent+0x46>

08007d80 <_printf_float>:
 8007d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d84:	b08d      	sub	sp, #52	; 0x34
 8007d86:	460c      	mov	r4, r1
 8007d88:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007d8c:	4616      	mov	r6, r2
 8007d8e:	461f      	mov	r7, r3
 8007d90:	4605      	mov	r5, r0
 8007d92:	f001 fa45 	bl	8009220 <_localeconv_r>
 8007d96:	6803      	ldr	r3, [r0, #0]
 8007d98:	9304      	str	r3, [sp, #16]
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f7f8 fa20 	bl	80001e0 <strlen>
 8007da0:	2300      	movs	r3, #0
 8007da2:	930a      	str	r3, [sp, #40]	; 0x28
 8007da4:	f8d8 3000 	ldr.w	r3, [r8]
 8007da8:	9005      	str	r0, [sp, #20]
 8007daa:	3307      	adds	r3, #7
 8007dac:	f023 0307 	bic.w	r3, r3, #7
 8007db0:	f103 0208 	add.w	r2, r3, #8
 8007db4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007db8:	f8d4 b000 	ldr.w	fp, [r4]
 8007dbc:	f8c8 2000 	str.w	r2, [r8]
 8007dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007dc8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007dcc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007dd0:	9307      	str	r3, [sp, #28]
 8007dd2:	f8cd 8018 	str.w	r8, [sp, #24]
 8007dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8007dda:	4ba7      	ldr	r3, [pc, #668]	; (8008078 <_printf_float+0x2f8>)
 8007ddc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007de0:	f7f8 feac 	bl	8000b3c <__aeabi_dcmpun>
 8007de4:	bb70      	cbnz	r0, 8007e44 <_printf_float+0xc4>
 8007de6:	f04f 32ff 	mov.w	r2, #4294967295
 8007dea:	4ba3      	ldr	r3, [pc, #652]	; (8008078 <_printf_float+0x2f8>)
 8007dec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007df0:	f7f8 fe86 	bl	8000b00 <__aeabi_dcmple>
 8007df4:	bb30      	cbnz	r0, 8007e44 <_printf_float+0xc4>
 8007df6:	2200      	movs	r2, #0
 8007df8:	2300      	movs	r3, #0
 8007dfa:	4640      	mov	r0, r8
 8007dfc:	4649      	mov	r1, r9
 8007dfe:	f7f8 fe75 	bl	8000aec <__aeabi_dcmplt>
 8007e02:	b110      	cbz	r0, 8007e0a <_printf_float+0x8a>
 8007e04:	232d      	movs	r3, #45	; 0x2d
 8007e06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e0a:	4a9c      	ldr	r2, [pc, #624]	; (800807c <_printf_float+0x2fc>)
 8007e0c:	4b9c      	ldr	r3, [pc, #624]	; (8008080 <_printf_float+0x300>)
 8007e0e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007e12:	bf8c      	ite	hi
 8007e14:	4690      	movhi	r8, r2
 8007e16:	4698      	movls	r8, r3
 8007e18:	2303      	movs	r3, #3
 8007e1a:	f02b 0204 	bic.w	r2, fp, #4
 8007e1e:	6123      	str	r3, [r4, #16]
 8007e20:	6022      	str	r2, [r4, #0]
 8007e22:	f04f 0900 	mov.w	r9, #0
 8007e26:	9700      	str	r7, [sp, #0]
 8007e28:	4633      	mov	r3, r6
 8007e2a:	aa0b      	add	r2, sp, #44	; 0x2c
 8007e2c:	4621      	mov	r1, r4
 8007e2e:	4628      	mov	r0, r5
 8007e30:	f000 f9e6 	bl	8008200 <_printf_common>
 8007e34:	3001      	adds	r0, #1
 8007e36:	f040 808d 	bne.w	8007f54 <_printf_float+0x1d4>
 8007e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8007e3e:	b00d      	add	sp, #52	; 0x34
 8007e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e44:	4642      	mov	r2, r8
 8007e46:	464b      	mov	r3, r9
 8007e48:	4640      	mov	r0, r8
 8007e4a:	4649      	mov	r1, r9
 8007e4c:	f7f8 fe76 	bl	8000b3c <__aeabi_dcmpun>
 8007e50:	b110      	cbz	r0, 8007e58 <_printf_float+0xd8>
 8007e52:	4a8c      	ldr	r2, [pc, #560]	; (8008084 <_printf_float+0x304>)
 8007e54:	4b8c      	ldr	r3, [pc, #560]	; (8008088 <_printf_float+0x308>)
 8007e56:	e7da      	b.n	8007e0e <_printf_float+0x8e>
 8007e58:	6861      	ldr	r1, [r4, #4]
 8007e5a:	1c4b      	adds	r3, r1, #1
 8007e5c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007e60:	a80a      	add	r0, sp, #40	; 0x28
 8007e62:	d13e      	bne.n	8007ee2 <_printf_float+0x162>
 8007e64:	2306      	movs	r3, #6
 8007e66:	6063      	str	r3, [r4, #4]
 8007e68:	2300      	movs	r3, #0
 8007e6a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007e6e:	ab09      	add	r3, sp, #36	; 0x24
 8007e70:	9300      	str	r3, [sp, #0]
 8007e72:	ec49 8b10 	vmov	d0, r8, r9
 8007e76:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007e7a:	6022      	str	r2, [r4, #0]
 8007e7c:	f8cd a004 	str.w	sl, [sp, #4]
 8007e80:	6861      	ldr	r1, [r4, #4]
 8007e82:	4628      	mov	r0, r5
 8007e84:	f7ff fee8 	bl	8007c58 <__cvt>
 8007e88:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007e8c:	2b47      	cmp	r3, #71	; 0x47
 8007e8e:	4680      	mov	r8, r0
 8007e90:	d109      	bne.n	8007ea6 <_printf_float+0x126>
 8007e92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e94:	1cd8      	adds	r0, r3, #3
 8007e96:	db02      	blt.n	8007e9e <_printf_float+0x11e>
 8007e98:	6862      	ldr	r2, [r4, #4]
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	dd47      	ble.n	8007f2e <_printf_float+0x1ae>
 8007e9e:	f1aa 0a02 	sub.w	sl, sl, #2
 8007ea2:	fa5f fa8a 	uxtb.w	sl, sl
 8007ea6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007eaa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007eac:	d824      	bhi.n	8007ef8 <_printf_float+0x178>
 8007eae:	3901      	subs	r1, #1
 8007eb0:	4652      	mov	r2, sl
 8007eb2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007eb6:	9109      	str	r1, [sp, #36]	; 0x24
 8007eb8:	f7ff ff2f 	bl	8007d1a <__exponent>
 8007ebc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ebe:	1813      	adds	r3, r2, r0
 8007ec0:	2a01      	cmp	r2, #1
 8007ec2:	4681      	mov	r9, r0
 8007ec4:	6123      	str	r3, [r4, #16]
 8007ec6:	dc02      	bgt.n	8007ece <_printf_float+0x14e>
 8007ec8:	6822      	ldr	r2, [r4, #0]
 8007eca:	07d1      	lsls	r1, r2, #31
 8007ecc:	d501      	bpl.n	8007ed2 <_printf_float+0x152>
 8007ece:	3301      	adds	r3, #1
 8007ed0:	6123      	str	r3, [r4, #16]
 8007ed2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d0a5      	beq.n	8007e26 <_printf_float+0xa6>
 8007eda:	232d      	movs	r3, #45	; 0x2d
 8007edc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ee0:	e7a1      	b.n	8007e26 <_printf_float+0xa6>
 8007ee2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007ee6:	f000 8177 	beq.w	80081d8 <_printf_float+0x458>
 8007eea:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007eee:	d1bb      	bne.n	8007e68 <_printf_float+0xe8>
 8007ef0:	2900      	cmp	r1, #0
 8007ef2:	d1b9      	bne.n	8007e68 <_printf_float+0xe8>
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	e7b6      	b.n	8007e66 <_printf_float+0xe6>
 8007ef8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007efc:	d119      	bne.n	8007f32 <_printf_float+0x1b2>
 8007efe:	2900      	cmp	r1, #0
 8007f00:	6863      	ldr	r3, [r4, #4]
 8007f02:	dd0c      	ble.n	8007f1e <_printf_float+0x19e>
 8007f04:	6121      	str	r1, [r4, #16]
 8007f06:	b913      	cbnz	r3, 8007f0e <_printf_float+0x18e>
 8007f08:	6822      	ldr	r2, [r4, #0]
 8007f0a:	07d2      	lsls	r2, r2, #31
 8007f0c:	d502      	bpl.n	8007f14 <_printf_float+0x194>
 8007f0e:	3301      	adds	r3, #1
 8007f10:	440b      	add	r3, r1
 8007f12:	6123      	str	r3, [r4, #16]
 8007f14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f16:	65a3      	str	r3, [r4, #88]	; 0x58
 8007f18:	f04f 0900 	mov.w	r9, #0
 8007f1c:	e7d9      	b.n	8007ed2 <_printf_float+0x152>
 8007f1e:	b913      	cbnz	r3, 8007f26 <_printf_float+0x1a6>
 8007f20:	6822      	ldr	r2, [r4, #0]
 8007f22:	07d0      	lsls	r0, r2, #31
 8007f24:	d501      	bpl.n	8007f2a <_printf_float+0x1aa>
 8007f26:	3302      	adds	r3, #2
 8007f28:	e7f3      	b.n	8007f12 <_printf_float+0x192>
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e7f1      	b.n	8007f12 <_printf_float+0x192>
 8007f2e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8007f32:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007f36:	4293      	cmp	r3, r2
 8007f38:	db05      	blt.n	8007f46 <_printf_float+0x1c6>
 8007f3a:	6822      	ldr	r2, [r4, #0]
 8007f3c:	6123      	str	r3, [r4, #16]
 8007f3e:	07d1      	lsls	r1, r2, #31
 8007f40:	d5e8      	bpl.n	8007f14 <_printf_float+0x194>
 8007f42:	3301      	adds	r3, #1
 8007f44:	e7e5      	b.n	8007f12 <_printf_float+0x192>
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	bfd4      	ite	le
 8007f4a:	f1c3 0302 	rsble	r3, r3, #2
 8007f4e:	2301      	movgt	r3, #1
 8007f50:	4413      	add	r3, r2
 8007f52:	e7de      	b.n	8007f12 <_printf_float+0x192>
 8007f54:	6823      	ldr	r3, [r4, #0]
 8007f56:	055a      	lsls	r2, r3, #21
 8007f58:	d407      	bmi.n	8007f6a <_printf_float+0x1ea>
 8007f5a:	6923      	ldr	r3, [r4, #16]
 8007f5c:	4642      	mov	r2, r8
 8007f5e:	4631      	mov	r1, r6
 8007f60:	4628      	mov	r0, r5
 8007f62:	47b8      	blx	r7
 8007f64:	3001      	adds	r0, #1
 8007f66:	d12b      	bne.n	8007fc0 <_printf_float+0x240>
 8007f68:	e767      	b.n	8007e3a <_printf_float+0xba>
 8007f6a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007f6e:	f240 80dc 	bls.w	800812a <_printf_float+0x3aa>
 8007f72:	2200      	movs	r2, #0
 8007f74:	2300      	movs	r3, #0
 8007f76:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007f7a:	f7f8 fdad 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f7e:	2800      	cmp	r0, #0
 8007f80:	d033      	beq.n	8007fea <_printf_float+0x26a>
 8007f82:	2301      	movs	r3, #1
 8007f84:	4a41      	ldr	r2, [pc, #260]	; (800808c <_printf_float+0x30c>)
 8007f86:	4631      	mov	r1, r6
 8007f88:	4628      	mov	r0, r5
 8007f8a:	47b8      	blx	r7
 8007f8c:	3001      	adds	r0, #1
 8007f8e:	f43f af54 	beq.w	8007e3a <_printf_float+0xba>
 8007f92:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f96:	429a      	cmp	r2, r3
 8007f98:	db02      	blt.n	8007fa0 <_printf_float+0x220>
 8007f9a:	6823      	ldr	r3, [r4, #0]
 8007f9c:	07d8      	lsls	r0, r3, #31
 8007f9e:	d50f      	bpl.n	8007fc0 <_printf_float+0x240>
 8007fa0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fa4:	4631      	mov	r1, r6
 8007fa6:	4628      	mov	r0, r5
 8007fa8:	47b8      	blx	r7
 8007faa:	3001      	adds	r0, #1
 8007fac:	f43f af45 	beq.w	8007e3a <_printf_float+0xba>
 8007fb0:	f04f 0800 	mov.w	r8, #0
 8007fb4:	f104 091a 	add.w	r9, r4, #26
 8007fb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	4543      	cmp	r3, r8
 8007fbe:	dc09      	bgt.n	8007fd4 <_printf_float+0x254>
 8007fc0:	6823      	ldr	r3, [r4, #0]
 8007fc2:	079b      	lsls	r3, r3, #30
 8007fc4:	f100 8103 	bmi.w	80081ce <_printf_float+0x44e>
 8007fc8:	68e0      	ldr	r0, [r4, #12]
 8007fca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fcc:	4298      	cmp	r0, r3
 8007fce:	bfb8      	it	lt
 8007fd0:	4618      	movlt	r0, r3
 8007fd2:	e734      	b.n	8007e3e <_printf_float+0xbe>
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	464a      	mov	r2, r9
 8007fd8:	4631      	mov	r1, r6
 8007fda:	4628      	mov	r0, r5
 8007fdc:	47b8      	blx	r7
 8007fde:	3001      	adds	r0, #1
 8007fe0:	f43f af2b 	beq.w	8007e3a <_printf_float+0xba>
 8007fe4:	f108 0801 	add.w	r8, r8, #1
 8007fe8:	e7e6      	b.n	8007fb8 <_printf_float+0x238>
 8007fea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	dc2b      	bgt.n	8008048 <_printf_float+0x2c8>
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	4a26      	ldr	r2, [pc, #152]	; (800808c <_printf_float+0x30c>)
 8007ff4:	4631      	mov	r1, r6
 8007ff6:	4628      	mov	r0, r5
 8007ff8:	47b8      	blx	r7
 8007ffa:	3001      	adds	r0, #1
 8007ffc:	f43f af1d 	beq.w	8007e3a <_printf_float+0xba>
 8008000:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008002:	b923      	cbnz	r3, 800800e <_printf_float+0x28e>
 8008004:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008006:	b913      	cbnz	r3, 800800e <_printf_float+0x28e>
 8008008:	6823      	ldr	r3, [r4, #0]
 800800a:	07d9      	lsls	r1, r3, #31
 800800c:	d5d8      	bpl.n	8007fc0 <_printf_float+0x240>
 800800e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008012:	4631      	mov	r1, r6
 8008014:	4628      	mov	r0, r5
 8008016:	47b8      	blx	r7
 8008018:	3001      	adds	r0, #1
 800801a:	f43f af0e 	beq.w	8007e3a <_printf_float+0xba>
 800801e:	f04f 0900 	mov.w	r9, #0
 8008022:	f104 0a1a 	add.w	sl, r4, #26
 8008026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008028:	425b      	negs	r3, r3
 800802a:	454b      	cmp	r3, r9
 800802c:	dc01      	bgt.n	8008032 <_printf_float+0x2b2>
 800802e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008030:	e794      	b.n	8007f5c <_printf_float+0x1dc>
 8008032:	2301      	movs	r3, #1
 8008034:	4652      	mov	r2, sl
 8008036:	4631      	mov	r1, r6
 8008038:	4628      	mov	r0, r5
 800803a:	47b8      	blx	r7
 800803c:	3001      	adds	r0, #1
 800803e:	f43f aefc 	beq.w	8007e3a <_printf_float+0xba>
 8008042:	f109 0901 	add.w	r9, r9, #1
 8008046:	e7ee      	b.n	8008026 <_printf_float+0x2a6>
 8008048:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800804a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800804c:	429a      	cmp	r2, r3
 800804e:	bfa8      	it	ge
 8008050:	461a      	movge	r2, r3
 8008052:	2a00      	cmp	r2, #0
 8008054:	4691      	mov	r9, r2
 8008056:	dd07      	ble.n	8008068 <_printf_float+0x2e8>
 8008058:	4613      	mov	r3, r2
 800805a:	4631      	mov	r1, r6
 800805c:	4642      	mov	r2, r8
 800805e:	4628      	mov	r0, r5
 8008060:	47b8      	blx	r7
 8008062:	3001      	adds	r0, #1
 8008064:	f43f aee9 	beq.w	8007e3a <_printf_float+0xba>
 8008068:	f104 031a 	add.w	r3, r4, #26
 800806c:	f04f 0b00 	mov.w	fp, #0
 8008070:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008074:	9306      	str	r3, [sp, #24]
 8008076:	e015      	b.n	80080a4 <_printf_float+0x324>
 8008078:	7fefffff 	.word	0x7fefffff
 800807c:	0800a19c 	.word	0x0800a19c
 8008080:	0800a198 	.word	0x0800a198
 8008084:	0800a1a4 	.word	0x0800a1a4
 8008088:	0800a1a0 	.word	0x0800a1a0
 800808c:	0800a1a8 	.word	0x0800a1a8
 8008090:	2301      	movs	r3, #1
 8008092:	9a06      	ldr	r2, [sp, #24]
 8008094:	4631      	mov	r1, r6
 8008096:	4628      	mov	r0, r5
 8008098:	47b8      	blx	r7
 800809a:	3001      	adds	r0, #1
 800809c:	f43f aecd 	beq.w	8007e3a <_printf_float+0xba>
 80080a0:	f10b 0b01 	add.w	fp, fp, #1
 80080a4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80080a8:	ebaa 0309 	sub.w	r3, sl, r9
 80080ac:	455b      	cmp	r3, fp
 80080ae:	dcef      	bgt.n	8008090 <_printf_float+0x310>
 80080b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080b4:	429a      	cmp	r2, r3
 80080b6:	44d0      	add	r8, sl
 80080b8:	db15      	blt.n	80080e6 <_printf_float+0x366>
 80080ba:	6823      	ldr	r3, [r4, #0]
 80080bc:	07da      	lsls	r2, r3, #31
 80080be:	d412      	bmi.n	80080e6 <_printf_float+0x366>
 80080c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80080c4:	eba3 020a 	sub.w	r2, r3, sl
 80080c8:	eba3 0a01 	sub.w	sl, r3, r1
 80080cc:	4592      	cmp	sl, r2
 80080ce:	bfa8      	it	ge
 80080d0:	4692      	movge	sl, r2
 80080d2:	f1ba 0f00 	cmp.w	sl, #0
 80080d6:	dc0e      	bgt.n	80080f6 <_printf_float+0x376>
 80080d8:	f04f 0800 	mov.w	r8, #0
 80080dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80080e0:	f104 091a 	add.w	r9, r4, #26
 80080e4:	e019      	b.n	800811a <_printf_float+0x39a>
 80080e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080ea:	4631      	mov	r1, r6
 80080ec:	4628      	mov	r0, r5
 80080ee:	47b8      	blx	r7
 80080f0:	3001      	adds	r0, #1
 80080f2:	d1e5      	bne.n	80080c0 <_printf_float+0x340>
 80080f4:	e6a1      	b.n	8007e3a <_printf_float+0xba>
 80080f6:	4653      	mov	r3, sl
 80080f8:	4642      	mov	r2, r8
 80080fa:	4631      	mov	r1, r6
 80080fc:	4628      	mov	r0, r5
 80080fe:	47b8      	blx	r7
 8008100:	3001      	adds	r0, #1
 8008102:	d1e9      	bne.n	80080d8 <_printf_float+0x358>
 8008104:	e699      	b.n	8007e3a <_printf_float+0xba>
 8008106:	2301      	movs	r3, #1
 8008108:	464a      	mov	r2, r9
 800810a:	4631      	mov	r1, r6
 800810c:	4628      	mov	r0, r5
 800810e:	47b8      	blx	r7
 8008110:	3001      	adds	r0, #1
 8008112:	f43f ae92 	beq.w	8007e3a <_printf_float+0xba>
 8008116:	f108 0801 	add.w	r8, r8, #1
 800811a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800811e:	1a9b      	subs	r3, r3, r2
 8008120:	eba3 030a 	sub.w	r3, r3, sl
 8008124:	4543      	cmp	r3, r8
 8008126:	dcee      	bgt.n	8008106 <_printf_float+0x386>
 8008128:	e74a      	b.n	8007fc0 <_printf_float+0x240>
 800812a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800812c:	2a01      	cmp	r2, #1
 800812e:	dc01      	bgt.n	8008134 <_printf_float+0x3b4>
 8008130:	07db      	lsls	r3, r3, #31
 8008132:	d53a      	bpl.n	80081aa <_printf_float+0x42a>
 8008134:	2301      	movs	r3, #1
 8008136:	4642      	mov	r2, r8
 8008138:	4631      	mov	r1, r6
 800813a:	4628      	mov	r0, r5
 800813c:	47b8      	blx	r7
 800813e:	3001      	adds	r0, #1
 8008140:	f43f ae7b 	beq.w	8007e3a <_printf_float+0xba>
 8008144:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008148:	4631      	mov	r1, r6
 800814a:	4628      	mov	r0, r5
 800814c:	47b8      	blx	r7
 800814e:	3001      	adds	r0, #1
 8008150:	f108 0801 	add.w	r8, r8, #1
 8008154:	f43f ae71 	beq.w	8007e3a <_printf_float+0xba>
 8008158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800815a:	2200      	movs	r2, #0
 800815c:	f103 3aff 	add.w	sl, r3, #4294967295
 8008160:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008164:	2300      	movs	r3, #0
 8008166:	f7f8 fcb7 	bl	8000ad8 <__aeabi_dcmpeq>
 800816a:	b9c8      	cbnz	r0, 80081a0 <_printf_float+0x420>
 800816c:	4653      	mov	r3, sl
 800816e:	4642      	mov	r2, r8
 8008170:	4631      	mov	r1, r6
 8008172:	4628      	mov	r0, r5
 8008174:	47b8      	blx	r7
 8008176:	3001      	adds	r0, #1
 8008178:	d10e      	bne.n	8008198 <_printf_float+0x418>
 800817a:	e65e      	b.n	8007e3a <_printf_float+0xba>
 800817c:	2301      	movs	r3, #1
 800817e:	4652      	mov	r2, sl
 8008180:	4631      	mov	r1, r6
 8008182:	4628      	mov	r0, r5
 8008184:	47b8      	blx	r7
 8008186:	3001      	adds	r0, #1
 8008188:	f43f ae57 	beq.w	8007e3a <_printf_float+0xba>
 800818c:	f108 0801 	add.w	r8, r8, #1
 8008190:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008192:	3b01      	subs	r3, #1
 8008194:	4543      	cmp	r3, r8
 8008196:	dcf1      	bgt.n	800817c <_printf_float+0x3fc>
 8008198:	464b      	mov	r3, r9
 800819a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800819e:	e6de      	b.n	8007f5e <_printf_float+0x1de>
 80081a0:	f04f 0800 	mov.w	r8, #0
 80081a4:	f104 0a1a 	add.w	sl, r4, #26
 80081a8:	e7f2      	b.n	8008190 <_printf_float+0x410>
 80081aa:	2301      	movs	r3, #1
 80081ac:	e7df      	b.n	800816e <_printf_float+0x3ee>
 80081ae:	2301      	movs	r3, #1
 80081b0:	464a      	mov	r2, r9
 80081b2:	4631      	mov	r1, r6
 80081b4:	4628      	mov	r0, r5
 80081b6:	47b8      	blx	r7
 80081b8:	3001      	adds	r0, #1
 80081ba:	f43f ae3e 	beq.w	8007e3a <_printf_float+0xba>
 80081be:	f108 0801 	add.w	r8, r8, #1
 80081c2:	68e3      	ldr	r3, [r4, #12]
 80081c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80081c6:	1a9b      	subs	r3, r3, r2
 80081c8:	4543      	cmp	r3, r8
 80081ca:	dcf0      	bgt.n	80081ae <_printf_float+0x42e>
 80081cc:	e6fc      	b.n	8007fc8 <_printf_float+0x248>
 80081ce:	f04f 0800 	mov.w	r8, #0
 80081d2:	f104 0919 	add.w	r9, r4, #25
 80081d6:	e7f4      	b.n	80081c2 <_printf_float+0x442>
 80081d8:	2900      	cmp	r1, #0
 80081da:	f43f ae8b 	beq.w	8007ef4 <_printf_float+0x174>
 80081de:	2300      	movs	r3, #0
 80081e0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80081e4:	ab09      	add	r3, sp, #36	; 0x24
 80081e6:	9300      	str	r3, [sp, #0]
 80081e8:	ec49 8b10 	vmov	d0, r8, r9
 80081ec:	6022      	str	r2, [r4, #0]
 80081ee:	f8cd a004 	str.w	sl, [sp, #4]
 80081f2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80081f6:	4628      	mov	r0, r5
 80081f8:	f7ff fd2e 	bl	8007c58 <__cvt>
 80081fc:	4680      	mov	r8, r0
 80081fe:	e648      	b.n	8007e92 <_printf_float+0x112>

08008200 <_printf_common>:
 8008200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008204:	4691      	mov	r9, r2
 8008206:	461f      	mov	r7, r3
 8008208:	688a      	ldr	r2, [r1, #8]
 800820a:	690b      	ldr	r3, [r1, #16]
 800820c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008210:	4293      	cmp	r3, r2
 8008212:	bfb8      	it	lt
 8008214:	4613      	movlt	r3, r2
 8008216:	f8c9 3000 	str.w	r3, [r9]
 800821a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800821e:	4606      	mov	r6, r0
 8008220:	460c      	mov	r4, r1
 8008222:	b112      	cbz	r2, 800822a <_printf_common+0x2a>
 8008224:	3301      	adds	r3, #1
 8008226:	f8c9 3000 	str.w	r3, [r9]
 800822a:	6823      	ldr	r3, [r4, #0]
 800822c:	0699      	lsls	r1, r3, #26
 800822e:	bf42      	ittt	mi
 8008230:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008234:	3302      	addmi	r3, #2
 8008236:	f8c9 3000 	strmi.w	r3, [r9]
 800823a:	6825      	ldr	r5, [r4, #0]
 800823c:	f015 0506 	ands.w	r5, r5, #6
 8008240:	d107      	bne.n	8008252 <_printf_common+0x52>
 8008242:	f104 0a19 	add.w	sl, r4, #25
 8008246:	68e3      	ldr	r3, [r4, #12]
 8008248:	f8d9 2000 	ldr.w	r2, [r9]
 800824c:	1a9b      	subs	r3, r3, r2
 800824e:	42ab      	cmp	r3, r5
 8008250:	dc28      	bgt.n	80082a4 <_printf_common+0xa4>
 8008252:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008256:	6822      	ldr	r2, [r4, #0]
 8008258:	3300      	adds	r3, #0
 800825a:	bf18      	it	ne
 800825c:	2301      	movne	r3, #1
 800825e:	0692      	lsls	r2, r2, #26
 8008260:	d42d      	bmi.n	80082be <_printf_common+0xbe>
 8008262:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008266:	4639      	mov	r1, r7
 8008268:	4630      	mov	r0, r6
 800826a:	47c0      	blx	r8
 800826c:	3001      	adds	r0, #1
 800826e:	d020      	beq.n	80082b2 <_printf_common+0xb2>
 8008270:	6823      	ldr	r3, [r4, #0]
 8008272:	68e5      	ldr	r5, [r4, #12]
 8008274:	f8d9 2000 	ldr.w	r2, [r9]
 8008278:	f003 0306 	and.w	r3, r3, #6
 800827c:	2b04      	cmp	r3, #4
 800827e:	bf08      	it	eq
 8008280:	1aad      	subeq	r5, r5, r2
 8008282:	68a3      	ldr	r3, [r4, #8]
 8008284:	6922      	ldr	r2, [r4, #16]
 8008286:	bf0c      	ite	eq
 8008288:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800828c:	2500      	movne	r5, #0
 800828e:	4293      	cmp	r3, r2
 8008290:	bfc4      	itt	gt
 8008292:	1a9b      	subgt	r3, r3, r2
 8008294:	18ed      	addgt	r5, r5, r3
 8008296:	f04f 0900 	mov.w	r9, #0
 800829a:	341a      	adds	r4, #26
 800829c:	454d      	cmp	r5, r9
 800829e:	d11a      	bne.n	80082d6 <_printf_common+0xd6>
 80082a0:	2000      	movs	r0, #0
 80082a2:	e008      	b.n	80082b6 <_printf_common+0xb6>
 80082a4:	2301      	movs	r3, #1
 80082a6:	4652      	mov	r2, sl
 80082a8:	4639      	mov	r1, r7
 80082aa:	4630      	mov	r0, r6
 80082ac:	47c0      	blx	r8
 80082ae:	3001      	adds	r0, #1
 80082b0:	d103      	bne.n	80082ba <_printf_common+0xba>
 80082b2:	f04f 30ff 	mov.w	r0, #4294967295
 80082b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082ba:	3501      	adds	r5, #1
 80082bc:	e7c3      	b.n	8008246 <_printf_common+0x46>
 80082be:	18e1      	adds	r1, r4, r3
 80082c0:	1c5a      	adds	r2, r3, #1
 80082c2:	2030      	movs	r0, #48	; 0x30
 80082c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80082c8:	4422      	add	r2, r4
 80082ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80082ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80082d2:	3302      	adds	r3, #2
 80082d4:	e7c5      	b.n	8008262 <_printf_common+0x62>
 80082d6:	2301      	movs	r3, #1
 80082d8:	4622      	mov	r2, r4
 80082da:	4639      	mov	r1, r7
 80082dc:	4630      	mov	r0, r6
 80082de:	47c0      	blx	r8
 80082e0:	3001      	adds	r0, #1
 80082e2:	d0e6      	beq.n	80082b2 <_printf_common+0xb2>
 80082e4:	f109 0901 	add.w	r9, r9, #1
 80082e8:	e7d8      	b.n	800829c <_printf_common+0x9c>
	...

080082ec <_printf_i>:
 80082ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80082f0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80082f4:	460c      	mov	r4, r1
 80082f6:	7e09      	ldrb	r1, [r1, #24]
 80082f8:	b085      	sub	sp, #20
 80082fa:	296e      	cmp	r1, #110	; 0x6e
 80082fc:	4617      	mov	r7, r2
 80082fe:	4606      	mov	r6, r0
 8008300:	4698      	mov	r8, r3
 8008302:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008304:	f000 80b3 	beq.w	800846e <_printf_i+0x182>
 8008308:	d822      	bhi.n	8008350 <_printf_i+0x64>
 800830a:	2963      	cmp	r1, #99	; 0x63
 800830c:	d036      	beq.n	800837c <_printf_i+0x90>
 800830e:	d80a      	bhi.n	8008326 <_printf_i+0x3a>
 8008310:	2900      	cmp	r1, #0
 8008312:	f000 80b9 	beq.w	8008488 <_printf_i+0x19c>
 8008316:	2958      	cmp	r1, #88	; 0x58
 8008318:	f000 8083 	beq.w	8008422 <_printf_i+0x136>
 800831c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008320:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008324:	e032      	b.n	800838c <_printf_i+0xa0>
 8008326:	2964      	cmp	r1, #100	; 0x64
 8008328:	d001      	beq.n	800832e <_printf_i+0x42>
 800832a:	2969      	cmp	r1, #105	; 0x69
 800832c:	d1f6      	bne.n	800831c <_printf_i+0x30>
 800832e:	6820      	ldr	r0, [r4, #0]
 8008330:	6813      	ldr	r3, [r2, #0]
 8008332:	0605      	lsls	r5, r0, #24
 8008334:	f103 0104 	add.w	r1, r3, #4
 8008338:	d52a      	bpl.n	8008390 <_printf_i+0xa4>
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	6011      	str	r1, [r2, #0]
 800833e:	2b00      	cmp	r3, #0
 8008340:	da03      	bge.n	800834a <_printf_i+0x5e>
 8008342:	222d      	movs	r2, #45	; 0x2d
 8008344:	425b      	negs	r3, r3
 8008346:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800834a:	486f      	ldr	r0, [pc, #444]	; (8008508 <_printf_i+0x21c>)
 800834c:	220a      	movs	r2, #10
 800834e:	e039      	b.n	80083c4 <_printf_i+0xd8>
 8008350:	2973      	cmp	r1, #115	; 0x73
 8008352:	f000 809d 	beq.w	8008490 <_printf_i+0x1a4>
 8008356:	d808      	bhi.n	800836a <_printf_i+0x7e>
 8008358:	296f      	cmp	r1, #111	; 0x6f
 800835a:	d020      	beq.n	800839e <_printf_i+0xb2>
 800835c:	2970      	cmp	r1, #112	; 0x70
 800835e:	d1dd      	bne.n	800831c <_printf_i+0x30>
 8008360:	6823      	ldr	r3, [r4, #0]
 8008362:	f043 0320 	orr.w	r3, r3, #32
 8008366:	6023      	str	r3, [r4, #0]
 8008368:	e003      	b.n	8008372 <_printf_i+0x86>
 800836a:	2975      	cmp	r1, #117	; 0x75
 800836c:	d017      	beq.n	800839e <_printf_i+0xb2>
 800836e:	2978      	cmp	r1, #120	; 0x78
 8008370:	d1d4      	bne.n	800831c <_printf_i+0x30>
 8008372:	2378      	movs	r3, #120	; 0x78
 8008374:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008378:	4864      	ldr	r0, [pc, #400]	; (800850c <_printf_i+0x220>)
 800837a:	e055      	b.n	8008428 <_printf_i+0x13c>
 800837c:	6813      	ldr	r3, [r2, #0]
 800837e:	1d19      	adds	r1, r3, #4
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	6011      	str	r1, [r2, #0]
 8008384:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008388:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800838c:	2301      	movs	r3, #1
 800838e:	e08c      	b.n	80084aa <_printf_i+0x1be>
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	6011      	str	r1, [r2, #0]
 8008394:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008398:	bf18      	it	ne
 800839a:	b21b      	sxthne	r3, r3
 800839c:	e7cf      	b.n	800833e <_printf_i+0x52>
 800839e:	6813      	ldr	r3, [r2, #0]
 80083a0:	6825      	ldr	r5, [r4, #0]
 80083a2:	1d18      	adds	r0, r3, #4
 80083a4:	6010      	str	r0, [r2, #0]
 80083a6:	0628      	lsls	r0, r5, #24
 80083a8:	d501      	bpl.n	80083ae <_printf_i+0xc2>
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	e002      	b.n	80083b4 <_printf_i+0xc8>
 80083ae:	0668      	lsls	r0, r5, #25
 80083b0:	d5fb      	bpl.n	80083aa <_printf_i+0xbe>
 80083b2:	881b      	ldrh	r3, [r3, #0]
 80083b4:	4854      	ldr	r0, [pc, #336]	; (8008508 <_printf_i+0x21c>)
 80083b6:	296f      	cmp	r1, #111	; 0x6f
 80083b8:	bf14      	ite	ne
 80083ba:	220a      	movne	r2, #10
 80083bc:	2208      	moveq	r2, #8
 80083be:	2100      	movs	r1, #0
 80083c0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80083c4:	6865      	ldr	r5, [r4, #4]
 80083c6:	60a5      	str	r5, [r4, #8]
 80083c8:	2d00      	cmp	r5, #0
 80083ca:	f2c0 8095 	blt.w	80084f8 <_printf_i+0x20c>
 80083ce:	6821      	ldr	r1, [r4, #0]
 80083d0:	f021 0104 	bic.w	r1, r1, #4
 80083d4:	6021      	str	r1, [r4, #0]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d13d      	bne.n	8008456 <_printf_i+0x16a>
 80083da:	2d00      	cmp	r5, #0
 80083dc:	f040 808e 	bne.w	80084fc <_printf_i+0x210>
 80083e0:	4665      	mov	r5, ip
 80083e2:	2a08      	cmp	r2, #8
 80083e4:	d10b      	bne.n	80083fe <_printf_i+0x112>
 80083e6:	6823      	ldr	r3, [r4, #0]
 80083e8:	07db      	lsls	r3, r3, #31
 80083ea:	d508      	bpl.n	80083fe <_printf_i+0x112>
 80083ec:	6923      	ldr	r3, [r4, #16]
 80083ee:	6862      	ldr	r2, [r4, #4]
 80083f0:	429a      	cmp	r2, r3
 80083f2:	bfde      	ittt	le
 80083f4:	2330      	movle	r3, #48	; 0x30
 80083f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80083fa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80083fe:	ebac 0305 	sub.w	r3, ip, r5
 8008402:	6123      	str	r3, [r4, #16]
 8008404:	f8cd 8000 	str.w	r8, [sp]
 8008408:	463b      	mov	r3, r7
 800840a:	aa03      	add	r2, sp, #12
 800840c:	4621      	mov	r1, r4
 800840e:	4630      	mov	r0, r6
 8008410:	f7ff fef6 	bl	8008200 <_printf_common>
 8008414:	3001      	adds	r0, #1
 8008416:	d14d      	bne.n	80084b4 <_printf_i+0x1c8>
 8008418:	f04f 30ff 	mov.w	r0, #4294967295
 800841c:	b005      	add	sp, #20
 800841e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008422:	4839      	ldr	r0, [pc, #228]	; (8008508 <_printf_i+0x21c>)
 8008424:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008428:	6813      	ldr	r3, [r2, #0]
 800842a:	6821      	ldr	r1, [r4, #0]
 800842c:	1d1d      	adds	r5, r3, #4
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	6015      	str	r5, [r2, #0]
 8008432:	060a      	lsls	r2, r1, #24
 8008434:	d50b      	bpl.n	800844e <_printf_i+0x162>
 8008436:	07ca      	lsls	r2, r1, #31
 8008438:	bf44      	itt	mi
 800843a:	f041 0120 	orrmi.w	r1, r1, #32
 800843e:	6021      	strmi	r1, [r4, #0]
 8008440:	b91b      	cbnz	r3, 800844a <_printf_i+0x15e>
 8008442:	6822      	ldr	r2, [r4, #0]
 8008444:	f022 0220 	bic.w	r2, r2, #32
 8008448:	6022      	str	r2, [r4, #0]
 800844a:	2210      	movs	r2, #16
 800844c:	e7b7      	b.n	80083be <_printf_i+0xd2>
 800844e:	064d      	lsls	r5, r1, #25
 8008450:	bf48      	it	mi
 8008452:	b29b      	uxthmi	r3, r3
 8008454:	e7ef      	b.n	8008436 <_printf_i+0x14a>
 8008456:	4665      	mov	r5, ip
 8008458:	fbb3 f1f2 	udiv	r1, r3, r2
 800845c:	fb02 3311 	mls	r3, r2, r1, r3
 8008460:	5cc3      	ldrb	r3, [r0, r3]
 8008462:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008466:	460b      	mov	r3, r1
 8008468:	2900      	cmp	r1, #0
 800846a:	d1f5      	bne.n	8008458 <_printf_i+0x16c>
 800846c:	e7b9      	b.n	80083e2 <_printf_i+0xf6>
 800846e:	6813      	ldr	r3, [r2, #0]
 8008470:	6825      	ldr	r5, [r4, #0]
 8008472:	6961      	ldr	r1, [r4, #20]
 8008474:	1d18      	adds	r0, r3, #4
 8008476:	6010      	str	r0, [r2, #0]
 8008478:	0628      	lsls	r0, r5, #24
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	d501      	bpl.n	8008482 <_printf_i+0x196>
 800847e:	6019      	str	r1, [r3, #0]
 8008480:	e002      	b.n	8008488 <_printf_i+0x19c>
 8008482:	066a      	lsls	r2, r5, #25
 8008484:	d5fb      	bpl.n	800847e <_printf_i+0x192>
 8008486:	8019      	strh	r1, [r3, #0]
 8008488:	2300      	movs	r3, #0
 800848a:	6123      	str	r3, [r4, #16]
 800848c:	4665      	mov	r5, ip
 800848e:	e7b9      	b.n	8008404 <_printf_i+0x118>
 8008490:	6813      	ldr	r3, [r2, #0]
 8008492:	1d19      	adds	r1, r3, #4
 8008494:	6011      	str	r1, [r2, #0]
 8008496:	681d      	ldr	r5, [r3, #0]
 8008498:	6862      	ldr	r2, [r4, #4]
 800849a:	2100      	movs	r1, #0
 800849c:	4628      	mov	r0, r5
 800849e:	f7f7 fea7 	bl	80001f0 <memchr>
 80084a2:	b108      	cbz	r0, 80084a8 <_printf_i+0x1bc>
 80084a4:	1b40      	subs	r0, r0, r5
 80084a6:	6060      	str	r0, [r4, #4]
 80084a8:	6863      	ldr	r3, [r4, #4]
 80084aa:	6123      	str	r3, [r4, #16]
 80084ac:	2300      	movs	r3, #0
 80084ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084b2:	e7a7      	b.n	8008404 <_printf_i+0x118>
 80084b4:	6923      	ldr	r3, [r4, #16]
 80084b6:	462a      	mov	r2, r5
 80084b8:	4639      	mov	r1, r7
 80084ba:	4630      	mov	r0, r6
 80084bc:	47c0      	blx	r8
 80084be:	3001      	adds	r0, #1
 80084c0:	d0aa      	beq.n	8008418 <_printf_i+0x12c>
 80084c2:	6823      	ldr	r3, [r4, #0]
 80084c4:	079b      	lsls	r3, r3, #30
 80084c6:	d413      	bmi.n	80084f0 <_printf_i+0x204>
 80084c8:	68e0      	ldr	r0, [r4, #12]
 80084ca:	9b03      	ldr	r3, [sp, #12]
 80084cc:	4298      	cmp	r0, r3
 80084ce:	bfb8      	it	lt
 80084d0:	4618      	movlt	r0, r3
 80084d2:	e7a3      	b.n	800841c <_printf_i+0x130>
 80084d4:	2301      	movs	r3, #1
 80084d6:	464a      	mov	r2, r9
 80084d8:	4639      	mov	r1, r7
 80084da:	4630      	mov	r0, r6
 80084dc:	47c0      	blx	r8
 80084de:	3001      	adds	r0, #1
 80084e0:	d09a      	beq.n	8008418 <_printf_i+0x12c>
 80084e2:	3501      	adds	r5, #1
 80084e4:	68e3      	ldr	r3, [r4, #12]
 80084e6:	9a03      	ldr	r2, [sp, #12]
 80084e8:	1a9b      	subs	r3, r3, r2
 80084ea:	42ab      	cmp	r3, r5
 80084ec:	dcf2      	bgt.n	80084d4 <_printf_i+0x1e8>
 80084ee:	e7eb      	b.n	80084c8 <_printf_i+0x1dc>
 80084f0:	2500      	movs	r5, #0
 80084f2:	f104 0919 	add.w	r9, r4, #25
 80084f6:	e7f5      	b.n	80084e4 <_printf_i+0x1f8>
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d1ac      	bne.n	8008456 <_printf_i+0x16a>
 80084fc:	7803      	ldrb	r3, [r0, #0]
 80084fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008502:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008506:	e76c      	b.n	80083e2 <_printf_i+0xf6>
 8008508:	0800a1aa 	.word	0x0800a1aa
 800850c:	0800a1bb 	.word	0x0800a1bb

08008510 <_sbrk_r>:
 8008510:	b538      	push	{r3, r4, r5, lr}
 8008512:	4c06      	ldr	r4, [pc, #24]	; (800852c <_sbrk_r+0x1c>)
 8008514:	2300      	movs	r3, #0
 8008516:	4605      	mov	r5, r0
 8008518:	4608      	mov	r0, r1
 800851a:	6023      	str	r3, [r4, #0]
 800851c:	f7f9 f836 	bl	800158c <_sbrk>
 8008520:	1c43      	adds	r3, r0, #1
 8008522:	d102      	bne.n	800852a <_sbrk_r+0x1a>
 8008524:	6823      	ldr	r3, [r4, #0]
 8008526:	b103      	cbz	r3, 800852a <_sbrk_r+0x1a>
 8008528:	602b      	str	r3, [r5, #0]
 800852a:	bd38      	pop	{r3, r4, r5, pc}
 800852c:	200066d4 	.word	0x200066d4

08008530 <sniprintf>:
 8008530:	b40c      	push	{r2, r3}
 8008532:	b530      	push	{r4, r5, lr}
 8008534:	4b17      	ldr	r3, [pc, #92]	; (8008594 <sniprintf+0x64>)
 8008536:	1e0c      	subs	r4, r1, #0
 8008538:	b09d      	sub	sp, #116	; 0x74
 800853a:	681d      	ldr	r5, [r3, #0]
 800853c:	da08      	bge.n	8008550 <sniprintf+0x20>
 800853e:	238b      	movs	r3, #139	; 0x8b
 8008540:	602b      	str	r3, [r5, #0]
 8008542:	f04f 30ff 	mov.w	r0, #4294967295
 8008546:	b01d      	add	sp, #116	; 0x74
 8008548:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800854c:	b002      	add	sp, #8
 800854e:	4770      	bx	lr
 8008550:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008554:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008558:	bf14      	ite	ne
 800855a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800855e:	4623      	moveq	r3, r4
 8008560:	9304      	str	r3, [sp, #16]
 8008562:	9307      	str	r3, [sp, #28]
 8008564:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008568:	9002      	str	r0, [sp, #8]
 800856a:	9006      	str	r0, [sp, #24]
 800856c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008570:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008572:	ab21      	add	r3, sp, #132	; 0x84
 8008574:	a902      	add	r1, sp, #8
 8008576:	4628      	mov	r0, r5
 8008578:	9301      	str	r3, [sp, #4]
 800857a:	f001 f9a5 	bl	80098c8 <_svfiprintf_r>
 800857e:	1c43      	adds	r3, r0, #1
 8008580:	bfbc      	itt	lt
 8008582:	238b      	movlt	r3, #139	; 0x8b
 8008584:	602b      	strlt	r3, [r5, #0]
 8008586:	2c00      	cmp	r4, #0
 8008588:	d0dd      	beq.n	8008546 <sniprintf+0x16>
 800858a:	9b02      	ldr	r3, [sp, #8]
 800858c:	2200      	movs	r2, #0
 800858e:	701a      	strb	r2, [r3, #0]
 8008590:	e7d9      	b.n	8008546 <sniprintf+0x16>
 8008592:	bf00      	nop
 8008594:	200001a0 	.word	0x200001a0

08008598 <quorem>:
 8008598:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800859c:	6903      	ldr	r3, [r0, #16]
 800859e:	690c      	ldr	r4, [r1, #16]
 80085a0:	42a3      	cmp	r3, r4
 80085a2:	4680      	mov	r8, r0
 80085a4:	f2c0 8082 	blt.w	80086ac <quorem+0x114>
 80085a8:	3c01      	subs	r4, #1
 80085aa:	f101 0714 	add.w	r7, r1, #20
 80085ae:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80085b2:	f100 0614 	add.w	r6, r0, #20
 80085b6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80085ba:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80085be:	eb06 030c 	add.w	r3, r6, ip
 80085c2:	3501      	adds	r5, #1
 80085c4:	eb07 090c 	add.w	r9, r7, ip
 80085c8:	9301      	str	r3, [sp, #4]
 80085ca:	fbb0 f5f5 	udiv	r5, r0, r5
 80085ce:	b395      	cbz	r5, 8008636 <quorem+0x9e>
 80085d0:	f04f 0a00 	mov.w	sl, #0
 80085d4:	4638      	mov	r0, r7
 80085d6:	46b6      	mov	lr, r6
 80085d8:	46d3      	mov	fp, sl
 80085da:	f850 2b04 	ldr.w	r2, [r0], #4
 80085de:	b293      	uxth	r3, r2
 80085e0:	fb05 a303 	mla	r3, r5, r3, sl
 80085e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	ebab 0303 	sub.w	r3, fp, r3
 80085ee:	0c12      	lsrs	r2, r2, #16
 80085f0:	f8de b000 	ldr.w	fp, [lr]
 80085f4:	fb05 a202 	mla	r2, r5, r2, sl
 80085f8:	fa13 f38b 	uxtah	r3, r3, fp
 80085fc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008600:	fa1f fb82 	uxth.w	fp, r2
 8008604:	f8de 2000 	ldr.w	r2, [lr]
 8008608:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800860c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008610:	b29b      	uxth	r3, r3
 8008612:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008616:	4581      	cmp	r9, r0
 8008618:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800861c:	f84e 3b04 	str.w	r3, [lr], #4
 8008620:	d2db      	bcs.n	80085da <quorem+0x42>
 8008622:	f856 300c 	ldr.w	r3, [r6, ip]
 8008626:	b933      	cbnz	r3, 8008636 <quorem+0x9e>
 8008628:	9b01      	ldr	r3, [sp, #4]
 800862a:	3b04      	subs	r3, #4
 800862c:	429e      	cmp	r6, r3
 800862e:	461a      	mov	r2, r3
 8008630:	d330      	bcc.n	8008694 <quorem+0xfc>
 8008632:	f8c8 4010 	str.w	r4, [r8, #16]
 8008636:	4640      	mov	r0, r8
 8008638:	f001 f818 	bl	800966c <__mcmp>
 800863c:	2800      	cmp	r0, #0
 800863e:	db25      	blt.n	800868c <quorem+0xf4>
 8008640:	3501      	adds	r5, #1
 8008642:	4630      	mov	r0, r6
 8008644:	f04f 0c00 	mov.w	ip, #0
 8008648:	f857 2b04 	ldr.w	r2, [r7], #4
 800864c:	f8d0 e000 	ldr.w	lr, [r0]
 8008650:	b293      	uxth	r3, r2
 8008652:	ebac 0303 	sub.w	r3, ip, r3
 8008656:	0c12      	lsrs	r2, r2, #16
 8008658:	fa13 f38e 	uxtah	r3, r3, lr
 800865c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008660:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008664:	b29b      	uxth	r3, r3
 8008666:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800866a:	45b9      	cmp	r9, r7
 800866c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008670:	f840 3b04 	str.w	r3, [r0], #4
 8008674:	d2e8      	bcs.n	8008648 <quorem+0xb0>
 8008676:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800867a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800867e:	b92a      	cbnz	r2, 800868c <quorem+0xf4>
 8008680:	3b04      	subs	r3, #4
 8008682:	429e      	cmp	r6, r3
 8008684:	461a      	mov	r2, r3
 8008686:	d30b      	bcc.n	80086a0 <quorem+0x108>
 8008688:	f8c8 4010 	str.w	r4, [r8, #16]
 800868c:	4628      	mov	r0, r5
 800868e:	b003      	add	sp, #12
 8008690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008694:	6812      	ldr	r2, [r2, #0]
 8008696:	3b04      	subs	r3, #4
 8008698:	2a00      	cmp	r2, #0
 800869a:	d1ca      	bne.n	8008632 <quorem+0x9a>
 800869c:	3c01      	subs	r4, #1
 800869e:	e7c5      	b.n	800862c <quorem+0x94>
 80086a0:	6812      	ldr	r2, [r2, #0]
 80086a2:	3b04      	subs	r3, #4
 80086a4:	2a00      	cmp	r2, #0
 80086a6:	d1ef      	bne.n	8008688 <quorem+0xf0>
 80086a8:	3c01      	subs	r4, #1
 80086aa:	e7ea      	b.n	8008682 <quorem+0xea>
 80086ac:	2000      	movs	r0, #0
 80086ae:	e7ee      	b.n	800868e <quorem+0xf6>

080086b0 <_dtoa_r>:
 80086b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086b4:	ec57 6b10 	vmov	r6, r7, d0
 80086b8:	b097      	sub	sp, #92	; 0x5c
 80086ba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80086bc:	9106      	str	r1, [sp, #24]
 80086be:	4604      	mov	r4, r0
 80086c0:	920b      	str	r2, [sp, #44]	; 0x2c
 80086c2:	9312      	str	r3, [sp, #72]	; 0x48
 80086c4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80086c8:	e9cd 6700 	strd	r6, r7, [sp]
 80086cc:	b93d      	cbnz	r5, 80086de <_dtoa_r+0x2e>
 80086ce:	2010      	movs	r0, #16
 80086d0:	f7ff f9f6 	bl	8007ac0 <malloc>
 80086d4:	6260      	str	r0, [r4, #36]	; 0x24
 80086d6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80086da:	6005      	str	r5, [r0, #0]
 80086dc:	60c5      	str	r5, [r0, #12]
 80086de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086e0:	6819      	ldr	r1, [r3, #0]
 80086e2:	b151      	cbz	r1, 80086fa <_dtoa_r+0x4a>
 80086e4:	685a      	ldr	r2, [r3, #4]
 80086e6:	604a      	str	r2, [r1, #4]
 80086e8:	2301      	movs	r3, #1
 80086ea:	4093      	lsls	r3, r2
 80086ec:	608b      	str	r3, [r1, #8]
 80086ee:	4620      	mov	r0, r4
 80086f0:	f000 fdda 	bl	80092a8 <_Bfree>
 80086f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086f6:	2200      	movs	r2, #0
 80086f8:	601a      	str	r2, [r3, #0]
 80086fa:	1e3b      	subs	r3, r7, #0
 80086fc:	bfbb      	ittet	lt
 80086fe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008702:	9301      	strlt	r3, [sp, #4]
 8008704:	2300      	movge	r3, #0
 8008706:	2201      	movlt	r2, #1
 8008708:	bfac      	ite	ge
 800870a:	f8c8 3000 	strge.w	r3, [r8]
 800870e:	f8c8 2000 	strlt.w	r2, [r8]
 8008712:	4baf      	ldr	r3, [pc, #700]	; (80089d0 <_dtoa_r+0x320>)
 8008714:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008718:	ea33 0308 	bics.w	r3, r3, r8
 800871c:	d114      	bne.n	8008748 <_dtoa_r+0x98>
 800871e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008720:	f242 730f 	movw	r3, #9999	; 0x270f
 8008724:	6013      	str	r3, [r2, #0]
 8008726:	9b00      	ldr	r3, [sp, #0]
 8008728:	b923      	cbnz	r3, 8008734 <_dtoa_r+0x84>
 800872a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800872e:	2800      	cmp	r0, #0
 8008730:	f000 8542 	beq.w	80091b8 <_dtoa_r+0xb08>
 8008734:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008736:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80089e4 <_dtoa_r+0x334>
 800873a:	2b00      	cmp	r3, #0
 800873c:	f000 8544 	beq.w	80091c8 <_dtoa_r+0xb18>
 8008740:	f10b 0303 	add.w	r3, fp, #3
 8008744:	f000 bd3e 	b.w	80091c4 <_dtoa_r+0xb14>
 8008748:	e9dd 6700 	ldrd	r6, r7, [sp]
 800874c:	2200      	movs	r2, #0
 800874e:	2300      	movs	r3, #0
 8008750:	4630      	mov	r0, r6
 8008752:	4639      	mov	r1, r7
 8008754:	f7f8 f9c0 	bl	8000ad8 <__aeabi_dcmpeq>
 8008758:	4681      	mov	r9, r0
 800875a:	b168      	cbz	r0, 8008778 <_dtoa_r+0xc8>
 800875c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800875e:	2301      	movs	r3, #1
 8008760:	6013      	str	r3, [r2, #0]
 8008762:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008764:	2b00      	cmp	r3, #0
 8008766:	f000 8524 	beq.w	80091b2 <_dtoa_r+0xb02>
 800876a:	4b9a      	ldr	r3, [pc, #616]	; (80089d4 <_dtoa_r+0x324>)
 800876c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800876e:	f103 3bff 	add.w	fp, r3, #4294967295
 8008772:	6013      	str	r3, [r2, #0]
 8008774:	f000 bd28 	b.w	80091c8 <_dtoa_r+0xb18>
 8008778:	aa14      	add	r2, sp, #80	; 0x50
 800877a:	a915      	add	r1, sp, #84	; 0x54
 800877c:	ec47 6b10 	vmov	d0, r6, r7
 8008780:	4620      	mov	r0, r4
 8008782:	f000 ffea 	bl	800975a <__d2b>
 8008786:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800878a:	9004      	str	r0, [sp, #16]
 800878c:	2d00      	cmp	r5, #0
 800878e:	d07c      	beq.n	800888a <_dtoa_r+0x1da>
 8008790:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008794:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008798:	46b2      	mov	sl, r6
 800879a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800879e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80087a2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80087a6:	2200      	movs	r2, #0
 80087a8:	4b8b      	ldr	r3, [pc, #556]	; (80089d8 <_dtoa_r+0x328>)
 80087aa:	4650      	mov	r0, sl
 80087ac:	4659      	mov	r1, fp
 80087ae:	f7f7 fd73 	bl	8000298 <__aeabi_dsub>
 80087b2:	a381      	add	r3, pc, #516	; (adr r3, 80089b8 <_dtoa_r+0x308>)
 80087b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b8:	f7f7 ff26 	bl	8000608 <__aeabi_dmul>
 80087bc:	a380      	add	r3, pc, #512	; (adr r3, 80089c0 <_dtoa_r+0x310>)
 80087be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c2:	f7f7 fd6b 	bl	800029c <__adddf3>
 80087c6:	4606      	mov	r6, r0
 80087c8:	4628      	mov	r0, r5
 80087ca:	460f      	mov	r7, r1
 80087cc:	f7f7 feb2 	bl	8000534 <__aeabi_i2d>
 80087d0:	a37d      	add	r3, pc, #500	; (adr r3, 80089c8 <_dtoa_r+0x318>)
 80087d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d6:	f7f7 ff17 	bl	8000608 <__aeabi_dmul>
 80087da:	4602      	mov	r2, r0
 80087dc:	460b      	mov	r3, r1
 80087de:	4630      	mov	r0, r6
 80087e0:	4639      	mov	r1, r7
 80087e2:	f7f7 fd5b 	bl	800029c <__adddf3>
 80087e6:	4606      	mov	r6, r0
 80087e8:	460f      	mov	r7, r1
 80087ea:	f7f8 f9bd 	bl	8000b68 <__aeabi_d2iz>
 80087ee:	2200      	movs	r2, #0
 80087f0:	4682      	mov	sl, r0
 80087f2:	2300      	movs	r3, #0
 80087f4:	4630      	mov	r0, r6
 80087f6:	4639      	mov	r1, r7
 80087f8:	f7f8 f978 	bl	8000aec <__aeabi_dcmplt>
 80087fc:	b148      	cbz	r0, 8008812 <_dtoa_r+0x162>
 80087fe:	4650      	mov	r0, sl
 8008800:	f7f7 fe98 	bl	8000534 <__aeabi_i2d>
 8008804:	4632      	mov	r2, r6
 8008806:	463b      	mov	r3, r7
 8008808:	f7f8 f966 	bl	8000ad8 <__aeabi_dcmpeq>
 800880c:	b908      	cbnz	r0, 8008812 <_dtoa_r+0x162>
 800880e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008812:	f1ba 0f16 	cmp.w	sl, #22
 8008816:	d859      	bhi.n	80088cc <_dtoa_r+0x21c>
 8008818:	4970      	ldr	r1, [pc, #448]	; (80089dc <_dtoa_r+0x32c>)
 800881a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800881e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008822:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008826:	f7f8 f97f 	bl	8000b28 <__aeabi_dcmpgt>
 800882a:	2800      	cmp	r0, #0
 800882c:	d050      	beq.n	80088d0 <_dtoa_r+0x220>
 800882e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008832:	2300      	movs	r3, #0
 8008834:	930f      	str	r3, [sp, #60]	; 0x3c
 8008836:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008838:	1b5d      	subs	r5, r3, r5
 800883a:	f1b5 0801 	subs.w	r8, r5, #1
 800883e:	bf49      	itett	mi
 8008840:	f1c5 0301 	rsbmi	r3, r5, #1
 8008844:	2300      	movpl	r3, #0
 8008846:	9305      	strmi	r3, [sp, #20]
 8008848:	f04f 0800 	movmi.w	r8, #0
 800884c:	bf58      	it	pl
 800884e:	9305      	strpl	r3, [sp, #20]
 8008850:	f1ba 0f00 	cmp.w	sl, #0
 8008854:	db3e      	blt.n	80088d4 <_dtoa_r+0x224>
 8008856:	2300      	movs	r3, #0
 8008858:	44d0      	add	r8, sl
 800885a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800885e:	9307      	str	r3, [sp, #28]
 8008860:	9b06      	ldr	r3, [sp, #24]
 8008862:	2b09      	cmp	r3, #9
 8008864:	f200 8090 	bhi.w	8008988 <_dtoa_r+0x2d8>
 8008868:	2b05      	cmp	r3, #5
 800886a:	bfc4      	itt	gt
 800886c:	3b04      	subgt	r3, #4
 800886e:	9306      	strgt	r3, [sp, #24]
 8008870:	9b06      	ldr	r3, [sp, #24]
 8008872:	f1a3 0302 	sub.w	r3, r3, #2
 8008876:	bfcc      	ite	gt
 8008878:	2500      	movgt	r5, #0
 800887a:	2501      	movle	r5, #1
 800887c:	2b03      	cmp	r3, #3
 800887e:	f200 808f 	bhi.w	80089a0 <_dtoa_r+0x2f0>
 8008882:	e8df f003 	tbb	[pc, r3]
 8008886:	7f7d      	.short	0x7f7d
 8008888:	7131      	.short	0x7131
 800888a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800888e:	441d      	add	r5, r3
 8008890:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008894:	2820      	cmp	r0, #32
 8008896:	dd13      	ble.n	80088c0 <_dtoa_r+0x210>
 8008898:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800889c:	9b00      	ldr	r3, [sp, #0]
 800889e:	fa08 f800 	lsl.w	r8, r8, r0
 80088a2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80088a6:	fa23 f000 	lsr.w	r0, r3, r0
 80088aa:	ea48 0000 	orr.w	r0, r8, r0
 80088ae:	f7f7 fe31 	bl	8000514 <__aeabi_ui2d>
 80088b2:	2301      	movs	r3, #1
 80088b4:	4682      	mov	sl, r0
 80088b6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80088ba:	3d01      	subs	r5, #1
 80088bc:	9313      	str	r3, [sp, #76]	; 0x4c
 80088be:	e772      	b.n	80087a6 <_dtoa_r+0xf6>
 80088c0:	9b00      	ldr	r3, [sp, #0]
 80088c2:	f1c0 0020 	rsb	r0, r0, #32
 80088c6:	fa03 f000 	lsl.w	r0, r3, r0
 80088ca:	e7f0      	b.n	80088ae <_dtoa_r+0x1fe>
 80088cc:	2301      	movs	r3, #1
 80088ce:	e7b1      	b.n	8008834 <_dtoa_r+0x184>
 80088d0:	900f      	str	r0, [sp, #60]	; 0x3c
 80088d2:	e7b0      	b.n	8008836 <_dtoa_r+0x186>
 80088d4:	9b05      	ldr	r3, [sp, #20]
 80088d6:	eba3 030a 	sub.w	r3, r3, sl
 80088da:	9305      	str	r3, [sp, #20]
 80088dc:	f1ca 0300 	rsb	r3, sl, #0
 80088e0:	9307      	str	r3, [sp, #28]
 80088e2:	2300      	movs	r3, #0
 80088e4:	930e      	str	r3, [sp, #56]	; 0x38
 80088e6:	e7bb      	b.n	8008860 <_dtoa_r+0x1b0>
 80088e8:	2301      	movs	r3, #1
 80088ea:	930a      	str	r3, [sp, #40]	; 0x28
 80088ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	dd59      	ble.n	80089a6 <_dtoa_r+0x2f6>
 80088f2:	9302      	str	r3, [sp, #8]
 80088f4:	4699      	mov	r9, r3
 80088f6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80088f8:	2200      	movs	r2, #0
 80088fa:	6072      	str	r2, [r6, #4]
 80088fc:	2204      	movs	r2, #4
 80088fe:	f102 0014 	add.w	r0, r2, #20
 8008902:	4298      	cmp	r0, r3
 8008904:	6871      	ldr	r1, [r6, #4]
 8008906:	d953      	bls.n	80089b0 <_dtoa_r+0x300>
 8008908:	4620      	mov	r0, r4
 800890a:	f000 fc99 	bl	8009240 <_Balloc>
 800890e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008910:	6030      	str	r0, [r6, #0]
 8008912:	f1b9 0f0e 	cmp.w	r9, #14
 8008916:	f8d3 b000 	ldr.w	fp, [r3]
 800891a:	f200 80e6 	bhi.w	8008aea <_dtoa_r+0x43a>
 800891e:	2d00      	cmp	r5, #0
 8008920:	f000 80e3 	beq.w	8008aea <_dtoa_r+0x43a>
 8008924:	ed9d 7b00 	vldr	d7, [sp]
 8008928:	f1ba 0f00 	cmp.w	sl, #0
 800892c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008930:	dd74      	ble.n	8008a1c <_dtoa_r+0x36c>
 8008932:	4a2a      	ldr	r2, [pc, #168]	; (80089dc <_dtoa_r+0x32c>)
 8008934:	f00a 030f 	and.w	r3, sl, #15
 8008938:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800893c:	ed93 7b00 	vldr	d7, [r3]
 8008940:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008944:	06f0      	lsls	r0, r6, #27
 8008946:	ed8d 7b08 	vstr	d7, [sp, #32]
 800894a:	d565      	bpl.n	8008a18 <_dtoa_r+0x368>
 800894c:	4b24      	ldr	r3, [pc, #144]	; (80089e0 <_dtoa_r+0x330>)
 800894e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008952:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008956:	f7f7 ff81 	bl	800085c <__aeabi_ddiv>
 800895a:	e9cd 0100 	strd	r0, r1, [sp]
 800895e:	f006 060f 	and.w	r6, r6, #15
 8008962:	2503      	movs	r5, #3
 8008964:	4f1e      	ldr	r7, [pc, #120]	; (80089e0 <_dtoa_r+0x330>)
 8008966:	e04c      	b.n	8008a02 <_dtoa_r+0x352>
 8008968:	2301      	movs	r3, #1
 800896a:	930a      	str	r3, [sp, #40]	; 0x28
 800896c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800896e:	4453      	add	r3, sl
 8008970:	f103 0901 	add.w	r9, r3, #1
 8008974:	9302      	str	r3, [sp, #8]
 8008976:	464b      	mov	r3, r9
 8008978:	2b01      	cmp	r3, #1
 800897a:	bfb8      	it	lt
 800897c:	2301      	movlt	r3, #1
 800897e:	e7ba      	b.n	80088f6 <_dtoa_r+0x246>
 8008980:	2300      	movs	r3, #0
 8008982:	e7b2      	b.n	80088ea <_dtoa_r+0x23a>
 8008984:	2300      	movs	r3, #0
 8008986:	e7f0      	b.n	800896a <_dtoa_r+0x2ba>
 8008988:	2501      	movs	r5, #1
 800898a:	2300      	movs	r3, #0
 800898c:	9306      	str	r3, [sp, #24]
 800898e:	950a      	str	r5, [sp, #40]	; 0x28
 8008990:	f04f 33ff 	mov.w	r3, #4294967295
 8008994:	9302      	str	r3, [sp, #8]
 8008996:	4699      	mov	r9, r3
 8008998:	2200      	movs	r2, #0
 800899a:	2312      	movs	r3, #18
 800899c:	920b      	str	r2, [sp, #44]	; 0x2c
 800899e:	e7aa      	b.n	80088f6 <_dtoa_r+0x246>
 80089a0:	2301      	movs	r3, #1
 80089a2:	930a      	str	r3, [sp, #40]	; 0x28
 80089a4:	e7f4      	b.n	8008990 <_dtoa_r+0x2e0>
 80089a6:	2301      	movs	r3, #1
 80089a8:	9302      	str	r3, [sp, #8]
 80089aa:	4699      	mov	r9, r3
 80089ac:	461a      	mov	r2, r3
 80089ae:	e7f5      	b.n	800899c <_dtoa_r+0x2ec>
 80089b0:	3101      	adds	r1, #1
 80089b2:	6071      	str	r1, [r6, #4]
 80089b4:	0052      	lsls	r2, r2, #1
 80089b6:	e7a2      	b.n	80088fe <_dtoa_r+0x24e>
 80089b8:	636f4361 	.word	0x636f4361
 80089bc:	3fd287a7 	.word	0x3fd287a7
 80089c0:	8b60c8b3 	.word	0x8b60c8b3
 80089c4:	3fc68a28 	.word	0x3fc68a28
 80089c8:	509f79fb 	.word	0x509f79fb
 80089cc:	3fd34413 	.word	0x3fd34413
 80089d0:	7ff00000 	.word	0x7ff00000
 80089d4:	0800a1a9 	.word	0x0800a1a9
 80089d8:	3ff80000 	.word	0x3ff80000
 80089dc:	0800a208 	.word	0x0800a208
 80089e0:	0800a1e0 	.word	0x0800a1e0
 80089e4:	0800a1d5 	.word	0x0800a1d5
 80089e8:	07f1      	lsls	r1, r6, #31
 80089ea:	d508      	bpl.n	80089fe <_dtoa_r+0x34e>
 80089ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80089f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089f4:	f7f7 fe08 	bl	8000608 <__aeabi_dmul>
 80089f8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80089fc:	3501      	adds	r5, #1
 80089fe:	1076      	asrs	r6, r6, #1
 8008a00:	3708      	adds	r7, #8
 8008a02:	2e00      	cmp	r6, #0
 8008a04:	d1f0      	bne.n	80089e8 <_dtoa_r+0x338>
 8008a06:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008a0a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a0e:	f7f7 ff25 	bl	800085c <__aeabi_ddiv>
 8008a12:	e9cd 0100 	strd	r0, r1, [sp]
 8008a16:	e01a      	b.n	8008a4e <_dtoa_r+0x39e>
 8008a18:	2502      	movs	r5, #2
 8008a1a:	e7a3      	b.n	8008964 <_dtoa_r+0x2b4>
 8008a1c:	f000 80a0 	beq.w	8008b60 <_dtoa_r+0x4b0>
 8008a20:	f1ca 0600 	rsb	r6, sl, #0
 8008a24:	4b9f      	ldr	r3, [pc, #636]	; (8008ca4 <_dtoa_r+0x5f4>)
 8008a26:	4fa0      	ldr	r7, [pc, #640]	; (8008ca8 <_dtoa_r+0x5f8>)
 8008a28:	f006 020f 	and.w	r2, r6, #15
 8008a2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a34:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008a38:	f7f7 fde6 	bl	8000608 <__aeabi_dmul>
 8008a3c:	e9cd 0100 	strd	r0, r1, [sp]
 8008a40:	1136      	asrs	r6, r6, #4
 8008a42:	2300      	movs	r3, #0
 8008a44:	2502      	movs	r5, #2
 8008a46:	2e00      	cmp	r6, #0
 8008a48:	d17f      	bne.n	8008b4a <_dtoa_r+0x49a>
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d1e1      	bne.n	8008a12 <_dtoa_r+0x362>
 8008a4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	f000 8087 	beq.w	8008b64 <_dtoa_r+0x4b4>
 8008a56:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	4b93      	ldr	r3, [pc, #588]	; (8008cac <_dtoa_r+0x5fc>)
 8008a5e:	4630      	mov	r0, r6
 8008a60:	4639      	mov	r1, r7
 8008a62:	f7f8 f843 	bl	8000aec <__aeabi_dcmplt>
 8008a66:	2800      	cmp	r0, #0
 8008a68:	d07c      	beq.n	8008b64 <_dtoa_r+0x4b4>
 8008a6a:	f1b9 0f00 	cmp.w	r9, #0
 8008a6e:	d079      	beq.n	8008b64 <_dtoa_r+0x4b4>
 8008a70:	9b02      	ldr	r3, [sp, #8]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	dd35      	ble.n	8008ae2 <_dtoa_r+0x432>
 8008a76:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008a7a:	9308      	str	r3, [sp, #32]
 8008a7c:	4639      	mov	r1, r7
 8008a7e:	2200      	movs	r2, #0
 8008a80:	4b8b      	ldr	r3, [pc, #556]	; (8008cb0 <_dtoa_r+0x600>)
 8008a82:	4630      	mov	r0, r6
 8008a84:	f7f7 fdc0 	bl	8000608 <__aeabi_dmul>
 8008a88:	e9cd 0100 	strd	r0, r1, [sp]
 8008a8c:	9f02      	ldr	r7, [sp, #8]
 8008a8e:	3501      	adds	r5, #1
 8008a90:	4628      	mov	r0, r5
 8008a92:	f7f7 fd4f 	bl	8000534 <__aeabi_i2d>
 8008a96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a9a:	f7f7 fdb5 	bl	8000608 <__aeabi_dmul>
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	4b84      	ldr	r3, [pc, #528]	; (8008cb4 <_dtoa_r+0x604>)
 8008aa2:	f7f7 fbfb 	bl	800029c <__adddf3>
 8008aa6:	4605      	mov	r5, r0
 8008aa8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008aac:	2f00      	cmp	r7, #0
 8008aae:	d15d      	bne.n	8008b6c <_dtoa_r+0x4bc>
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	4b81      	ldr	r3, [pc, #516]	; (8008cb8 <_dtoa_r+0x608>)
 8008ab4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ab8:	f7f7 fbee 	bl	8000298 <__aeabi_dsub>
 8008abc:	462a      	mov	r2, r5
 8008abe:	4633      	mov	r3, r6
 8008ac0:	e9cd 0100 	strd	r0, r1, [sp]
 8008ac4:	f7f8 f830 	bl	8000b28 <__aeabi_dcmpgt>
 8008ac8:	2800      	cmp	r0, #0
 8008aca:	f040 8288 	bne.w	8008fde <_dtoa_r+0x92e>
 8008ace:	462a      	mov	r2, r5
 8008ad0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008ad4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ad8:	f7f8 f808 	bl	8000aec <__aeabi_dcmplt>
 8008adc:	2800      	cmp	r0, #0
 8008ade:	f040 827c 	bne.w	8008fda <_dtoa_r+0x92a>
 8008ae2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008ae6:	e9cd 2300 	strd	r2, r3, [sp]
 8008aea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	f2c0 8150 	blt.w	8008d92 <_dtoa_r+0x6e2>
 8008af2:	f1ba 0f0e 	cmp.w	sl, #14
 8008af6:	f300 814c 	bgt.w	8008d92 <_dtoa_r+0x6e2>
 8008afa:	4b6a      	ldr	r3, [pc, #424]	; (8008ca4 <_dtoa_r+0x5f4>)
 8008afc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008b00:	ed93 7b00 	vldr	d7, [r3]
 8008b04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008b0c:	f280 80d8 	bge.w	8008cc0 <_dtoa_r+0x610>
 8008b10:	f1b9 0f00 	cmp.w	r9, #0
 8008b14:	f300 80d4 	bgt.w	8008cc0 <_dtoa_r+0x610>
 8008b18:	f040 825e 	bne.w	8008fd8 <_dtoa_r+0x928>
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	4b66      	ldr	r3, [pc, #408]	; (8008cb8 <_dtoa_r+0x608>)
 8008b20:	ec51 0b17 	vmov	r0, r1, d7
 8008b24:	f7f7 fd70 	bl	8000608 <__aeabi_dmul>
 8008b28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b2c:	f7f7 fff2 	bl	8000b14 <__aeabi_dcmpge>
 8008b30:	464f      	mov	r7, r9
 8008b32:	464e      	mov	r6, r9
 8008b34:	2800      	cmp	r0, #0
 8008b36:	f040 8234 	bne.w	8008fa2 <_dtoa_r+0x8f2>
 8008b3a:	2331      	movs	r3, #49	; 0x31
 8008b3c:	f10b 0501 	add.w	r5, fp, #1
 8008b40:	f88b 3000 	strb.w	r3, [fp]
 8008b44:	f10a 0a01 	add.w	sl, sl, #1
 8008b48:	e22f      	b.n	8008faa <_dtoa_r+0x8fa>
 8008b4a:	07f2      	lsls	r2, r6, #31
 8008b4c:	d505      	bpl.n	8008b5a <_dtoa_r+0x4aa>
 8008b4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b52:	f7f7 fd59 	bl	8000608 <__aeabi_dmul>
 8008b56:	3501      	adds	r5, #1
 8008b58:	2301      	movs	r3, #1
 8008b5a:	1076      	asrs	r6, r6, #1
 8008b5c:	3708      	adds	r7, #8
 8008b5e:	e772      	b.n	8008a46 <_dtoa_r+0x396>
 8008b60:	2502      	movs	r5, #2
 8008b62:	e774      	b.n	8008a4e <_dtoa_r+0x39e>
 8008b64:	f8cd a020 	str.w	sl, [sp, #32]
 8008b68:	464f      	mov	r7, r9
 8008b6a:	e791      	b.n	8008a90 <_dtoa_r+0x3e0>
 8008b6c:	4b4d      	ldr	r3, [pc, #308]	; (8008ca4 <_dtoa_r+0x5f4>)
 8008b6e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008b72:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008b76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d047      	beq.n	8008c0c <_dtoa_r+0x55c>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	460b      	mov	r3, r1
 8008b80:	2000      	movs	r0, #0
 8008b82:	494e      	ldr	r1, [pc, #312]	; (8008cbc <_dtoa_r+0x60c>)
 8008b84:	f7f7 fe6a 	bl	800085c <__aeabi_ddiv>
 8008b88:	462a      	mov	r2, r5
 8008b8a:	4633      	mov	r3, r6
 8008b8c:	f7f7 fb84 	bl	8000298 <__aeabi_dsub>
 8008b90:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008b94:	465d      	mov	r5, fp
 8008b96:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b9a:	f7f7 ffe5 	bl	8000b68 <__aeabi_d2iz>
 8008b9e:	4606      	mov	r6, r0
 8008ba0:	f7f7 fcc8 	bl	8000534 <__aeabi_i2d>
 8008ba4:	4602      	mov	r2, r0
 8008ba6:	460b      	mov	r3, r1
 8008ba8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008bac:	f7f7 fb74 	bl	8000298 <__aeabi_dsub>
 8008bb0:	3630      	adds	r6, #48	; 0x30
 8008bb2:	f805 6b01 	strb.w	r6, [r5], #1
 8008bb6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008bba:	e9cd 0100 	strd	r0, r1, [sp]
 8008bbe:	f7f7 ff95 	bl	8000aec <__aeabi_dcmplt>
 8008bc2:	2800      	cmp	r0, #0
 8008bc4:	d163      	bne.n	8008c8e <_dtoa_r+0x5de>
 8008bc6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008bca:	2000      	movs	r0, #0
 8008bcc:	4937      	ldr	r1, [pc, #220]	; (8008cac <_dtoa_r+0x5fc>)
 8008bce:	f7f7 fb63 	bl	8000298 <__aeabi_dsub>
 8008bd2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008bd6:	f7f7 ff89 	bl	8000aec <__aeabi_dcmplt>
 8008bda:	2800      	cmp	r0, #0
 8008bdc:	f040 80b7 	bne.w	8008d4e <_dtoa_r+0x69e>
 8008be0:	eba5 030b 	sub.w	r3, r5, fp
 8008be4:	429f      	cmp	r7, r3
 8008be6:	f77f af7c 	ble.w	8008ae2 <_dtoa_r+0x432>
 8008bea:	2200      	movs	r2, #0
 8008bec:	4b30      	ldr	r3, [pc, #192]	; (8008cb0 <_dtoa_r+0x600>)
 8008bee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008bf2:	f7f7 fd09 	bl	8000608 <__aeabi_dmul>
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008bfc:	4b2c      	ldr	r3, [pc, #176]	; (8008cb0 <_dtoa_r+0x600>)
 8008bfe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c02:	f7f7 fd01 	bl	8000608 <__aeabi_dmul>
 8008c06:	e9cd 0100 	strd	r0, r1, [sp]
 8008c0a:	e7c4      	b.n	8008b96 <_dtoa_r+0x4e6>
 8008c0c:	462a      	mov	r2, r5
 8008c0e:	4633      	mov	r3, r6
 8008c10:	f7f7 fcfa 	bl	8000608 <__aeabi_dmul>
 8008c14:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008c18:	eb0b 0507 	add.w	r5, fp, r7
 8008c1c:	465e      	mov	r6, fp
 8008c1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c22:	f7f7 ffa1 	bl	8000b68 <__aeabi_d2iz>
 8008c26:	4607      	mov	r7, r0
 8008c28:	f7f7 fc84 	bl	8000534 <__aeabi_i2d>
 8008c2c:	3730      	adds	r7, #48	; 0x30
 8008c2e:	4602      	mov	r2, r0
 8008c30:	460b      	mov	r3, r1
 8008c32:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c36:	f7f7 fb2f 	bl	8000298 <__aeabi_dsub>
 8008c3a:	f806 7b01 	strb.w	r7, [r6], #1
 8008c3e:	42ae      	cmp	r6, r5
 8008c40:	e9cd 0100 	strd	r0, r1, [sp]
 8008c44:	f04f 0200 	mov.w	r2, #0
 8008c48:	d126      	bne.n	8008c98 <_dtoa_r+0x5e8>
 8008c4a:	4b1c      	ldr	r3, [pc, #112]	; (8008cbc <_dtoa_r+0x60c>)
 8008c4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008c50:	f7f7 fb24 	bl	800029c <__adddf3>
 8008c54:	4602      	mov	r2, r0
 8008c56:	460b      	mov	r3, r1
 8008c58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c5c:	f7f7 ff64 	bl	8000b28 <__aeabi_dcmpgt>
 8008c60:	2800      	cmp	r0, #0
 8008c62:	d174      	bne.n	8008d4e <_dtoa_r+0x69e>
 8008c64:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008c68:	2000      	movs	r0, #0
 8008c6a:	4914      	ldr	r1, [pc, #80]	; (8008cbc <_dtoa_r+0x60c>)
 8008c6c:	f7f7 fb14 	bl	8000298 <__aeabi_dsub>
 8008c70:	4602      	mov	r2, r0
 8008c72:	460b      	mov	r3, r1
 8008c74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c78:	f7f7 ff38 	bl	8000aec <__aeabi_dcmplt>
 8008c7c:	2800      	cmp	r0, #0
 8008c7e:	f43f af30 	beq.w	8008ae2 <_dtoa_r+0x432>
 8008c82:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008c86:	2b30      	cmp	r3, #48	; 0x30
 8008c88:	f105 32ff 	add.w	r2, r5, #4294967295
 8008c8c:	d002      	beq.n	8008c94 <_dtoa_r+0x5e4>
 8008c8e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008c92:	e04a      	b.n	8008d2a <_dtoa_r+0x67a>
 8008c94:	4615      	mov	r5, r2
 8008c96:	e7f4      	b.n	8008c82 <_dtoa_r+0x5d2>
 8008c98:	4b05      	ldr	r3, [pc, #20]	; (8008cb0 <_dtoa_r+0x600>)
 8008c9a:	f7f7 fcb5 	bl	8000608 <__aeabi_dmul>
 8008c9e:	e9cd 0100 	strd	r0, r1, [sp]
 8008ca2:	e7bc      	b.n	8008c1e <_dtoa_r+0x56e>
 8008ca4:	0800a208 	.word	0x0800a208
 8008ca8:	0800a1e0 	.word	0x0800a1e0
 8008cac:	3ff00000 	.word	0x3ff00000
 8008cb0:	40240000 	.word	0x40240000
 8008cb4:	401c0000 	.word	0x401c0000
 8008cb8:	40140000 	.word	0x40140000
 8008cbc:	3fe00000 	.word	0x3fe00000
 8008cc0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008cc4:	465d      	mov	r5, fp
 8008cc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008cca:	4630      	mov	r0, r6
 8008ccc:	4639      	mov	r1, r7
 8008cce:	f7f7 fdc5 	bl	800085c <__aeabi_ddiv>
 8008cd2:	f7f7 ff49 	bl	8000b68 <__aeabi_d2iz>
 8008cd6:	4680      	mov	r8, r0
 8008cd8:	f7f7 fc2c 	bl	8000534 <__aeabi_i2d>
 8008cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ce0:	f7f7 fc92 	bl	8000608 <__aeabi_dmul>
 8008ce4:	4602      	mov	r2, r0
 8008ce6:	460b      	mov	r3, r1
 8008ce8:	4630      	mov	r0, r6
 8008cea:	4639      	mov	r1, r7
 8008cec:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008cf0:	f7f7 fad2 	bl	8000298 <__aeabi_dsub>
 8008cf4:	f805 6b01 	strb.w	r6, [r5], #1
 8008cf8:	eba5 060b 	sub.w	r6, r5, fp
 8008cfc:	45b1      	cmp	r9, r6
 8008cfe:	4602      	mov	r2, r0
 8008d00:	460b      	mov	r3, r1
 8008d02:	d139      	bne.n	8008d78 <_dtoa_r+0x6c8>
 8008d04:	f7f7 faca 	bl	800029c <__adddf3>
 8008d08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d0c:	4606      	mov	r6, r0
 8008d0e:	460f      	mov	r7, r1
 8008d10:	f7f7 ff0a 	bl	8000b28 <__aeabi_dcmpgt>
 8008d14:	b9c8      	cbnz	r0, 8008d4a <_dtoa_r+0x69a>
 8008d16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d1a:	4630      	mov	r0, r6
 8008d1c:	4639      	mov	r1, r7
 8008d1e:	f7f7 fedb 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d22:	b110      	cbz	r0, 8008d2a <_dtoa_r+0x67a>
 8008d24:	f018 0f01 	tst.w	r8, #1
 8008d28:	d10f      	bne.n	8008d4a <_dtoa_r+0x69a>
 8008d2a:	9904      	ldr	r1, [sp, #16]
 8008d2c:	4620      	mov	r0, r4
 8008d2e:	f000 fabb 	bl	80092a8 <_Bfree>
 8008d32:	2300      	movs	r3, #0
 8008d34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008d36:	702b      	strb	r3, [r5, #0]
 8008d38:	f10a 0301 	add.w	r3, sl, #1
 8008d3c:	6013      	str	r3, [r2, #0]
 8008d3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	f000 8241 	beq.w	80091c8 <_dtoa_r+0xb18>
 8008d46:	601d      	str	r5, [r3, #0]
 8008d48:	e23e      	b.n	80091c8 <_dtoa_r+0xb18>
 8008d4a:	f8cd a020 	str.w	sl, [sp, #32]
 8008d4e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008d52:	2a39      	cmp	r2, #57	; 0x39
 8008d54:	f105 33ff 	add.w	r3, r5, #4294967295
 8008d58:	d108      	bne.n	8008d6c <_dtoa_r+0x6bc>
 8008d5a:	459b      	cmp	fp, r3
 8008d5c:	d10a      	bne.n	8008d74 <_dtoa_r+0x6c4>
 8008d5e:	9b08      	ldr	r3, [sp, #32]
 8008d60:	3301      	adds	r3, #1
 8008d62:	9308      	str	r3, [sp, #32]
 8008d64:	2330      	movs	r3, #48	; 0x30
 8008d66:	f88b 3000 	strb.w	r3, [fp]
 8008d6a:	465b      	mov	r3, fp
 8008d6c:	781a      	ldrb	r2, [r3, #0]
 8008d6e:	3201      	adds	r2, #1
 8008d70:	701a      	strb	r2, [r3, #0]
 8008d72:	e78c      	b.n	8008c8e <_dtoa_r+0x5de>
 8008d74:	461d      	mov	r5, r3
 8008d76:	e7ea      	b.n	8008d4e <_dtoa_r+0x69e>
 8008d78:	2200      	movs	r2, #0
 8008d7a:	4b9b      	ldr	r3, [pc, #620]	; (8008fe8 <_dtoa_r+0x938>)
 8008d7c:	f7f7 fc44 	bl	8000608 <__aeabi_dmul>
 8008d80:	2200      	movs	r2, #0
 8008d82:	2300      	movs	r3, #0
 8008d84:	4606      	mov	r6, r0
 8008d86:	460f      	mov	r7, r1
 8008d88:	f7f7 fea6 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d8c:	2800      	cmp	r0, #0
 8008d8e:	d09a      	beq.n	8008cc6 <_dtoa_r+0x616>
 8008d90:	e7cb      	b.n	8008d2a <_dtoa_r+0x67a>
 8008d92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d94:	2a00      	cmp	r2, #0
 8008d96:	f000 808b 	beq.w	8008eb0 <_dtoa_r+0x800>
 8008d9a:	9a06      	ldr	r2, [sp, #24]
 8008d9c:	2a01      	cmp	r2, #1
 8008d9e:	dc6e      	bgt.n	8008e7e <_dtoa_r+0x7ce>
 8008da0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008da2:	2a00      	cmp	r2, #0
 8008da4:	d067      	beq.n	8008e76 <_dtoa_r+0x7c6>
 8008da6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008daa:	9f07      	ldr	r7, [sp, #28]
 8008dac:	9d05      	ldr	r5, [sp, #20]
 8008dae:	9a05      	ldr	r2, [sp, #20]
 8008db0:	2101      	movs	r1, #1
 8008db2:	441a      	add	r2, r3
 8008db4:	4620      	mov	r0, r4
 8008db6:	9205      	str	r2, [sp, #20]
 8008db8:	4498      	add	r8, r3
 8008dba:	f000 fb15 	bl	80093e8 <__i2b>
 8008dbe:	4606      	mov	r6, r0
 8008dc0:	2d00      	cmp	r5, #0
 8008dc2:	dd0c      	ble.n	8008dde <_dtoa_r+0x72e>
 8008dc4:	f1b8 0f00 	cmp.w	r8, #0
 8008dc8:	dd09      	ble.n	8008dde <_dtoa_r+0x72e>
 8008dca:	4545      	cmp	r5, r8
 8008dcc:	9a05      	ldr	r2, [sp, #20]
 8008dce:	462b      	mov	r3, r5
 8008dd0:	bfa8      	it	ge
 8008dd2:	4643      	movge	r3, r8
 8008dd4:	1ad2      	subs	r2, r2, r3
 8008dd6:	9205      	str	r2, [sp, #20]
 8008dd8:	1aed      	subs	r5, r5, r3
 8008dda:	eba8 0803 	sub.w	r8, r8, r3
 8008dde:	9b07      	ldr	r3, [sp, #28]
 8008de0:	b1eb      	cbz	r3, 8008e1e <_dtoa_r+0x76e>
 8008de2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d067      	beq.n	8008eb8 <_dtoa_r+0x808>
 8008de8:	b18f      	cbz	r7, 8008e0e <_dtoa_r+0x75e>
 8008dea:	4631      	mov	r1, r6
 8008dec:	463a      	mov	r2, r7
 8008dee:	4620      	mov	r0, r4
 8008df0:	f000 fb9a 	bl	8009528 <__pow5mult>
 8008df4:	9a04      	ldr	r2, [sp, #16]
 8008df6:	4601      	mov	r1, r0
 8008df8:	4606      	mov	r6, r0
 8008dfa:	4620      	mov	r0, r4
 8008dfc:	f000 fafd 	bl	80093fa <__multiply>
 8008e00:	9904      	ldr	r1, [sp, #16]
 8008e02:	9008      	str	r0, [sp, #32]
 8008e04:	4620      	mov	r0, r4
 8008e06:	f000 fa4f 	bl	80092a8 <_Bfree>
 8008e0a:	9b08      	ldr	r3, [sp, #32]
 8008e0c:	9304      	str	r3, [sp, #16]
 8008e0e:	9b07      	ldr	r3, [sp, #28]
 8008e10:	1bda      	subs	r2, r3, r7
 8008e12:	d004      	beq.n	8008e1e <_dtoa_r+0x76e>
 8008e14:	9904      	ldr	r1, [sp, #16]
 8008e16:	4620      	mov	r0, r4
 8008e18:	f000 fb86 	bl	8009528 <__pow5mult>
 8008e1c:	9004      	str	r0, [sp, #16]
 8008e1e:	2101      	movs	r1, #1
 8008e20:	4620      	mov	r0, r4
 8008e22:	f000 fae1 	bl	80093e8 <__i2b>
 8008e26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e28:	4607      	mov	r7, r0
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	f000 81d0 	beq.w	80091d0 <_dtoa_r+0xb20>
 8008e30:	461a      	mov	r2, r3
 8008e32:	4601      	mov	r1, r0
 8008e34:	4620      	mov	r0, r4
 8008e36:	f000 fb77 	bl	8009528 <__pow5mult>
 8008e3a:	9b06      	ldr	r3, [sp, #24]
 8008e3c:	2b01      	cmp	r3, #1
 8008e3e:	4607      	mov	r7, r0
 8008e40:	dc40      	bgt.n	8008ec4 <_dtoa_r+0x814>
 8008e42:	9b00      	ldr	r3, [sp, #0]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d139      	bne.n	8008ebc <_dtoa_r+0x80c>
 8008e48:	9b01      	ldr	r3, [sp, #4]
 8008e4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d136      	bne.n	8008ec0 <_dtoa_r+0x810>
 8008e52:	9b01      	ldr	r3, [sp, #4]
 8008e54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008e58:	0d1b      	lsrs	r3, r3, #20
 8008e5a:	051b      	lsls	r3, r3, #20
 8008e5c:	b12b      	cbz	r3, 8008e6a <_dtoa_r+0x7ba>
 8008e5e:	9b05      	ldr	r3, [sp, #20]
 8008e60:	3301      	adds	r3, #1
 8008e62:	9305      	str	r3, [sp, #20]
 8008e64:	f108 0801 	add.w	r8, r8, #1
 8008e68:	2301      	movs	r3, #1
 8008e6a:	9307      	str	r3, [sp, #28]
 8008e6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d12a      	bne.n	8008ec8 <_dtoa_r+0x818>
 8008e72:	2001      	movs	r0, #1
 8008e74:	e030      	b.n	8008ed8 <_dtoa_r+0x828>
 8008e76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008e78:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008e7c:	e795      	b.n	8008daa <_dtoa_r+0x6fa>
 8008e7e:	9b07      	ldr	r3, [sp, #28]
 8008e80:	f109 37ff 	add.w	r7, r9, #4294967295
 8008e84:	42bb      	cmp	r3, r7
 8008e86:	bfbf      	itttt	lt
 8008e88:	9b07      	ldrlt	r3, [sp, #28]
 8008e8a:	9707      	strlt	r7, [sp, #28]
 8008e8c:	1afa      	sublt	r2, r7, r3
 8008e8e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008e90:	bfbb      	ittet	lt
 8008e92:	189b      	addlt	r3, r3, r2
 8008e94:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008e96:	1bdf      	subge	r7, r3, r7
 8008e98:	2700      	movlt	r7, #0
 8008e9a:	f1b9 0f00 	cmp.w	r9, #0
 8008e9e:	bfb5      	itete	lt
 8008ea0:	9b05      	ldrlt	r3, [sp, #20]
 8008ea2:	9d05      	ldrge	r5, [sp, #20]
 8008ea4:	eba3 0509 	sublt.w	r5, r3, r9
 8008ea8:	464b      	movge	r3, r9
 8008eaa:	bfb8      	it	lt
 8008eac:	2300      	movlt	r3, #0
 8008eae:	e77e      	b.n	8008dae <_dtoa_r+0x6fe>
 8008eb0:	9f07      	ldr	r7, [sp, #28]
 8008eb2:	9d05      	ldr	r5, [sp, #20]
 8008eb4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008eb6:	e783      	b.n	8008dc0 <_dtoa_r+0x710>
 8008eb8:	9a07      	ldr	r2, [sp, #28]
 8008eba:	e7ab      	b.n	8008e14 <_dtoa_r+0x764>
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	e7d4      	b.n	8008e6a <_dtoa_r+0x7ba>
 8008ec0:	9b00      	ldr	r3, [sp, #0]
 8008ec2:	e7d2      	b.n	8008e6a <_dtoa_r+0x7ba>
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	9307      	str	r3, [sp, #28]
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008ece:	6918      	ldr	r0, [r3, #16]
 8008ed0:	f000 fa3c 	bl	800934c <__hi0bits>
 8008ed4:	f1c0 0020 	rsb	r0, r0, #32
 8008ed8:	4440      	add	r0, r8
 8008eda:	f010 001f 	ands.w	r0, r0, #31
 8008ede:	d047      	beq.n	8008f70 <_dtoa_r+0x8c0>
 8008ee0:	f1c0 0320 	rsb	r3, r0, #32
 8008ee4:	2b04      	cmp	r3, #4
 8008ee6:	dd3b      	ble.n	8008f60 <_dtoa_r+0x8b0>
 8008ee8:	9b05      	ldr	r3, [sp, #20]
 8008eea:	f1c0 001c 	rsb	r0, r0, #28
 8008eee:	4403      	add	r3, r0
 8008ef0:	9305      	str	r3, [sp, #20]
 8008ef2:	4405      	add	r5, r0
 8008ef4:	4480      	add	r8, r0
 8008ef6:	9b05      	ldr	r3, [sp, #20]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	dd05      	ble.n	8008f08 <_dtoa_r+0x858>
 8008efc:	461a      	mov	r2, r3
 8008efe:	9904      	ldr	r1, [sp, #16]
 8008f00:	4620      	mov	r0, r4
 8008f02:	f000 fb5f 	bl	80095c4 <__lshift>
 8008f06:	9004      	str	r0, [sp, #16]
 8008f08:	f1b8 0f00 	cmp.w	r8, #0
 8008f0c:	dd05      	ble.n	8008f1a <_dtoa_r+0x86a>
 8008f0e:	4639      	mov	r1, r7
 8008f10:	4642      	mov	r2, r8
 8008f12:	4620      	mov	r0, r4
 8008f14:	f000 fb56 	bl	80095c4 <__lshift>
 8008f18:	4607      	mov	r7, r0
 8008f1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f1c:	b353      	cbz	r3, 8008f74 <_dtoa_r+0x8c4>
 8008f1e:	4639      	mov	r1, r7
 8008f20:	9804      	ldr	r0, [sp, #16]
 8008f22:	f000 fba3 	bl	800966c <__mcmp>
 8008f26:	2800      	cmp	r0, #0
 8008f28:	da24      	bge.n	8008f74 <_dtoa_r+0x8c4>
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	220a      	movs	r2, #10
 8008f2e:	9904      	ldr	r1, [sp, #16]
 8008f30:	4620      	mov	r0, r4
 8008f32:	f000 f9d0 	bl	80092d6 <__multadd>
 8008f36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f38:	9004      	str	r0, [sp, #16]
 8008f3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	f000 814d 	beq.w	80091de <_dtoa_r+0xb2e>
 8008f44:	2300      	movs	r3, #0
 8008f46:	4631      	mov	r1, r6
 8008f48:	220a      	movs	r2, #10
 8008f4a:	4620      	mov	r0, r4
 8008f4c:	f000 f9c3 	bl	80092d6 <__multadd>
 8008f50:	9b02      	ldr	r3, [sp, #8]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	4606      	mov	r6, r0
 8008f56:	dc4f      	bgt.n	8008ff8 <_dtoa_r+0x948>
 8008f58:	9b06      	ldr	r3, [sp, #24]
 8008f5a:	2b02      	cmp	r3, #2
 8008f5c:	dd4c      	ble.n	8008ff8 <_dtoa_r+0x948>
 8008f5e:	e011      	b.n	8008f84 <_dtoa_r+0x8d4>
 8008f60:	d0c9      	beq.n	8008ef6 <_dtoa_r+0x846>
 8008f62:	9a05      	ldr	r2, [sp, #20]
 8008f64:	331c      	adds	r3, #28
 8008f66:	441a      	add	r2, r3
 8008f68:	9205      	str	r2, [sp, #20]
 8008f6a:	441d      	add	r5, r3
 8008f6c:	4498      	add	r8, r3
 8008f6e:	e7c2      	b.n	8008ef6 <_dtoa_r+0x846>
 8008f70:	4603      	mov	r3, r0
 8008f72:	e7f6      	b.n	8008f62 <_dtoa_r+0x8b2>
 8008f74:	f1b9 0f00 	cmp.w	r9, #0
 8008f78:	dc38      	bgt.n	8008fec <_dtoa_r+0x93c>
 8008f7a:	9b06      	ldr	r3, [sp, #24]
 8008f7c:	2b02      	cmp	r3, #2
 8008f7e:	dd35      	ble.n	8008fec <_dtoa_r+0x93c>
 8008f80:	f8cd 9008 	str.w	r9, [sp, #8]
 8008f84:	9b02      	ldr	r3, [sp, #8]
 8008f86:	b963      	cbnz	r3, 8008fa2 <_dtoa_r+0x8f2>
 8008f88:	4639      	mov	r1, r7
 8008f8a:	2205      	movs	r2, #5
 8008f8c:	4620      	mov	r0, r4
 8008f8e:	f000 f9a2 	bl	80092d6 <__multadd>
 8008f92:	4601      	mov	r1, r0
 8008f94:	4607      	mov	r7, r0
 8008f96:	9804      	ldr	r0, [sp, #16]
 8008f98:	f000 fb68 	bl	800966c <__mcmp>
 8008f9c:	2800      	cmp	r0, #0
 8008f9e:	f73f adcc 	bgt.w	8008b3a <_dtoa_r+0x48a>
 8008fa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fa4:	465d      	mov	r5, fp
 8008fa6:	ea6f 0a03 	mvn.w	sl, r3
 8008faa:	f04f 0900 	mov.w	r9, #0
 8008fae:	4639      	mov	r1, r7
 8008fb0:	4620      	mov	r0, r4
 8008fb2:	f000 f979 	bl	80092a8 <_Bfree>
 8008fb6:	2e00      	cmp	r6, #0
 8008fb8:	f43f aeb7 	beq.w	8008d2a <_dtoa_r+0x67a>
 8008fbc:	f1b9 0f00 	cmp.w	r9, #0
 8008fc0:	d005      	beq.n	8008fce <_dtoa_r+0x91e>
 8008fc2:	45b1      	cmp	r9, r6
 8008fc4:	d003      	beq.n	8008fce <_dtoa_r+0x91e>
 8008fc6:	4649      	mov	r1, r9
 8008fc8:	4620      	mov	r0, r4
 8008fca:	f000 f96d 	bl	80092a8 <_Bfree>
 8008fce:	4631      	mov	r1, r6
 8008fd0:	4620      	mov	r0, r4
 8008fd2:	f000 f969 	bl	80092a8 <_Bfree>
 8008fd6:	e6a8      	b.n	8008d2a <_dtoa_r+0x67a>
 8008fd8:	2700      	movs	r7, #0
 8008fda:	463e      	mov	r6, r7
 8008fdc:	e7e1      	b.n	8008fa2 <_dtoa_r+0x8f2>
 8008fde:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008fe2:	463e      	mov	r6, r7
 8008fe4:	e5a9      	b.n	8008b3a <_dtoa_r+0x48a>
 8008fe6:	bf00      	nop
 8008fe8:	40240000 	.word	0x40240000
 8008fec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fee:	f8cd 9008 	str.w	r9, [sp, #8]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	f000 80fa 	beq.w	80091ec <_dtoa_r+0xb3c>
 8008ff8:	2d00      	cmp	r5, #0
 8008ffa:	dd05      	ble.n	8009008 <_dtoa_r+0x958>
 8008ffc:	4631      	mov	r1, r6
 8008ffe:	462a      	mov	r2, r5
 8009000:	4620      	mov	r0, r4
 8009002:	f000 fadf 	bl	80095c4 <__lshift>
 8009006:	4606      	mov	r6, r0
 8009008:	9b07      	ldr	r3, [sp, #28]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d04c      	beq.n	80090a8 <_dtoa_r+0x9f8>
 800900e:	6871      	ldr	r1, [r6, #4]
 8009010:	4620      	mov	r0, r4
 8009012:	f000 f915 	bl	8009240 <_Balloc>
 8009016:	6932      	ldr	r2, [r6, #16]
 8009018:	3202      	adds	r2, #2
 800901a:	4605      	mov	r5, r0
 800901c:	0092      	lsls	r2, r2, #2
 800901e:	f106 010c 	add.w	r1, r6, #12
 8009022:	300c      	adds	r0, #12
 8009024:	f7fe fd5c 	bl	8007ae0 <memcpy>
 8009028:	2201      	movs	r2, #1
 800902a:	4629      	mov	r1, r5
 800902c:	4620      	mov	r0, r4
 800902e:	f000 fac9 	bl	80095c4 <__lshift>
 8009032:	9b00      	ldr	r3, [sp, #0]
 8009034:	f8cd b014 	str.w	fp, [sp, #20]
 8009038:	f003 0301 	and.w	r3, r3, #1
 800903c:	46b1      	mov	r9, r6
 800903e:	9307      	str	r3, [sp, #28]
 8009040:	4606      	mov	r6, r0
 8009042:	4639      	mov	r1, r7
 8009044:	9804      	ldr	r0, [sp, #16]
 8009046:	f7ff faa7 	bl	8008598 <quorem>
 800904a:	4649      	mov	r1, r9
 800904c:	4605      	mov	r5, r0
 800904e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009052:	9804      	ldr	r0, [sp, #16]
 8009054:	f000 fb0a 	bl	800966c <__mcmp>
 8009058:	4632      	mov	r2, r6
 800905a:	9000      	str	r0, [sp, #0]
 800905c:	4639      	mov	r1, r7
 800905e:	4620      	mov	r0, r4
 8009060:	f000 fb1e 	bl	80096a0 <__mdiff>
 8009064:	68c3      	ldr	r3, [r0, #12]
 8009066:	4602      	mov	r2, r0
 8009068:	bb03      	cbnz	r3, 80090ac <_dtoa_r+0x9fc>
 800906a:	4601      	mov	r1, r0
 800906c:	9008      	str	r0, [sp, #32]
 800906e:	9804      	ldr	r0, [sp, #16]
 8009070:	f000 fafc 	bl	800966c <__mcmp>
 8009074:	9a08      	ldr	r2, [sp, #32]
 8009076:	4603      	mov	r3, r0
 8009078:	4611      	mov	r1, r2
 800907a:	4620      	mov	r0, r4
 800907c:	9308      	str	r3, [sp, #32]
 800907e:	f000 f913 	bl	80092a8 <_Bfree>
 8009082:	9b08      	ldr	r3, [sp, #32]
 8009084:	b9a3      	cbnz	r3, 80090b0 <_dtoa_r+0xa00>
 8009086:	9a06      	ldr	r2, [sp, #24]
 8009088:	b992      	cbnz	r2, 80090b0 <_dtoa_r+0xa00>
 800908a:	9a07      	ldr	r2, [sp, #28]
 800908c:	b982      	cbnz	r2, 80090b0 <_dtoa_r+0xa00>
 800908e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009092:	d029      	beq.n	80090e8 <_dtoa_r+0xa38>
 8009094:	9b00      	ldr	r3, [sp, #0]
 8009096:	2b00      	cmp	r3, #0
 8009098:	dd01      	ble.n	800909e <_dtoa_r+0x9ee>
 800909a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800909e:	9b05      	ldr	r3, [sp, #20]
 80090a0:	1c5d      	adds	r5, r3, #1
 80090a2:	f883 8000 	strb.w	r8, [r3]
 80090a6:	e782      	b.n	8008fae <_dtoa_r+0x8fe>
 80090a8:	4630      	mov	r0, r6
 80090aa:	e7c2      	b.n	8009032 <_dtoa_r+0x982>
 80090ac:	2301      	movs	r3, #1
 80090ae:	e7e3      	b.n	8009078 <_dtoa_r+0x9c8>
 80090b0:	9a00      	ldr	r2, [sp, #0]
 80090b2:	2a00      	cmp	r2, #0
 80090b4:	db04      	blt.n	80090c0 <_dtoa_r+0xa10>
 80090b6:	d125      	bne.n	8009104 <_dtoa_r+0xa54>
 80090b8:	9a06      	ldr	r2, [sp, #24]
 80090ba:	bb1a      	cbnz	r2, 8009104 <_dtoa_r+0xa54>
 80090bc:	9a07      	ldr	r2, [sp, #28]
 80090be:	bb0a      	cbnz	r2, 8009104 <_dtoa_r+0xa54>
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	ddec      	ble.n	800909e <_dtoa_r+0x9ee>
 80090c4:	2201      	movs	r2, #1
 80090c6:	9904      	ldr	r1, [sp, #16]
 80090c8:	4620      	mov	r0, r4
 80090ca:	f000 fa7b 	bl	80095c4 <__lshift>
 80090ce:	4639      	mov	r1, r7
 80090d0:	9004      	str	r0, [sp, #16]
 80090d2:	f000 facb 	bl	800966c <__mcmp>
 80090d6:	2800      	cmp	r0, #0
 80090d8:	dc03      	bgt.n	80090e2 <_dtoa_r+0xa32>
 80090da:	d1e0      	bne.n	800909e <_dtoa_r+0x9ee>
 80090dc:	f018 0f01 	tst.w	r8, #1
 80090e0:	d0dd      	beq.n	800909e <_dtoa_r+0x9ee>
 80090e2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80090e6:	d1d8      	bne.n	800909a <_dtoa_r+0x9ea>
 80090e8:	9b05      	ldr	r3, [sp, #20]
 80090ea:	9a05      	ldr	r2, [sp, #20]
 80090ec:	1c5d      	adds	r5, r3, #1
 80090ee:	2339      	movs	r3, #57	; 0x39
 80090f0:	7013      	strb	r3, [r2, #0]
 80090f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80090f6:	2b39      	cmp	r3, #57	; 0x39
 80090f8:	f105 32ff 	add.w	r2, r5, #4294967295
 80090fc:	d04f      	beq.n	800919e <_dtoa_r+0xaee>
 80090fe:	3301      	adds	r3, #1
 8009100:	7013      	strb	r3, [r2, #0]
 8009102:	e754      	b.n	8008fae <_dtoa_r+0x8fe>
 8009104:	9a05      	ldr	r2, [sp, #20]
 8009106:	2b00      	cmp	r3, #0
 8009108:	f102 0501 	add.w	r5, r2, #1
 800910c:	dd06      	ble.n	800911c <_dtoa_r+0xa6c>
 800910e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009112:	d0e9      	beq.n	80090e8 <_dtoa_r+0xa38>
 8009114:	f108 0801 	add.w	r8, r8, #1
 8009118:	9b05      	ldr	r3, [sp, #20]
 800911a:	e7c2      	b.n	80090a2 <_dtoa_r+0x9f2>
 800911c:	9a02      	ldr	r2, [sp, #8]
 800911e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009122:	eba5 030b 	sub.w	r3, r5, fp
 8009126:	4293      	cmp	r3, r2
 8009128:	d021      	beq.n	800916e <_dtoa_r+0xabe>
 800912a:	2300      	movs	r3, #0
 800912c:	220a      	movs	r2, #10
 800912e:	9904      	ldr	r1, [sp, #16]
 8009130:	4620      	mov	r0, r4
 8009132:	f000 f8d0 	bl	80092d6 <__multadd>
 8009136:	45b1      	cmp	r9, r6
 8009138:	9004      	str	r0, [sp, #16]
 800913a:	f04f 0300 	mov.w	r3, #0
 800913e:	f04f 020a 	mov.w	r2, #10
 8009142:	4649      	mov	r1, r9
 8009144:	4620      	mov	r0, r4
 8009146:	d105      	bne.n	8009154 <_dtoa_r+0xaa4>
 8009148:	f000 f8c5 	bl	80092d6 <__multadd>
 800914c:	4681      	mov	r9, r0
 800914e:	4606      	mov	r6, r0
 8009150:	9505      	str	r5, [sp, #20]
 8009152:	e776      	b.n	8009042 <_dtoa_r+0x992>
 8009154:	f000 f8bf 	bl	80092d6 <__multadd>
 8009158:	4631      	mov	r1, r6
 800915a:	4681      	mov	r9, r0
 800915c:	2300      	movs	r3, #0
 800915e:	220a      	movs	r2, #10
 8009160:	4620      	mov	r0, r4
 8009162:	f000 f8b8 	bl	80092d6 <__multadd>
 8009166:	4606      	mov	r6, r0
 8009168:	e7f2      	b.n	8009150 <_dtoa_r+0xaa0>
 800916a:	f04f 0900 	mov.w	r9, #0
 800916e:	2201      	movs	r2, #1
 8009170:	9904      	ldr	r1, [sp, #16]
 8009172:	4620      	mov	r0, r4
 8009174:	f000 fa26 	bl	80095c4 <__lshift>
 8009178:	4639      	mov	r1, r7
 800917a:	9004      	str	r0, [sp, #16]
 800917c:	f000 fa76 	bl	800966c <__mcmp>
 8009180:	2800      	cmp	r0, #0
 8009182:	dcb6      	bgt.n	80090f2 <_dtoa_r+0xa42>
 8009184:	d102      	bne.n	800918c <_dtoa_r+0xadc>
 8009186:	f018 0f01 	tst.w	r8, #1
 800918a:	d1b2      	bne.n	80090f2 <_dtoa_r+0xa42>
 800918c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009190:	2b30      	cmp	r3, #48	; 0x30
 8009192:	f105 32ff 	add.w	r2, r5, #4294967295
 8009196:	f47f af0a 	bne.w	8008fae <_dtoa_r+0x8fe>
 800919a:	4615      	mov	r5, r2
 800919c:	e7f6      	b.n	800918c <_dtoa_r+0xadc>
 800919e:	4593      	cmp	fp, r2
 80091a0:	d105      	bne.n	80091ae <_dtoa_r+0xafe>
 80091a2:	2331      	movs	r3, #49	; 0x31
 80091a4:	f10a 0a01 	add.w	sl, sl, #1
 80091a8:	f88b 3000 	strb.w	r3, [fp]
 80091ac:	e6ff      	b.n	8008fae <_dtoa_r+0x8fe>
 80091ae:	4615      	mov	r5, r2
 80091b0:	e79f      	b.n	80090f2 <_dtoa_r+0xa42>
 80091b2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009218 <_dtoa_r+0xb68>
 80091b6:	e007      	b.n	80091c8 <_dtoa_r+0xb18>
 80091b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091ba:	f8df b060 	ldr.w	fp, [pc, #96]	; 800921c <_dtoa_r+0xb6c>
 80091be:	b11b      	cbz	r3, 80091c8 <_dtoa_r+0xb18>
 80091c0:	f10b 0308 	add.w	r3, fp, #8
 80091c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80091c6:	6013      	str	r3, [r2, #0]
 80091c8:	4658      	mov	r0, fp
 80091ca:	b017      	add	sp, #92	; 0x5c
 80091cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091d0:	9b06      	ldr	r3, [sp, #24]
 80091d2:	2b01      	cmp	r3, #1
 80091d4:	f77f ae35 	ble.w	8008e42 <_dtoa_r+0x792>
 80091d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091da:	9307      	str	r3, [sp, #28]
 80091dc:	e649      	b.n	8008e72 <_dtoa_r+0x7c2>
 80091de:	9b02      	ldr	r3, [sp, #8]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	dc03      	bgt.n	80091ec <_dtoa_r+0xb3c>
 80091e4:	9b06      	ldr	r3, [sp, #24]
 80091e6:	2b02      	cmp	r3, #2
 80091e8:	f73f aecc 	bgt.w	8008f84 <_dtoa_r+0x8d4>
 80091ec:	465d      	mov	r5, fp
 80091ee:	4639      	mov	r1, r7
 80091f0:	9804      	ldr	r0, [sp, #16]
 80091f2:	f7ff f9d1 	bl	8008598 <quorem>
 80091f6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80091fa:	f805 8b01 	strb.w	r8, [r5], #1
 80091fe:	9a02      	ldr	r2, [sp, #8]
 8009200:	eba5 030b 	sub.w	r3, r5, fp
 8009204:	429a      	cmp	r2, r3
 8009206:	ddb0      	ble.n	800916a <_dtoa_r+0xaba>
 8009208:	2300      	movs	r3, #0
 800920a:	220a      	movs	r2, #10
 800920c:	9904      	ldr	r1, [sp, #16]
 800920e:	4620      	mov	r0, r4
 8009210:	f000 f861 	bl	80092d6 <__multadd>
 8009214:	9004      	str	r0, [sp, #16]
 8009216:	e7ea      	b.n	80091ee <_dtoa_r+0xb3e>
 8009218:	0800a1a8 	.word	0x0800a1a8
 800921c:	0800a1cc 	.word	0x0800a1cc

08009220 <_localeconv_r>:
 8009220:	4b04      	ldr	r3, [pc, #16]	; (8009234 <_localeconv_r+0x14>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	6a18      	ldr	r0, [r3, #32]
 8009226:	4b04      	ldr	r3, [pc, #16]	; (8009238 <_localeconv_r+0x18>)
 8009228:	2800      	cmp	r0, #0
 800922a:	bf08      	it	eq
 800922c:	4618      	moveq	r0, r3
 800922e:	30f0      	adds	r0, #240	; 0xf0
 8009230:	4770      	bx	lr
 8009232:	bf00      	nop
 8009234:	200001a0 	.word	0x200001a0
 8009238:	20000204 	.word	0x20000204

0800923c <__malloc_lock>:
 800923c:	4770      	bx	lr

0800923e <__malloc_unlock>:
 800923e:	4770      	bx	lr

08009240 <_Balloc>:
 8009240:	b570      	push	{r4, r5, r6, lr}
 8009242:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009244:	4604      	mov	r4, r0
 8009246:	460e      	mov	r6, r1
 8009248:	b93d      	cbnz	r5, 800925a <_Balloc+0x1a>
 800924a:	2010      	movs	r0, #16
 800924c:	f7fe fc38 	bl	8007ac0 <malloc>
 8009250:	6260      	str	r0, [r4, #36]	; 0x24
 8009252:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009256:	6005      	str	r5, [r0, #0]
 8009258:	60c5      	str	r5, [r0, #12]
 800925a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800925c:	68eb      	ldr	r3, [r5, #12]
 800925e:	b183      	cbz	r3, 8009282 <_Balloc+0x42>
 8009260:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009262:	68db      	ldr	r3, [r3, #12]
 8009264:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009268:	b9b8      	cbnz	r0, 800929a <_Balloc+0x5a>
 800926a:	2101      	movs	r1, #1
 800926c:	fa01 f506 	lsl.w	r5, r1, r6
 8009270:	1d6a      	adds	r2, r5, #5
 8009272:	0092      	lsls	r2, r2, #2
 8009274:	4620      	mov	r0, r4
 8009276:	f000 fabf 	bl	80097f8 <_calloc_r>
 800927a:	b160      	cbz	r0, 8009296 <_Balloc+0x56>
 800927c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009280:	e00e      	b.n	80092a0 <_Balloc+0x60>
 8009282:	2221      	movs	r2, #33	; 0x21
 8009284:	2104      	movs	r1, #4
 8009286:	4620      	mov	r0, r4
 8009288:	f000 fab6 	bl	80097f8 <_calloc_r>
 800928c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800928e:	60e8      	str	r0, [r5, #12]
 8009290:	68db      	ldr	r3, [r3, #12]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d1e4      	bne.n	8009260 <_Balloc+0x20>
 8009296:	2000      	movs	r0, #0
 8009298:	bd70      	pop	{r4, r5, r6, pc}
 800929a:	6802      	ldr	r2, [r0, #0]
 800929c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80092a0:	2300      	movs	r3, #0
 80092a2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80092a6:	e7f7      	b.n	8009298 <_Balloc+0x58>

080092a8 <_Bfree>:
 80092a8:	b570      	push	{r4, r5, r6, lr}
 80092aa:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80092ac:	4606      	mov	r6, r0
 80092ae:	460d      	mov	r5, r1
 80092b0:	b93c      	cbnz	r4, 80092c2 <_Bfree+0x1a>
 80092b2:	2010      	movs	r0, #16
 80092b4:	f7fe fc04 	bl	8007ac0 <malloc>
 80092b8:	6270      	str	r0, [r6, #36]	; 0x24
 80092ba:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80092be:	6004      	str	r4, [r0, #0]
 80092c0:	60c4      	str	r4, [r0, #12]
 80092c2:	b13d      	cbz	r5, 80092d4 <_Bfree+0x2c>
 80092c4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80092c6:	686a      	ldr	r2, [r5, #4]
 80092c8:	68db      	ldr	r3, [r3, #12]
 80092ca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80092ce:	6029      	str	r1, [r5, #0]
 80092d0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80092d4:	bd70      	pop	{r4, r5, r6, pc}

080092d6 <__multadd>:
 80092d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092da:	690d      	ldr	r5, [r1, #16]
 80092dc:	461f      	mov	r7, r3
 80092de:	4606      	mov	r6, r0
 80092e0:	460c      	mov	r4, r1
 80092e2:	f101 0c14 	add.w	ip, r1, #20
 80092e6:	2300      	movs	r3, #0
 80092e8:	f8dc 0000 	ldr.w	r0, [ip]
 80092ec:	b281      	uxth	r1, r0
 80092ee:	fb02 7101 	mla	r1, r2, r1, r7
 80092f2:	0c0f      	lsrs	r7, r1, #16
 80092f4:	0c00      	lsrs	r0, r0, #16
 80092f6:	fb02 7000 	mla	r0, r2, r0, r7
 80092fa:	b289      	uxth	r1, r1
 80092fc:	3301      	adds	r3, #1
 80092fe:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009302:	429d      	cmp	r5, r3
 8009304:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009308:	f84c 1b04 	str.w	r1, [ip], #4
 800930c:	dcec      	bgt.n	80092e8 <__multadd+0x12>
 800930e:	b1d7      	cbz	r7, 8009346 <__multadd+0x70>
 8009310:	68a3      	ldr	r3, [r4, #8]
 8009312:	42ab      	cmp	r3, r5
 8009314:	dc12      	bgt.n	800933c <__multadd+0x66>
 8009316:	6861      	ldr	r1, [r4, #4]
 8009318:	4630      	mov	r0, r6
 800931a:	3101      	adds	r1, #1
 800931c:	f7ff ff90 	bl	8009240 <_Balloc>
 8009320:	6922      	ldr	r2, [r4, #16]
 8009322:	3202      	adds	r2, #2
 8009324:	f104 010c 	add.w	r1, r4, #12
 8009328:	4680      	mov	r8, r0
 800932a:	0092      	lsls	r2, r2, #2
 800932c:	300c      	adds	r0, #12
 800932e:	f7fe fbd7 	bl	8007ae0 <memcpy>
 8009332:	4621      	mov	r1, r4
 8009334:	4630      	mov	r0, r6
 8009336:	f7ff ffb7 	bl	80092a8 <_Bfree>
 800933a:	4644      	mov	r4, r8
 800933c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009340:	3501      	adds	r5, #1
 8009342:	615f      	str	r7, [r3, #20]
 8009344:	6125      	str	r5, [r4, #16]
 8009346:	4620      	mov	r0, r4
 8009348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800934c <__hi0bits>:
 800934c:	0c02      	lsrs	r2, r0, #16
 800934e:	0412      	lsls	r2, r2, #16
 8009350:	4603      	mov	r3, r0
 8009352:	b9b2      	cbnz	r2, 8009382 <__hi0bits+0x36>
 8009354:	0403      	lsls	r3, r0, #16
 8009356:	2010      	movs	r0, #16
 8009358:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800935c:	bf04      	itt	eq
 800935e:	021b      	lsleq	r3, r3, #8
 8009360:	3008      	addeq	r0, #8
 8009362:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009366:	bf04      	itt	eq
 8009368:	011b      	lsleq	r3, r3, #4
 800936a:	3004      	addeq	r0, #4
 800936c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009370:	bf04      	itt	eq
 8009372:	009b      	lsleq	r3, r3, #2
 8009374:	3002      	addeq	r0, #2
 8009376:	2b00      	cmp	r3, #0
 8009378:	db06      	blt.n	8009388 <__hi0bits+0x3c>
 800937a:	005b      	lsls	r3, r3, #1
 800937c:	d503      	bpl.n	8009386 <__hi0bits+0x3a>
 800937e:	3001      	adds	r0, #1
 8009380:	4770      	bx	lr
 8009382:	2000      	movs	r0, #0
 8009384:	e7e8      	b.n	8009358 <__hi0bits+0xc>
 8009386:	2020      	movs	r0, #32
 8009388:	4770      	bx	lr

0800938a <__lo0bits>:
 800938a:	6803      	ldr	r3, [r0, #0]
 800938c:	f013 0207 	ands.w	r2, r3, #7
 8009390:	4601      	mov	r1, r0
 8009392:	d00b      	beq.n	80093ac <__lo0bits+0x22>
 8009394:	07da      	lsls	r2, r3, #31
 8009396:	d423      	bmi.n	80093e0 <__lo0bits+0x56>
 8009398:	0798      	lsls	r0, r3, #30
 800939a:	bf49      	itett	mi
 800939c:	085b      	lsrmi	r3, r3, #1
 800939e:	089b      	lsrpl	r3, r3, #2
 80093a0:	2001      	movmi	r0, #1
 80093a2:	600b      	strmi	r3, [r1, #0]
 80093a4:	bf5c      	itt	pl
 80093a6:	600b      	strpl	r3, [r1, #0]
 80093a8:	2002      	movpl	r0, #2
 80093aa:	4770      	bx	lr
 80093ac:	b298      	uxth	r0, r3
 80093ae:	b9a8      	cbnz	r0, 80093dc <__lo0bits+0x52>
 80093b0:	0c1b      	lsrs	r3, r3, #16
 80093b2:	2010      	movs	r0, #16
 80093b4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80093b8:	bf04      	itt	eq
 80093ba:	0a1b      	lsreq	r3, r3, #8
 80093bc:	3008      	addeq	r0, #8
 80093be:	071a      	lsls	r2, r3, #28
 80093c0:	bf04      	itt	eq
 80093c2:	091b      	lsreq	r3, r3, #4
 80093c4:	3004      	addeq	r0, #4
 80093c6:	079a      	lsls	r2, r3, #30
 80093c8:	bf04      	itt	eq
 80093ca:	089b      	lsreq	r3, r3, #2
 80093cc:	3002      	addeq	r0, #2
 80093ce:	07da      	lsls	r2, r3, #31
 80093d0:	d402      	bmi.n	80093d8 <__lo0bits+0x4e>
 80093d2:	085b      	lsrs	r3, r3, #1
 80093d4:	d006      	beq.n	80093e4 <__lo0bits+0x5a>
 80093d6:	3001      	adds	r0, #1
 80093d8:	600b      	str	r3, [r1, #0]
 80093da:	4770      	bx	lr
 80093dc:	4610      	mov	r0, r2
 80093de:	e7e9      	b.n	80093b4 <__lo0bits+0x2a>
 80093e0:	2000      	movs	r0, #0
 80093e2:	4770      	bx	lr
 80093e4:	2020      	movs	r0, #32
 80093e6:	4770      	bx	lr

080093e8 <__i2b>:
 80093e8:	b510      	push	{r4, lr}
 80093ea:	460c      	mov	r4, r1
 80093ec:	2101      	movs	r1, #1
 80093ee:	f7ff ff27 	bl	8009240 <_Balloc>
 80093f2:	2201      	movs	r2, #1
 80093f4:	6144      	str	r4, [r0, #20]
 80093f6:	6102      	str	r2, [r0, #16]
 80093f8:	bd10      	pop	{r4, pc}

080093fa <__multiply>:
 80093fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093fe:	4614      	mov	r4, r2
 8009400:	690a      	ldr	r2, [r1, #16]
 8009402:	6923      	ldr	r3, [r4, #16]
 8009404:	429a      	cmp	r2, r3
 8009406:	bfb8      	it	lt
 8009408:	460b      	movlt	r3, r1
 800940a:	4688      	mov	r8, r1
 800940c:	bfbc      	itt	lt
 800940e:	46a0      	movlt	r8, r4
 8009410:	461c      	movlt	r4, r3
 8009412:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009416:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800941a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800941e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009422:	eb07 0609 	add.w	r6, r7, r9
 8009426:	42b3      	cmp	r3, r6
 8009428:	bfb8      	it	lt
 800942a:	3101      	addlt	r1, #1
 800942c:	f7ff ff08 	bl	8009240 <_Balloc>
 8009430:	f100 0514 	add.w	r5, r0, #20
 8009434:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009438:	462b      	mov	r3, r5
 800943a:	2200      	movs	r2, #0
 800943c:	4573      	cmp	r3, lr
 800943e:	d316      	bcc.n	800946e <__multiply+0x74>
 8009440:	f104 0214 	add.w	r2, r4, #20
 8009444:	f108 0114 	add.w	r1, r8, #20
 8009448:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800944c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009450:	9300      	str	r3, [sp, #0]
 8009452:	9b00      	ldr	r3, [sp, #0]
 8009454:	9201      	str	r2, [sp, #4]
 8009456:	4293      	cmp	r3, r2
 8009458:	d80c      	bhi.n	8009474 <__multiply+0x7a>
 800945a:	2e00      	cmp	r6, #0
 800945c:	dd03      	ble.n	8009466 <__multiply+0x6c>
 800945e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009462:	2b00      	cmp	r3, #0
 8009464:	d05d      	beq.n	8009522 <__multiply+0x128>
 8009466:	6106      	str	r6, [r0, #16]
 8009468:	b003      	add	sp, #12
 800946a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800946e:	f843 2b04 	str.w	r2, [r3], #4
 8009472:	e7e3      	b.n	800943c <__multiply+0x42>
 8009474:	f8b2 b000 	ldrh.w	fp, [r2]
 8009478:	f1bb 0f00 	cmp.w	fp, #0
 800947c:	d023      	beq.n	80094c6 <__multiply+0xcc>
 800947e:	4689      	mov	r9, r1
 8009480:	46ac      	mov	ip, r5
 8009482:	f04f 0800 	mov.w	r8, #0
 8009486:	f859 4b04 	ldr.w	r4, [r9], #4
 800948a:	f8dc a000 	ldr.w	sl, [ip]
 800948e:	b2a3      	uxth	r3, r4
 8009490:	fa1f fa8a 	uxth.w	sl, sl
 8009494:	fb0b a303 	mla	r3, fp, r3, sl
 8009498:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800949c:	f8dc 4000 	ldr.w	r4, [ip]
 80094a0:	4443      	add	r3, r8
 80094a2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80094a6:	fb0b 840a 	mla	r4, fp, sl, r8
 80094aa:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80094ae:	46e2      	mov	sl, ip
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80094b6:	454f      	cmp	r7, r9
 80094b8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80094bc:	f84a 3b04 	str.w	r3, [sl], #4
 80094c0:	d82b      	bhi.n	800951a <__multiply+0x120>
 80094c2:	f8cc 8004 	str.w	r8, [ip, #4]
 80094c6:	9b01      	ldr	r3, [sp, #4]
 80094c8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80094cc:	3204      	adds	r2, #4
 80094ce:	f1ba 0f00 	cmp.w	sl, #0
 80094d2:	d020      	beq.n	8009516 <__multiply+0x11c>
 80094d4:	682b      	ldr	r3, [r5, #0]
 80094d6:	4689      	mov	r9, r1
 80094d8:	46a8      	mov	r8, r5
 80094da:	f04f 0b00 	mov.w	fp, #0
 80094de:	f8b9 c000 	ldrh.w	ip, [r9]
 80094e2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80094e6:	fb0a 440c 	mla	r4, sl, ip, r4
 80094ea:	445c      	add	r4, fp
 80094ec:	46c4      	mov	ip, r8
 80094ee:	b29b      	uxth	r3, r3
 80094f0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80094f4:	f84c 3b04 	str.w	r3, [ip], #4
 80094f8:	f859 3b04 	ldr.w	r3, [r9], #4
 80094fc:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009500:	0c1b      	lsrs	r3, r3, #16
 8009502:	fb0a b303 	mla	r3, sl, r3, fp
 8009506:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800950a:	454f      	cmp	r7, r9
 800950c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009510:	d805      	bhi.n	800951e <__multiply+0x124>
 8009512:	f8c8 3004 	str.w	r3, [r8, #4]
 8009516:	3504      	adds	r5, #4
 8009518:	e79b      	b.n	8009452 <__multiply+0x58>
 800951a:	46d4      	mov	ip, sl
 800951c:	e7b3      	b.n	8009486 <__multiply+0x8c>
 800951e:	46e0      	mov	r8, ip
 8009520:	e7dd      	b.n	80094de <__multiply+0xe4>
 8009522:	3e01      	subs	r6, #1
 8009524:	e799      	b.n	800945a <__multiply+0x60>
	...

08009528 <__pow5mult>:
 8009528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800952c:	4615      	mov	r5, r2
 800952e:	f012 0203 	ands.w	r2, r2, #3
 8009532:	4606      	mov	r6, r0
 8009534:	460f      	mov	r7, r1
 8009536:	d007      	beq.n	8009548 <__pow5mult+0x20>
 8009538:	3a01      	subs	r2, #1
 800953a:	4c21      	ldr	r4, [pc, #132]	; (80095c0 <__pow5mult+0x98>)
 800953c:	2300      	movs	r3, #0
 800953e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009542:	f7ff fec8 	bl	80092d6 <__multadd>
 8009546:	4607      	mov	r7, r0
 8009548:	10ad      	asrs	r5, r5, #2
 800954a:	d035      	beq.n	80095b8 <__pow5mult+0x90>
 800954c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800954e:	b93c      	cbnz	r4, 8009560 <__pow5mult+0x38>
 8009550:	2010      	movs	r0, #16
 8009552:	f7fe fab5 	bl	8007ac0 <malloc>
 8009556:	6270      	str	r0, [r6, #36]	; 0x24
 8009558:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800955c:	6004      	str	r4, [r0, #0]
 800955e:	60c4      	str	r4, [r0, #12]
 8009560:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009564:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009568:	b94c      	cbnz	r4, 800957e <__pow5mult+0x56>
 800956a:	f240 2171 	movw	r1, #625	; 0x271
 800956e:	4630      	mov	r0, r6
 8009570:	f7ff ff3a 	bl	80093e8 <__i2b>
 8009574:	2300      	movs	r3, #0
 8009576:	f8c8 0008 	str.w	r0, [r8, #8]
 800957a:	4604      	mov	r4, r0
 800957c:	6003      	str	r3, [r0, #0]
 800957e:	f04f 0800 	mov.w	r8, #0
 8009582:	07eb      	lsls	r3, r5, #31
 8009584:	d50a      	bpl.n	800959c <__pow5mult+0x74>
 8009586:	4639      	mov	r1, r7
 8009588:	4622      	mov	r2, r4
 800958a:	4630      	mov	r0, r6
 800958c:	f7ff ff35 	bl	80093fa <__multiply>
 8009590:	4639      	mov	r1, r7
 8009592:	4681      	mov	r9, r0
 8009594:	4630      	mov	r0, r6
 8009596:	f7ff fe87 	bl	80092a8 <_Bfree>
 800959a:	464f      	mov	r7, r9
 800959c:	106d      	asrs	r5, r5, #1
 800959e:	d00b      	beq.n	80095b8 <__pow5mult+0x90>
 80095a0:	6820      	ldr	r0, [r4, #0]
 80095a2:	b938      	cbnz	r0, 80095b4 <__pow5mult+0x8c>
 80095a4:	4622      	mov	r2, r4
 80095a6:	4621      	mov	r1, r4
 80095a8:	4630      	mov	r0, r6
 80095aa:	f7ff ff26 	bl	80093fa <__multiply>
 80095ae:	6020      	str	r0, [r4, #0]
 80095b0:	f8c0 8000 	str.w	r8, [r0]
 80095b4:	4604      	mov	r4, r0
 80095b6:	e7e4      	b.n	8009582 <__pow5mult+0x5a>
 80095b8:	4638      	mov	r0, r7
 80095ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095be:	bf00      	nop
 80095c0:	0800a2d0 	.word	0x0800a2d0

080095c4 <__lshift>:
 80095c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095c8:	460c      	mov	r4, r1
 80095ca:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80095ce:	6923      	ldr	r3, [r4, #16]
 80095d0:	6849      	ldr	r1, [r1, #4]
 80095d2:	eb0a 0903 	add.w	r9, sl, r3
 80095d6:	68a3      	ldr	r3, [r4, #8]
 80095d8:	4607      	mov	r7, r0
 80095da:	4616      	mov	r6, r2
 80095dc:	f109 0501 	add.w	r5, r9, #1
 80095e0:	42ab      	cmp	r3, r5
 80095e2:	db32      	blt.n	800964a <__lshift+0x86>
 80095e4:	4638      	mov	r0, r7
 80095e6:	f7ff fe2b 	bl	8009240 <_Balloc>
 80095ea:	2300      	movs	r3, #0
 80095ec:	4680      	mov	r8, r0
 80095ee:	f100 0114 	add.w	r1, r0, #20
 80095f2:	461a      	mov	r2, r3
 80095f4:	4553      	cmp	r3, sl
 80095f6:	db2b      	blt.n	8009650 <__lshift+0x8c>
 80095f8:	6920      	ldr	r0, [r4, #16]
 80095fa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80095fe:	f104 0314 	add.w	r3, r4, #20
 8009602:	f016 021f 	ands.w	r2, r6, #31
 8009606:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800960a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800960e:	d025      	beq.n	800965c <__lshift+0x98>
 8009610:	f1c2 0e20 	rsb	lr, r2, #32
 8009614:	2000      	movs	r0, #0
 8009616:	681e      	ldr	r6, [r3, #0]
 8009618:	468a      	mov	sl, r1
 800961a:	4096      	lsls	r6, r2
 800961c:	4330      	orrs	r0, r6
 800961e:	f84a 0b04 	str.w	r0, [sl], #4
 8009622:	f853 0b04 	ldr.w	r0, [r3], #4
 8009626:	459c      	cmp	ip, r3
 8009628:	fa20 f00e 	lsr.w	r0, r0, lr
 800962c:	d814      	bhi.n	8009658 <__lshift+0x94>
 800962e:	6048      	str	r0, [r1, #4]
 8009630:	b108      	cbz	r0, 8009636 <__lshift+0x72>
 8009632:	f109 0502 	add.w	r5, r9, #2
 8009636:	3d01      	subs	r5, #1
 8009638:	4638      	mov	r0, r7
 800963a:	f8c8 5010 	str.w	r5, [r8, #16]
 800963e:	4621      	mov	r1, r4
 8009640:	f7ff fe32 	bl	80092a8 <_Bfree>
 8009644:	4640      	mov	r0, r8
 8009646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800964a:	3101      	adds	r1, #1
 800964c:	005b      	lsls	r3, r3, #1
 800964e:	e7c7      	b.n	80095e0 <__lshift+0x1c>
 8009650:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009654:	3301      	adds	r3, #1
 8009656:	e7cd      	b.n	80095f4 <__lshift+0x30>
 8009658:	4651      	mov	r1, sl
 800965a:	e7dc      	b.n	8009616 <__lshift+0x52>
 800965c:	3904      	subs	r1, #4
 800965e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009662:	f841 2f04 	str.w	r2, [r1, #4]!
 8009666:	459c      	cmp	ip, r3
 8009668:	d8f9      	bhi.n	800965e <__lshift+0x9a>
 800966a:	e7e4      	b.n	8009636 <__lshift+0x72>

0800966c <__mcmp>:
 800966c:	6903      	ldr	r3, [r0, #16]
 800966e:	690a      	ldr	r2, [r1, #16]
 8009670:	1a9b      	subs	r3, r3, r2
 8009672:	b530      	push	{r4, r5, lr}
 8009674:	d10c      	bne.n	8009690 <__mcmp+0x24>
 8009676:	0092      	lsls	r2, r2, #2
 8009678:	3014      	adds	r0, #20
 800967a:	3114      	adds	r1, #20
 800967c:	1884      	adds	r4, r0, r2
 800967e:	4411      	add	r1, r2
 8009680:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009684:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009688:	4295      	cmp	r5, r2
 800968a:	d003      	beq.n	8009694 <__mcmp+0x28>
 800968c:	d305      	bcc.n	800969a <__mcmp+0x2e>
 800968e:	2301      	movs	r3, #1
 8009690:	4618      	mov	r0, r3
 8009692:	bd30      	pop	{r4, r5, pc}
 8009694:	42a0      	cmp	r0, r4
 8009696:	d3f3      	bcc.n	8009680 <__mcmp+0x14>
 8009698:	e7fa      	b.n	8009690 <__mcmp+0x24>
 800969a:	f04f 33ff 	mov.w	r3, #4294967295
 800969e:	e7f7      	b.n	8009690 <__mcmp+0x24>

080096a0 <__mdiff>:
 80096a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096a4:	460d      	mov	r5, r1
 80096a6:	4607      	mov	r7, r0
 80096a8:	4611      	mov	r1, r2
 80096aa:	4628      	mov	r0, r5
 80096ac:	4614      	mov	r4, r2
 80096ae:	f7ff ffdd 	bl	800966c <__mcmp>
 80096b2:	1e06      	subs	r6, r0, #0
 80096b4:	d108      	bne.n	80096c8 <__mdiff+0x28>
 80096b6:	4631      	mov	r1, r6
 80096b8:	4638      	mov	r0, r7
 80096ba:	f7ff fdc1 	bl	8009240 <_Balloc>
 80096be:	2301      	movs	r3, #1
 80096c0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80096c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096c8:	bfa4      	itt	ge
 80096ca:	4623      	movge	r3, r4
 80096cc:	462c      	movge	r4, r5
 80096ce:	4638      	mov	r0, r7
 80096d0:	6861      	ldr	r1, [r4, #4]
 80096d2:	bfa6      	itte	ge
 80096d4:	461d      	movge	r5, r3
 80096d6:	2600      	movge	r6, #0
 80096d8:	2601      	movlt	r6, #1
 80096da:	f7ff fdb1 	bl	8009240 <_Balloc>
 80096de:	692b      	ldr	r3, [r5, #16]
 80096e0:	60c6      	str	r6, [r0, #12]
 80096e2:	6926      	ldr	r6, [r4, #16]
 80096e4:	f105 0914 	add.w	r9, r5, #20
 80096e8:	f104 0214 	add.w	r2, r4, #20
 80096ec:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80096f0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80096f4:	f100 0514 	add.w	r5, r0, #20
 80096f8:	f04f 0e00 	mov.w	lr, #0
 80096fc:	f852 ab04 	ldr.w	sl, [r2], #4
 8009700:	f859 4b04 	ldr.w	r4, [r9], #4
 8009704:	fa1e f18a 	uxtah	r1, lr, sl
 8009708:	b2a3      	uxth	r3, r4
 800970a:	1ac9      	subs	r1, r1, r3
 800970c:	0c23      	lsrs	r3, r4, #16
 800970e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009712:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009716:	b289      	uxth	r1, r1
 8009718:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800971c:	45c8      	cmp	r8, r9
 800971e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009722:	4694      	mov	ip, r2
 8009724:	f845 3b04 	str.w	r3, [r5], #4
 8009728:	d8e8      	bhi.n	80096fc <__mdiff+0x5c>
 800972a:	45bc      	cmp	ip, r7
 800972c:	d304      	bcc.n	8009738 <__mdiff+0x98>
 800972e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009732:	b183      	cbz	r3, 8009756 <__mdiff+0xb6>
 8009734:	6106      	str	r6, [r0, #16]
 8009736:	e7c5      	b.n	80096c4 <__mdiff+0x24>
 8009738:	f85c 1b04 	ldr.w	r1, [ip], #4
 800973c:	fa1e f381 	uxtah	r3, lr, r1
 8009740:	141a      	asrs	r2, r3, #16
 8009742:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009746:	b29b      	uxth	r3, r3
 8009748:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800974c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009750:	f845 3b04 	str.w	r3, [r5], #4
 8009754:	e7e9      	b.n	800972a <__mdiff+0x8a>
 8009756:	3e01      	subs	r6, #1
 8009758:	e7e9      	b.n	800972e <__mdiff+0x8e>

0800975a <__d2b>:
 800975a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800975e:	460e      	mov	r6, r1
 8009760:	2101      	movs	r1, #1
 8009762:	ec59 8b10 	vmov	r8, r9, d0
 8009766:	4615      	mov	r5, r2
 8009768:	f7ff fd6a 	bl	8009240 <_Balloc>
 800976c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009770:	4607      	mov	r7, r0
 8009772:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009776:	bb34      	cbnz	r4, 80097c6 <__d2b+0x6c>
 8009778:	9301      	str	r3, [sp, #4]
 800977a:	f1b8 0300 	subs.w	r3, r8, #0
 800977e:	d027      	beq.n	80097d0 <__d2b+0x76>
 8009780:	a802      	add	r0, sp, #8
 8009782:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009786:	f7ff fe00 	bl	800938a <__lo0bits>
 800978a:	9900      	ldr	r1, [sp, #0]
 800978c:	b1f0      	cbz	r0, 80097cc <__d2b+0x72>
 800978e:	9a01      	ldr	r2, [sp, #4]
 8009790:	f1c0 0320 	rsb	r3, r0, #32
 8009794:	fa02 f303 	lsl.w	r3, r2, r3
 8009798:	430b      	orrs	r3, r1
 800979a:	40c2      	lsrs	r2, r0
 800979c:	617b      	str	r3, [r7, #20]
 800979e:	9201      	str	r2, [sp, #4]
 80097a0:	9b01      	ldr	r3, [sp, #4]
 80097a2:	61bb      	str	r3, [r7, #24]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	bf14      	ite	ne
 80097a8:	2102      	movne	r1, #2
 80097aa:	2101      	moveq	r1, #1
 80097ac:	6139      	str	r1, [r7, #16]
 80097ae:	b1c4      	cbz	r4, 80097e2 <__d2b+0x88>
 80097b0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80097b4:	4404      	add	r4, r0
 80097b6:	6034      	str	r4, [r6, #0]
 80097b8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80097bc:	6028      	str	r0, [r5, #0]
 80097be:	4638      	mov	r0, r7
 80097c0:	b003      	add	sp, #12
 80097c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80097c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80097ca:	e7d5      	b.n	8009778 <__d2b+0x1e>
 80097cc:	6179      	str	r1, [r7, #20]
 80097ce:	e7e7      	b.n	80097a0 <__d2b+0x46>
 80097d0:	a801      	add	r0, sp, #4
 80097d2:	f7ff fdda 	bl	800938a <__lo0bits>
 80097d6:	9b01      	ldr	r3, [sp, #4]
 80097d8:	617b      	str	r3, [r7, #20]
 80097da:	2101      	movs	r1, #1
 80097dc:	6139      	str	r1, [r7, #16]
 80097de:	3020      	adds	r0, #32
 80097e0:	e7e5      	b.n	80097ae <__d2b+0x54>
 80097e2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80097e6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80097ea:	6030      	str	r0, [r6, #0]
 80097ec:	6918      	ldr	r0, [r3, #16]
 80097ee:	f7ff fdad 	bl	800934c <__hi0bits>
 80097f2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80097f6:	e7e1      	b.n	80097bc <__d2b+0x62>

080097f8 <_calloc_r>:
 80097f8:	b538      	push	{r3, r4, r5, lr}
 80097fa:	fb02 f401 	mul.w	r4, r2, r1
 80097fe:	4621      	mov	r1, r4
 8009800:	f7fe f9d0 	bl	8007ba4 <_malloc_r>
 8009804:	4605      	mov	r5, r0
 8009806:	b118      	cbz	r0, 8009810 <_calloc_r+0x18>
 8009808:	4622      	mov	r2, r4
 800980a:	2100      	movs	r1, #0
 800980c:	f7fe f973 	bl	8007af6 <memset>
 8009810:	4628      	mov	r0, r5
 8009812:	bd38      	pop	{r3, r4, r5, pc}

08009814 <__ssputs_r>:
 8009814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009818:	688e      	ldr	r6, [r1, #8]
 800981a:	429e      	cmp	r6, r3
 800981c:	4682      	mov	sl, r0
 800981e:	460c      	mov	r4, r1
 8009820:	4690      	mov	r8, r2
 8009822:	4699      	mov	r9, r3
 8009824:	d837      	bhi.n	8009896 <__ssputs_r+0x82>
 8009826:	898a      	ldrh	r2, [r1, #12]
 8009828:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800982c:	d031      	beq.n	8009892 <__ssputs_r+0x7e>
 800982e:	6825      	ldr	r5, [r4, #0]
 8009830:	6909      	ldr	r1, [r1, #16]
 8009832:	1a6f      	subs	r7, r5, r1
 8009834:	6965      	ldr	r5, [r4, #20]
 8009836:	2302      	movs	r3, #2
 8009838:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800983c:	fb95 f5f3 	sdiv	r5, r5, r3
 8009840:	f109 0301 	add.w	r3, r9, #1
 8009844:	443b      	add	r3, r7
 8009846:	429d      	cmp	r5, r3
 8009848:	bf38      	it	cc
 800984a:	461d      	movcc	r5, r3
 800984c:	0553      	lsls	r3, r2, #21
 800984e:	d530      	bpl.n	80098b2 <__ssputs_r+0x9e>
 8009850:	4629      	mov	r1, r5
 8009852:	f7fe f9a7 	bl	8007ba4 <_malloc_r>
 8009856:	4606      	mov	r6, r0
 8009858:	b950      	cbnz	r0, 8009870 <__ssputs_r+0x5c>
 800985a:	230c      	movs	r3, #12
 800985c:	f8ca 3000 	str.w	r3, [sl]
 8009860:	89a3      	ldrh	r3, [r4, #12]
 8009862:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009866:	81a3      	strh	r3, [r4, #12]
 8009868:	f04f 30ff 	mov.w	r0, #4294967295
 800986c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009870:	463a      	mov	r2, r7
 8009872:	6921      	ldr	r1, [r4, #16]
 8009874:	f7fe f934 	bl	8007ae0 <memcpy>
 8009878:	89a3      	ldrh	r3, [r4, #12]
 800987a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800987e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009882:	81a3      	strh	r3, [r4, #12]
 8009884:	6126      	str	r6, [r4, #16]
 8009886:	6165      	str	r5, [r4, #20]
 8009888:	443e      	add	r6, r7
 800988a:	1bed      	subs	r5, r5, r7
 800988c:	6026      	str	r6, [r4, #0]
 800988e:	60a5      	str	r5, [r4, #8]
 8009890:	464e      	mov	r6, r9
 8009892:	454e      	cmp	r6, r9
 8009894:	d900      	bls.n	8009898 <__ssputs_r+0x84>
 8009896:	464e      	mov	r6, r9
 8009898:	4632      	mov	r2, r6
 800989a:	4641      	mov	r1, r8
 800989c:	6820      	ldr	r0, [r4, #0]
 800989e:	f000 f91d 	bl	8009adc <memmove>
 80098a2:	68a3      	ldr	r3, [r4, #8]
 80098a4:	1b9b      	subs	r3, r3, r6
 80098a6:	60a3      	str	r3, [r4, #8]
 80098a8:	6823      	ldr	r3, [r4, #0]
 80098aa:	441e      	add	r6, r3
 80098ac:	6026      	str	r6, [r4, #0]
 80098ae:	2000      	movs	r0, #0
 80098b0:	e7dc      	b.n	800986c <__ssputs_r+0x58>
 80098b2:	462a      	mov	r2, r5
 80098b4:	f000 f92b 	bl	8009b0e <_realloc_r>
 80098b8:	4606      	mov	r6, r0
 80098ba:	2800      	cmp	r0, #0
 80098bc:	d1e2      	bne.n	8009884 <__ssputs_r+0x70>
 80098be:	6921      	ldr	r1, [r4, #16]
 80098c0:	4650      	mov	r0, sl
 80098c2:	f7fe f921 	bl	8007b08 <_free_r>
 80098c6:	e7c8      	b.n	800985a <__ssputs_r+0x46>

080098c8 <_svfiprintf_r>:
 80098c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098cc:	461d      	mov	r5, r3
 80098ce:	898b      	ldrh	r3, [r1, #12]
 80098d0:	061f      	lsls	r7, r3, #24
 80098d2:	b09d      	sub	sp, #116	; 0x74
 80098d4:	4680      	mov	r8, r0
 80098d6:	460c      	mov	r4, r1
 80098d8:	4616      	mov	r6, r2
 80098da:	d50f      	bpl.n	80098fc <_svfiprintf_r+0x34>
 80098dc:	690b      	ldr	r3, [r1, #16]
 80098de:	b96b      	cbnz	r3, 80098fc <_svfiprintf_r+0x34>
 80098e0:	2140      	movs	r1, #64	; 0x40
 80098e2:	f7fe f95f 	bl	8007ba4 <_malloc_r>
 80098e6:	6020      	str	r0, [r4, #0]
 80098e8:	6120      	str	r0, [r4, #16]
 80098ea:	b928      	cbnz	r0, 80098f8 <_svfiprintf_r+0x30>
 80098ec:	230c      	movs	r3, #12
 80098ee:	f8c8 3000 	str.w	r3, [r8]
 80098f2:	f04f 30ff 	mov.w	r0, #4294967295
 80098f6:	e0c8      	b.n	8009a8a <_svfiprintf_r+0x1c2>
 80098f8:	2340      	movs	r3, #64	; 0x40
 80098fa:	6163      	str	r3, [r4, #20]
 80098fc:	2300      	movs	r3, #0
 80098fe:	9309      	str	r3, [sp, #36]	; 0x24
 8009900:	2320      	movs	r3, #32
 8009902:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009906:	2330      	movs	r3, #48	; 0x30
 8009908:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800990c:	9503      	str	r5, [sp, #12]
 800990e:	f04f 0b01 	mov.w	fp, #1
 8009912:	4637      	mov	r7, r6
 8009914:	463d      	mov	r5, r7
 8009916:	f815 3b01 	ldrb.w	r3, [r5], #1
 800991a:	b10b      	cbz	r3, 8009920 <_svfiprintf_r+0x58>
 800991c:	2b25      	cmp	r3, #37	; 0x25
 800991e:	d13e      	bne.n	800999e <_svfiprintf_r+0xd6>
 8009920:	ebb7 0a06 	subs.w	sl, r7, r6
 8009924:	d00b      	beq.n	800993e <_svfiprintf_r+0x76>
 8009926:	4653      	mov	r3, sl
 8009928:	4632      	mov	r2, r6
 800992a:	4621      	mov	r1, r4
 800992c:	4640      	mov	r0, r8
 800992e:	f7ff ff71 	bl	8009814 <__ssputs_r>
 8009932:	3001      	adds	r0, #1
 8009934:	f000 80a4 	beq.w	8009a80 <_svfiprintf_r+0x1b8>
 8009938:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800993a:	4453      	add	r3, sl
 800993c:	9309      	str	r3, [sp, #36]	; 0x24
 800993e:	783b      	ldrb	r3, [r7, #0]
 8009940:	2b00      	cmp	r3, #0
 8009942:	f000 809d 	beq.w	8009a80 <_svfiprintf_r+0x1b8>
 8009946:	2300      	movs	r3, #0
 8009948:	f04f 32ff 	mov.w	r2, #4294967295
 800994c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009950:	9304      	str	r3, [sp, #16]
 8009952:	9307      	str	r3, [sp, #28]
 8009954:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009958:	931a      	str	r3, [sp, #104]	; 0x68
 800995a:	462f      	mov	r7, r5
 800995c:	2205      	movs	r2, #5
 800995e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009962:	4850      	ldr	r0, [pc, #320]	; (8009aa4 <_svfiprintf_r+0x1dc>)
 8009964:	f7f6 fc44 	bl	80001f0 <memchr>
 8009968:	9b04      	ldr	r3, [sp, #16]
 800996a:	b9d0      	cbnz	r0, 80099a2 <_svfiprintf_r+0xda>
 800996c:	06d9      	lsls	r1, r3, #27
 800996e:	bf44      	itt	mi
 8009970:	2220      	movmi	r2, #32
 8009972:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009976:	071a      	lsls	r2, r3, #28
 8009978:	bf44      	itt	mi
 800997a:	222b      	movmi	r2, #43	; 0x2b
 800997c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009980:	782a      	ldrb	r2, [r5, #0]
 8009982:	2a2a      	cmp	r2, #42	; 0x2a
 8009984:	d015      	beq.n	80099b2 <_svfiprintf_r+0xea>
 8009986:	9a07      	ldr	r2, [sp, #28]
 8009988:	462f      	mov	r7, r5
 800998a:	2000      	movs	r0, #0
 800998c:	250a      	movs	r5, #10
 800998e:	4639      	mov	r1, r7
 8009990:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009994:	3b30      	subs	r3, #48	; 0x30
 8009996:	2b09      	cmp	r3, #9
 8009998:	d94d      	bls.n	8009a36 <_svfiprintf_r+0x16e>
 800999a:	b1b8      	cbz	r0, 80099cc <_svfiprintf_r+0x104>
 800999c:	e00f      	b.n	80099be <_svfiprintf_r+0xf6>
 800999e:	462f      	mov	r7, r5
 80099a0:	e7b8      	b.n	8009914 <_svfiprintf_r+0x4c>
 80099a2:	4a40      	ldr	r2, [pc, #256]	; (8009aa4 <_svfiprintf_r+0x1dc>)
 80099a4:	1a80      	subs	r0, r0, r2
 80099a6:	fa0b f000 	lsl.w	r0, fp, r0
 80099aa:	4318      	orrs	r0, r3
 80099ac:	9004      	str	r0, [sp, #16]
 80099ae:	463d      	mov	r5, r7
 80099b0:	e7d3      	b.n	800995a <_svfiprintf_r+0x92>
 80099b2:	9a03      	ldr	r2, [sp, #12]
 80099b4:	1d11      	adds	r1, r2, #4
 80099b6:	6812      	ldr	r2, [r2, #0]
 80099b8:	9103      	str	r1, [sp, #12]
 80099ba:	2a00      	cmp	r2, #0
 80099bc:	db01      	blt.n	80099c2 <_svfiprintf_r+0xfa>
 80099be:	9207      	str	r2, [sp, #28]
 80099c0:	e004      	b.n	80099cc <_svfiprintf_r+0x104>
 80099c2:	4252      	negs	r2, r2
 80099c4:	f043 0302 	orr.w	r3, r3, #2
 80099c8:	9207      	str	r2, [sp, #28]
 80099ca:	9304      	str	r3, [sp, #16]
 80099cc:	783b      	ldrb	r3, [r7, #0]
 80099ce:	2b2e      	cmp	r3, #46	; 0x2e
 80099d0:	d10c      	bne.n	80099ec <_svfiprintf_r+0x124>
 80099d2:	787b      	ldrb	r3, [r7, #1]
 80099d4:	2b2a      	cmp	r3, #42	; 0x2a
 80099d6:	d133      	bne.n	8009a40 <_svfiprintf_r+0x178>
 80099d8:	9b03      	ldr	r3, [sp, #12]
 80099da:	1d1a      	adds	r2, r3, #4
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	9203      	str	r2, [sp, #12]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	bfb8      	it	lt
 80099e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80099e8:	3702      	adds	r7, #2
 80099ea:	9305      	str	r3, [sp, #20]
 80099ec:	4d2e      	ldr	r5, [pc, #184]	; (8009aa8 <_svfiprintf_r+0x1e0>)
 80099ee:	7839      	ldrb	r1, [r7, #0]
 80099f0:	2203      	movs	r2, #3
 80099f2:	4628      	mov	r0, r5
 80099f4:	f7f6 fbfc 	bl	80001f0 <memchr>
 80099f8:	b138      	cbz	r0, 8009a0a <_svfiprintf_r+0x142>
 80099fa:	2340      	movs	r3, #64	; 0x40
 80099fc:	1b40      	subs	r0, r0, r5
 80099fe:	fa03 f000 	lsl.w	r0, r3, r0
 8009a02:	9b04      	ldr	r3, [sp, #16]
 8009a04:	4303      	orrs	r3, r0
 8009a06:	3701      	adds	r7, #1
 8009a08:	9304      	str	r3, [sp, #16]
 8009a0a:	7839      	ldrb	r1, [r7, #0]
 8009a0c:	4827      	ldr	r0, [pc, #156]	; (8009aac <_svfiprintf_r+0x1e4>)
 8009a0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a12:	2206      	movs	r2, #6
 8009a14:	1c7e      	adds	r6, r7, #1
 8009a16:	f7f6 fbeb 	bl	80001f0 <memchr>
 8009a1a:	2800      	cmp	r0, #0
 8009a1c:	d038      	beq.n	8009a90 <_svfiprintf_r+0x1c8>
 8009a1e:	4b24      	ldr	r3, [pc, #144]	; (8009ab0 <_svfiprintf_r+0x1e8>)
 8009a20:	bb13      	cbnz	r3, 8009a68 <_svfiprintf_r+0x1a0>
 8009a22:	9b03      	ldr	r3, [sp, #12]
 8009a24:	3307      	adds	r3, #7
 8009a26:	f023 0307 	bic.w	r3, r3, #7
 8009a2a:	3308      	adds	r3, #8
 8009a2c:	9303      	str	r3, [sp, #12]
 8009a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a30:	444b      	add	r3, r9
 8009a32:	9309      	str	r3, [sp, #36]	; 0x24
 8009a34:	e76d      	b.n	8009912 <_svfiprintf_r+0x4a>
 8009a36:	fb05 3202 	mla	r2, r5, r2, r3
 8009a3a:	2001      	movs	r0, #1
 8009a3c:	460f      	mov	r7, r1
 8009a3e:	e7a6      	b.n	800998e <_svfiprintf_r+0xc6>
 8009a40:	2300      	movs	r3, #0
 8009a42:	3701      	adds	r7, #1
 8009a44:	9305      	str	r3, [sp, #20]
 8009a46:	4619      	mov	r1, r3
 8009a48:	250a      	movs	r5, #10
 8009a4a:	4638      	mov	r0, r7
 8009a4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a50:	3a30      	subs	r2, #48	; 0x30
 8009a52:	2a09      	cmp	r2, #9
 8009a54:	d903      	bls.n	8009a5e <_svfiprintf_r+0x196>
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d0c8      	beq.n	80099ec <_svfiprintf_r+0x124>
 8009a5a:	9105      	str	r1, [sp, #20]
 8009a5c:	e7c6      	b.n	80099ec <_svfiprintf_r+0x124>
 8009a5e:	fb05 2101 	mla	r1, r5, r1, r2
 8009a62:	2301      	movs	r3, #1
 8009a64:	4607      	mov	r7, r0
 8009a66:	e7f0      	b.n	8009a4a <_svfiprintf_r+0x182>
 8009a68:	ab03      	add	r3, sp, #12
 8009a6a:	9300      	str	r3, [sp, #0]
 8009a6c:	4622      	mov	r2, r4
 8009a6e:	4b11      	ldr	r3, [pc, #68]	; (8009ab4 <_svfiprintf_r+0x1ec>)
 8009a70:	a904      	add	r1, sp, #16
 8009a72:	4640      	mov	r0, r8
 8009a74:	f7fe f984 	bl	8007d80 <_printf_float>
 8009a78:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009a7c:	4681      	mov	r9, r0
 8009a7e:	d1d6      	bne.n	8009a2e <_svfiprintf_r+0x166>
 8009a80:	89a3      	ldrh	r3, [r4, #12]
 8009a82:	065b      	lsls	r3, r3, #25
 8009a84:	f53f af35 	bmi.w	80098f2 <_svfiprintf_r+0x2a>
 8009a88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a8a:	b01d      	add	sp, #116	; 0x74
 8009a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a90:	ab03      	add	r3, sp, #12
 8009a92:	9300      	str	r3, [sp, #0]
 8009a94:	4622      	mov	r2, r4
 8009a96:	4b07      	ldr	r3, [pc, #28]	; (8009ab4 <_svfiprintf_r+0x1ec>)
 8009a98:	a904      	add	r1, sp, #16
 8009a9a:	4640      	mov	r0, r8
 8009a9c:	f7fe fc26 	bl	80082ec <_printf_i>
 8009aa0:	e7ea      	b.n	8009a78 <_svfiprintf_r+0x1b0>
 8009aa2:	bf00      	nop
 8009aa4:	0800a2dc 	.word	0x0800a2dc
 8009aa8:	0800a2e2 	.word	0x0800a2e2
 8009aac:	0800a2e6 	.word	0x0800a2e6
 8009ab0:	08007d81 	.word	0x08007d81
 8009ab4:	08009815 	.word	0x08009815

08009ab8 <__ascii_mbtowc>:
 8009ab8:	b082      	sub	sp, #8
 8009aba:	b901      	cbnz	r1, 8009abe <__ascii_mbtowc+0x6>
 8009abc:	a901      	add	r1, sp, #4
 8009abe:	b142      	cbz	r2, 8009ad2 <__ascii_mbtowc+0x1a>
 8009ac0:	b14b      	cbz	r3, 8009ad6 <__ascii_mbtowc+0x1e>
 8009ac2:	7813      	ldrb	r3, [r2, #0]
 8009ac4:	600b      	str	r3, [r1, #0]
 8009ac6:	7812      	ldrb	r2, [r2, #0]
 8009ac8:	1c10      	adds	r0, r2, #0
 8009aca:	bf18      	it	ne
 8009acc:	2001      	movne	r0, #1
 8009ace:	b002      	add	sp, #8
 8009ad0:	4770      	bx	lr
 8009ad2:	4610      	mov	r0, r2
 8009ad4:	e7fb      	b.n	8009ace <__ascii_mbtowc+0x16>
 8009ad6:	f06f 0001 	mvn.w	r0, #1
 8009ada:	e7f8      	b.n	8009ace <__ascii_mbtowc+0x16>

08009adc <memmove>:
 8009adc:	4288      	cmp	r0, r1
 8009ade:	b510      	push	{r4, lr}
 8009ae0:	eb01 0302 	add.w	r3, r1, r2
 8009ae4:	d807      	bhi.n	8009af6 <memmove+0x1a>
 8009ae6:	1e42      	subs	r2, r0, #1
 8009ae8:	4299      	cmp	r1, r3
 8009aea:	d00a      	beq.n	8009b02 <memmove+0x26>
 8009aec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009af0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009af4:	e7f8      	b.n	8009ae8 <memmove+0xc>
 8009af6:	4283      	cmp	r3, r0
 8009af8:	d9f5      	bls.n	8009ae6 <memmove+0xa>
 8009afa:	1881      	adds	r1, r0, r2
 8009afc:	1ad2      	subs	r2, r2, r3
 8009afe:	42d3      	cmn	r3, r2
 8009b00:	d100      	bne.n	8009b04 <memmove+0x28>
 8009b02:	bd10      	pop	{r4, pc}
 8009b04:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b08:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009b0c:	e7f7      	b.n	8009afe <memmove+0x22>

08009b0e <_realloc_r>:
 8009b0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b10:	4607      	mov	r7, r0
 8009b12:	4614      	mov	r4, r2
 8009b14:	460e      	mov	r6, r1
 8009b16:	b921      	cbnz	r1, 8009b22 <_realloc_r+0x14>
 8009b18:	4611      	mov	r1, r2
 8009b1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009b1e:	f7fe b841 	b.w	8007ba4 <_malloc_r>
 8009b22:	b922      	cbnz	r2, 8009b2e <_realloc_r+0x20>
 8009b24:	f7fd fff0 	bl	8007b08 <_free_r>
 8009b28:	4625      	mov	r5, r4
 8009b2a:	4628      	mov	r0, r5
 8009b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b2e:	f000 f821 	bl	8009b74 <_malloc_usable_size_r>
 8009b32:	42a0      	cmp	r0, r4
 8009b34:	d20f      	bcs.n	8009b56 <_realloc_r+0x48>
 8009b36:	4621      	mov	r1, r4
 8009b38:	4638      	mov	r0, r7
 8009b3a:	f7fe f833 	bl	8007ba4 <_malloc_r>
 8009b3e:	4605      	mov	r5, r0
 8009b40:	2800      	cmp	r0, #0
 8009b42:	d0f2      	beq.n	8009b2a <_realloc_r+0x1c>
 8009b44:	4631      	mov	r1, r6
 8009b46:	4622      	mov	r2, r4
 8009b48:	f7fd ffca 	bl	8007ae0 <memcpy>
 8009b4c:	4631      	mov	r1, r6
 8009b4e:	4638      	mov	r0, r7
 8009b50:	f7fd ffda 	bl	8007b08 <_free_r>
 8009b54:	e7e9      	b.n	8009b2a <_realloc_r+0x1c>
 8009b56:	4635      	mov	r5, r6
 8009b58:	e7e7      	b.n	8009b2a <_realloc_r+0x1c>

08009b5a <__ascii_wctomb>:
 8009b5a:	b149      	cbz	r1, 8009b70 <__ascii_wctomb+0x16>
 8009b5c:	2aff      	cmp	r2, #255	; 0xff
 8009b5e:	bf85      	ittet	hi
 8009b60:	238a      	movhi	r3, #138	; 0x8a
 8009b62:	6003      	strhi	r3, [r0, #0]
 8009b64:	700a      	strbls	r2, [r1, #0]
 8009b66:	f04f 30ff 	movhi.w	r0, #4294967295
 8009b6a:	bf98      	it	ls
 8009b6c:	2001      	movls	r0, #1
 8009b6e:	4770      	bx	lr
 8009b70:	4608      	mov	r0, r1
 8009b72:	4770      	bx	lr

08009b74 <_malloc_usable_size_r>:
 8009b74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b78:	1f18      	subs	r0, r3, #4
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	bfbc      	itt	lt
 8009b7e:	580b      	ldrlt	r3, [r1, r0]
 8009b80:	18c0      	addlt	r0, r0, r3
 8009b82:	4770      	bx	lr

08009b84 <atan2>:
 8009b84:	f000 b800 	b.w	8009b88 <__ieee754_atan2>

08009b88 <__ieee754_atan2>:
 8009b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b8c:	ec57 6b11 	vmov	r6, r7, d1
 8009b90:	4273      	negs	r3, r6
 8009b92:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8009b96:	4333      	orrs	r3, r6
 8009b98:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8009d40 <__ieee754_atan2+0x1b8>
 8009b9c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009ba0:	4573      	cmp	r3, lr
 8009ba2:	ec51 0b10 	vmov	r0, r1, d0
 8009ba6:	ee11 8a10 	vmov	r8, s2
 8009baa:	d80a      	bhi.n	8009bc2 <__ieee754_atan2+0x3a>
 8009bac:	4244      	negs	r4, r0
 8009bae:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009bb2:	4304      	orrs	r4, r0
 8009bb4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8009bb8:	4574      	cmp	r4, lr
 8009bba:	468c      	mov	ip, r1
 8009bbc:	ee10 9a10 	vmov	r9, s0
 8009bc0:	d907      	bls.n	8009bd2 <__ieee754_atan2+0x4a>
 8009bc2:	4632      	mov	r2, r6
 8009bc4:	463b      	mov	r3, r7
 8009bc6:	f7f6 fb69 	bl	800029c <__adddf3>
 8009bca:	ec41 0b10 	vmov	d0, r0, r1
 8009bce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bd2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8009bd6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009bda:	4334      	orrs	r4, r6
 8009bdc:	d103      	bne.n	8009be6 <__ieee754_atan2+0x5e>
 8009bde:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009be2:	f000 b8b1 	b.w	8009d48 <atan>
 8009be6:	17bc      	asrs	r4, r7, #30
 8009be8:	f004 0402 	and.w	r4, r4, #2
 8009bec:	ea53 0909 	orrs.w	r9, r3, r9
 8009bf0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8009bf4:	d107      	bne.n	8009c06 <__ieee754_atan2+0x7e>
 8009bf6:	2c02      	cmp	r4, #2
 8009bf8:	d073      	beq.n	8009ce2 <__ieee754_atan2+0x15a>
 8009bfa:	2c03      	cmp	r4, #3
 8009bfc:	d1e5      	bne.n	8009bca <__ieee754_atan2+0x42>
 8009bfe:	a13e      	add	r1, pc, #248	; (adr r1, 8009cf8 <__ieee754_atan2+0x170>)
 8009c00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c04:	e7e1      	b.n	8009bca <__ieee754_atan2+0x42>
 8009c06:	ea52 0808 	orrs.w	r8, r2, r8
 8009c0a:	d106      	bne.n	8009c1a <__ieee754_atan2+0x92>
 8009c0c:	f1bc 0f00 	cmp.w	ip, #0
 8009c10:	da6b      	bge.n	8009cea <__ieee754_atan2+0x162>
 8009c12:	a13b      	add	r1, pc, #236	; (adr r1, 8009d00 <__ieee754_atan2+0x178>)
 8009c14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c18:	e7d7      	b.n	8009bca <__ieee754_atan2+0x42>
 8009c1a:	4572      	cmp	r2, lr
 8009c1c:	d120      	bne.n	8009c60 <__ieee754_atan2+0xd8>
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d111      	bne.n	8009c46 <__ieee754_atan2+0xbe>
 8009c22:	2c02      	cmp	r4, #2
 8009c24:	d007      	beq.n	8009c36 <__ieee754_atan2+0xae>
 8009c26:	2c03      	cmp	r4, #3
 8009c28:	d009      	beq.n	8009c3e <__ieee754_atan2+0xb6>
 8009c2a:	2c01      	cmp	r4, #1
 8009c2c:	d155      	bne.n	8009cda <__ieee754_atan2+0x152>
 8009c2e:	a136      	add	r1, pc, #216	; (adr r1, 8009d08 <__ieee754_atan2+0x180>)
 8009c30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c34:	e7c9      	b.n	8009bca <__ieee754_atan2+0x42>
 8009c36:	a136      	add	r1, pc, #216	; (adr r1, 8009d10 <__ieee754_atan2+0x188>)
 8009c38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c3c:	e7c5      	b.n	8009bca <__ieee754_atan2+0x42>
 8009c3e:	a136      	add	r1, pc, #216	; (adr r1, 8009d18 <__ieee754_atan2+0x190>)
 8009c40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c44:	e7c1      	b.n	8009bca <__ieee754_atan2+0x42>
 8009c46:	2c02      	cmp	r4, #2
 8009c48:	d04b      	beq.n	8009ce2 <__ieee754_atan2+0x15a>
 8009c4a:	2c03      	cmp	r4, #3
 8009c4c:	d0d7      	beq.n	8009bfe <__ieee754_atan2+0x76>
 8009c4e:	2c01      	cmp	r4, #1
 8009c50:	f04f 0000 	mov.w	r0, #0
 8009c54:	d102      	bne.n	8009c5c <__ieee754_atan2+0xd4>
 8009c56:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8009c5a:	e7b6      	b.n	8009bca <__ieee754_atan2+0x42>
 8009c5c:	2100      	movs	r1, #0
 8009c5e:	e7b4      	b.n	8009bca <__ieee754_atan2+0x42>
 8009c60:	4573      	cmp	r3, lr
 8009c62:	d0d3      	beq.n	8009c0c <__ieee754_atan2+0x84>
 8009c64:	1a9b      	subs	r3, r3, r2
 8009c66:	151b      	asrs	r3, r3, #20
 8009c68:	2b3c      	cmp	r3, #60	; 0x3c
 8009c6a:	dc1e      	bgt.n	8009caa <__ieee754_atan2+0x122>
 8009c6c:	2f00      	cmp	r7, #0
 8009c6e:	da01      	bge.n	8009c74 <__ieee754_atan2+0xec>
 8009c70:	333c      	adds	r3, #60	; 0x3c
 8009c72:	db1e      	blt.n	8009cb2 <__ieee754_atan2+0x12a>
 8009c74:	4632      	mov	r2, r6
 8009c76:	463b      	mov	r3, r7
 8009c78:	f7f6 fdf0 	bl	800085c <__aeabi_ddiv>
 8009c7c:	ec41 0b10 	vmov	d0, r0, r1
 8009c80:	f000 fa02 	bl	800a088 <fabs>
 8009c84:	f000 f860 	bl	8009d48 <atan>
 8009c88:	ec51 0b10 	vmov	r0, r1, d0
 8009c8c:	2c01      	cmp	r4, #1
 8009c8e:	d013      	beq.n	8009cb8 <__ieee754_atan2+0x130>
 8009c90:	2c02      	cmp	r4, #2
 8009c92:	d015      	beq.n	8009cc0 <__ieee754_atan2+0x138>
 8009c94:	2c00      	cmp	r4, #0
 8009c96:	d098      	beq.n	8009bca <__ieee754_atan2+0x42>
 8009c98:	a321      	add	r3, pc, #132	; (adr r3, 8009d20 <__ieee754_atan2+0x198>)
 8009c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c9e:	f7f6 fafb 	bl	8000298 <__aeabi_dsub>
 8009ca2:	a321      	add	r3, pc, #132	; (adr r3, 8009d28 <__ieee754_atan2+0x1a0>)
 8009ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca8:	e014      	b.n	8009cd4 <__ieee754_atan2+0x14c>
 8009caa:	a121      	add	r1, pc, #132	; (adr r1, 8009d30 <__ieee754_atan2+0x1a8>)
 8009cac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009cb0:	e7ec      	b.n	8009c8c <__ieee754_atan2+0x104>
 8009cb2:	2000      	movs	r0, #0
 8009cb4:	2100      	movs	r1, #0
 8009cb6:	e7e9      	b.n	8009c8c <__ieee754_atan2+0x104>
 8009cb8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009cbc:	4619      	mov	r1, r3
 8009cbe:	e784      	b.n	8009bca <__ieee754_atan2+0x42>
 8009cc0:	a317      	add	r3, pc, #92	; (adr r3, 8009d20 <__ieee754_atan2+0x198>)
 8009cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc6:	f7f6 fae7 	bl	8000298 <__aeabi_dsub>
 8009cca:	4602      	mov	r2, r0
 8009ccc:	460b      	mov	r3, r1
 8009cce:	a116      	add	r1, pc, #88	; (adr r1, 8009d28 <__ieee754_atan2+0x1a0>)
 8009cd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009cd4:	f7f6 fae0 	bl	8000298 <__aeabi_dsub>
 8009cd8:	e777      	b.n	8009bca <__ieee754_atan2+0x42>
 8009cda:	a117      	add	r1, pc, #92	; (adr r1, 8009d38 <__ieee754_atan2+0x1b0>)
 8009cdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ce0:	e773      	b.n	8009bca <__ieee754_atan2+0x42>
 8009ce2:	a111      	add	r1, pc, #68	; (adr r1, 8009d28 <__ieee754_atan2+0x1a0>)
 8009ce4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ce8:	e76f      	b.n	8009bca <__ieee754_atan2+0x42>
 8009cea:	a111      	add	r1, pc, #68	; (adr r1, 8009d30 <__ieee754_atan2+0x1a8>)
 8009cec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009cf0:	e76b      	b.n	8009bca <__ieee754_atan2+0x42>
 8009cf2:	bf00      	nop
 8009cf4:	f3af 8000 	nop.w
 8009cf8:	54442d18 	.word	0x54442d18
 8009cfc:	c00921fb 	.word	0xc00921fb
 8009d00:	54442d18 	.word	0x54442d18
 8009d04:	bff921fb 	.word	0xbff921fb
 8009d08:	54442d18 	.word	0x54442d18
 8009d0c:	bfe921fb 	.word	0xbfe921fb
 8009d10:	7f3321d2 	.word	0x7f3321d2
 8009d14:	4002d97c 	.word	0x4002d97c
 8009d18:	7f3321d2 	.word	0x7f3321d2
 8009d1c:	c002d97c 	.word	0xc002d97c
 8009d20:	33145c07 	.word	0x33145c07
 8009d24:	3ca1a626 	.word	0x3ca1a626
 8009d28:	54442d18 	.word	0x54442d18
 8009d2c:	400921fb 	.word	0x400921fb
 8009d30:	54442d18 	.word	0x54442d18
 8009d34:	3ff921fb 	.word	0x3ff921fb
 8009d38:	54442d18 	.word	0x54442d18
 8009d3c:	3fe921fb 	.word	0x3fe921fb
 8009d40:	7ff00000 	.word	0x7ff00000
 8009d44:	00000000 	.word	0x00000000

08009d48 <atan>:
 8009d48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d4c:	ec55 4b10 	vmov	r4, r5, d0
 8009d50:	4bc3      	ldr	r3, [pc, #780]	; (800a060 <atan+0x318>)
 8009d52:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009d56:	429e      	cmp	r6, r3
 8009d58:	46ab      	mov	fp, r5
 8009d5a:	dd18      	ble.n	8009d8e <atan+0x46>
 8009d5c:	4bc1      	ldr	r3, [pc, #772]	; (800a064 <atan+0x31c>)
 8009d5e:	429e      	cmp	r6, r3
 8009d60:	dc01      	bgt.n	8009d66 <atan+0x1e>
 8009d62:	d109      	bne.n	8009d78 <atan+0x30>
 8009d64:	b144      	cbz	r4, 8009d78 <atan+0x30>
 8009d66:	4622      	mov	r2, r4
 8009d68:	462b      	mov	r3, r5
 8009d6a:	4620      	mov	r0, r4
 8009d6c:	4629      	mov	r1, r5
 8009d6e:	f7f6 fa95 	bl	800029c <__adddf3>
 8009d72:	4604      	mov	r4, r0
 8009d74:	460d      	mov	r5, r1
 8009d76:	e006      	b.n	8009d86 <atan+0x3e>
 8009d78:	f1bb 0f00 	cmp.w	fp, #0
 8009d7c:	f340 8131 	ble.w	8009fe2 <atan+0x29a>
 8009d80:	a59b      	add	r5, pc, #620	; (adr r5, 8009ff0 <atan+0x2a8>)
 8009d82:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009d86:	ec45 4b10 	vmov	d0, r4, r5
 8009d8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d8e:	4bb6      	ldr	r3, [pc, #728]	; (800a068 <atan+0x320>)
 8009d90:	429e      	cmp	r6, r3
 8009d92:	dc14      	bgt.n	8009dbe <atan+0x76>
 8009d94:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009d98:	429e      	cmp	r6, r3
 8009d9a:	dc0d      	bgt.n	8009db8 <atan+0x70>
 8009d9c:	a396      	add	r3, pc, #600	; (adr r3, 8009ff8 <atan+0x2b0>)
 8009d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da2:	ee10 0a10 	vmov	r0, s0
 8009da6:	4629      	mov	r1, r5
 8009da8:	f7f6 fa78 	bl	800029c <__adddf3>
 8009dac:	2200      	movs	r2, #0
 8009dae:	4baf      	ldr	r3, [pc, #700]	; (800a06c <atan+0x324>)
 8009db0:	f7f6 feba 	bl	8000b28 <__aeabi_dcmpgt>
 8009db4:	2800      	cmp	r0, #0
 8009db6:	d1e6      	bne.n	8009d86 <atan+0x3e>
 8009db8:	f04f 3aff 	mov.w	sl, #4294967295
 8009dbc:	e02b      	b.n	8009e16 <atan+0xce>
 8009dbe:	f000 f963 	bl	800a088 <fabs>
 8009dc2:	4bab      	ldr	r3, [pc, #684]	; (800a070 <atan+0x328>)
 8009dc4:	429e      	cmp	r6, r3
 8009dc6:	ec55 4b10 	vmov	r4, r5, d0
 8009dca:	f300 80bf 	bgt.w	8009f4c <atan+0x204>
 8009dce:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009dd2:	429e      	cmp	r6, r3
 8009dd4:	f300 80a0 	bgt.w	8009f18 <atan+0x1d0>
 8009dd8:	ee10 2a10 	vmov	r2, s0
 8009ddc:	ee10 0a10 	vmov	r0, s0
 8009de0:	462b      	mov	r3, r5
 8009de2:	4629      	mov	r1, r5
 8009de4:	f7f6 fa5a 	bl	800029c <__adddf3>
 8009de8:	2200      	movs	r2, #0
 8009dea:	4ba0      	ldr	r3, [pc, #640]	; (800a06c <atan+0x324>)
 8009dec:	f7f6 fa54 	bl	8000298 <__aeabi_dsub>
 8009df0:	2200      	movs	r2, #0
 8009df2:	4606      	mov	r6, r0
 8009df4:	460f      	mov	r7, r1
 8009df6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009dfa:	4620      	mov	r0, r4
 8009dfc:	4629      	mov	r1, r5
 8009dfe:	f7f6 fa4d 	bl	800029c <__adddf3>
 8009e02:	4602      	mov	r2, r0
 8009e04:	460b      	mov	r3, r1
 8009e06:	4630      	mov	r0, r6
 8009e08:	4639      	mov	r1, r7
 8009e0a:	f7f6 fd27 	bl	800085c <__aeabi_ddiv>
 8009e0e:	f04f 0a00 	mov.w	sl, #0
 8009e12:	4604      	mov	r4, r0
 8009e14:	460d      	mov	r5, r1
 8009e16:	4622      	mov	r2, r4
 8009e18:	462b      	mov	r3, r5
 8009e1a:	4620      	mov	r0, r4
 8009e1c:	4629      	mov	r1, r5
 8009e1e:	f7f6 fbf3 	bl	8000608 <__aeabi_dmul>
 8009e22:	4602      	mov	r2, r0
 8009e24:	460b      	mov	r3, r1
 8009e26:	4680      	mov	r8, r0
 8009e28:	4689      	mov	r9, r1
 8009e2a:	f7f6 fbed 	bl	8000608 <__aeabi_dmul>
 8009e2e:	a374      	add	r3, pc, #464	; (adr r3, 800a000 <atan+0x2b8>)
 8009e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e34:	4606      	mov	r6, r0
 8009e36:	460f      	mov	r7, r1
 8009e38:	f7f6 fbe6 	bl	8000608 <__aeabi_dmul>
 8009e3c:	a372      	add	r3, pc, #456	; (adr r3, 800a008 <atan+0x2c0>)
 8009e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e42:	f7f6 fa2b 	bl	800029c <__adddf3>
 8009e46:	4632      	mov	r2, r6
 8009e48:	463b      	mov	r3, r7
 8009e4a:	f7f6 fbdd 	bl	8000608 <__aeabi_dmul>
 8009e4e:	a370      	add	r3, pc, #448	; (adr r3, 800a010 <atan+0x2c8>)
 8009e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e54:	f7f6 fa22 	bl	800029c <__adddf3>
 8009e58:	4632      	mov	r2, r6
 8009e5a:	463b      	mov	r3, r7
 8009e5c:	f7f6 fbd4 	bl	8000608 <__aeabi_dmul>
 8009e60:	a36d      	add	r3, pc, #436	; (adr r3, 800a018 <atan+0x2d0>)
 8009e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e66:	f7f6 fa19 	bl	800029c <__adddf3>
 8009e6a:	4632      	mov	r2, r6
 8009e6c:	463b      	mov	r3, r7
 8009e6e:	f7f6 fbcb 	bl	8000608 <__aeabi_dmul>
 8009e72:	a36b      	add	r3, pc, #428	; (adr r3, 800a020 <atan+0x2d8>)
 8009e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e78:	f7f6 fa10 	bl	800029c <__adddf3>
 8009e7c:	4632      	mov	r2, r6
 8009e7e:	463b      	mov	r3, r7
 8009e80:	f7f6 fbc2 	bl	8000608 <__aeabi_dmul>
 8009e84:	a368      	add	r3, pc, #416	; (adr r3, 800a028 <atan+0x2e0>)
 8009e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e8a:	f7f6 fa07 	bl	800029c <__adddf3>
 8009e8e:	4642      	mov	r2, r8
 8009e90:	464b      	mov	r3, r9
 8009e92:	f7f6 fbb9 	bl	8000608 <__aeabi_dmul>
 8009e96:	a366      	add	r3, pc, #408	; (adr r3, 800a030 <atan+0x2e8>)
 8009e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e9c:	4680      	mov	r8, r0
 8009e9e:	4689      	mov	r9, r1
 8009ea0:	4630      	mov	r0, r6
 8009ea2:	4639      	mov	r1, r7
 8009ea4:	f7f6 fbb0 	bl	8000608 <__aeabi_dmul>
 8009ea8:	a363      	add	r3, pc, #396	; (adr r3, 800a038 <atan+0x2f0>)
 8009eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eae:	f7f6 f9f3 	bl	8000298 <__aeabi_dsub>
 8009eb2:	4632      	mov	r2, r6
 8009eb4:	463b      	mov	r3, r7
 8009eb6:	f7f6 fba7 	bl	8000608 <__aeabi_dmul>
 8009eba:	a361      	add	r3, pc, #388	; (adr r3, 800a040 <atan+0x2f8>)
 8009ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec0:	f7f6 f9ea 	bl	8000298 <__aeabi_dsub>
 8009ec4:	4632      	mov	r2, r6
 8009ec6:	463b      	mov	r3, r7
 8009ec8:	f7f6 fb9e 	bl	8000608 <__aeabi_dmul>
 8009ecc:	a35e      	add	r3, pc, #376	; (adr r3, 800a048 <atan+0x300>)
 8009ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed2:	f7f6 f9e1 	bl	8000298 <__aeabi_dsub>
 8009ed6:	4632      	mov	r2, r6
 8009ed8:	463b      	mov	r3, r7
 8009eda:	f7f6 fb95 	bl	8000608 <__aeabi_dmul>
 8009ede:	a35c      	add	r3, pc, #368	; (adr r3, 800a050 <atan+0x308>)
 8009ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee4:	f7f6 f9d8 	bl	8000298 <__aeabi_dsub>
 8009ee8:	4632      	mov	r2, r6
 8009eea:	463b      	mov	r3, r7
 8009eec:	f7f6 fb8c 	bl	8000608 <__aeabi_dmul>
 8009ef0:	4602      	mov	r2, r0
 8009ef2:	460b      	mov	r3, r1
 8009ef4:	4640      	mov	r0, r8
 8009ef6:	4649      	mov	r1, r9
 8009ef8:	f7f6 f9d0 	bl	800029c <__adddf3>
 8009efc:	4622      	mov	r2, r4
 8009efe:	462b      	mov	r3, r5
 8009f00:	f7f6 fb82 	bl	8000608 <__aeabi_dmul>
 8009f04:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009f08:	4602      	mov	r2, r0
 8009f0a:	460b      	mov	r3, r1
 8009f0c:	d14b      	bne.n	8009fa6 <atan+0x25e>
 8009f0e:	4620      	mov	r0, r4
 8009f10:	4629      	mov	r1, r5
 8009f12:	f7f6 f9c1 	bl	8000298 <__aeabi_dsub>
 8009f16:	e72c      	b.n	8009d72 <atan+0x2a>
 8009f18:	ee10 0a10 	vmov	r0, s0
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	4b53      	ldr	r3, [pc, #332]	; (800a06c <atan+0x324>)
 8009f20:	4629      	mov	r1, r5
 8009f22:	f7f6 f9b9 	bl	8000298 <__aeabi_dsub>
 8009f26:	2200      	movs	r2, #0
 8009f28:	4606      	mov	r6, r0
 8009f2a:	460f      	mov	r7, r1
 8009f2c:	4b4f      	ldr	r3, [pc, #316]	; (800a06c <atan+0x324>)
 8009f2e:	4620      	mov	r0, r4
 8009f30:	4629      	mov	r1, r5
 8009f32:	f7f6 f9b3 	bl	800029c <__adddf3>
 8009f36:	4602      	mov	r2, r0
 8009f38:	460b      	mov	r3, r1
 8009f3a:	4630      	mov	r0, r6
 8009f3c:	4639      	mov	r1, r7
 8009f3e:	f7f6 fc8d 	bl	800085c <__aeabi_ddiv>
 8009f42:	f04f 0a01 	mov.w	sl, #1
 8009f46:	4604      	mov	r4, r0
 8009f48:	460d      	mov	r5, r1
 8009f4a:	e764      	b.n	8009e16 <atan+0xce>
 8009f4c:	4b49      	ldr	r3, [pc, #292]	; (800a074 <atan+0x32c>)
 8009f4e:	429e      	cmp	r6, r3
 8009f50:	dc1d      	bgt.n	8009f8e <atan+0x246>
 8009f52:	ee10 0a10 	vmov	r0, s0
 8009f56:	2200      	movs	r2, #0
 8009f58:	4b47      	ldr	r3, [pc, #284]	; (800a078 <atan+0x330>)
 8009f5a:	4629      	mov	r1, r5
 8009f5c:	f7f6 f99c 	bl	8000298 <__aeabi_dsub>
 8009f60:	2200      	movs	r2, #0
 8009f62:	4606      	mov	r6, r0
 8009f64:	460f      	mov	r7, r1
 8009f66:	4b44      	ldr	r3, [pc, #272]	; (800a078 <atan+0x330>)
 8009f68:	4620      	mov	r0, r4
 8009f6a:	4629      	mov	r1, r5
 8009f6c:	f7f6 fb4c 	bl	8000608 <__aeabi_dmul>
 8009f70:	2200      	movs	r2, #0
 8009f72:	4b3e      	ldr	r3, [pc, #248]	; (800a06c <atan+0x324>)
 8009f74:	f7f6 f992 	bl	800029c <__adddf3>
 8009f78:	4602      	mov	r2, r0
 8009f7a:	460b      	mov	r3, r1
 8009f7c:	4630      	mov	r0, r6
 8009f7e:	4639      	mov	r1, r7
 8009f80:	f7f6 fc6c 	bl	800085c <__aeabi_ddiv>
 8009f84:	f04f 0a02 	mov.w	sl, #2
 8009f88:	4604      	mov	r4, r0
 8009f8a:	460d      	mov	r5, r1
 8009f8c:	e743      	b.n	8009e16 <atan+0xce>
 8009f8e:	462b      	mov	r3, r5
 8009f90:	ee10 2a10 	vmov	r2, s0
 8009f94:	2000      	movs	r0, #0
 8009f96:	4939      	ldr	r1, [pc, #228]	; (800a07c <atan+0x334>)
 8009f98:	f7f6 fc60 	bl	800085c <__aeabi_ddiv>
 8009f9c:	f04f 0a03 	mov.w	sl, #3
 8009fa0:	4604      	mov	r4, r0
 8009fa2:	460d      	mov	r5, r1
 8009fa4:	e737      	b.n	8009e16 <atan+0xce>
 8009fa6:	4b36      	ldr	r3, [pc, #216]	; (800a080 <atan+0x338>)
 8009fa8:	4e36      	ldr	r6, [pc, #216]	; (800a084 <atan+0x33c>)
 8009faa:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8009fae:	4456      	add	r6, sl
 8009fb0:	449a      	add	sl, r3
 8009fb2:	e9da 2300 	ldrd	r2, r3, [sl]
 8009fb6:	f7f6 f96f 	bl	8000298 <__aeabi_dsub>
 8009fba:	4622      	mov	r2, r4
 8009fbc:	462b      	mov	r3, r5
 8009fbe:	f7f6 f96b 	bl	8000298 <__aeabi_dsub>
 8009fc2:	4602      	mov	r2, r0
 8009fc4:	460b      	mov	r3, r1
 8009fc6:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009fca:	f7f6 f965 	bl	8000298 <__aeabi_dsub>
 8009fce:	f1bb 0f00 	cmp.w	fp, #0
 8009fd2:	4604      	mov	r4, r0
 8009fd4:	460d      	mov	r5, r1
 8009fd6:	f6bf aed6 	bge.w	8009d86 <atan+0x3e>
 8009fda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009fde:	461d      	mov	r5, r3
 8009fe0:	e6d1      	b.n	8009d86 <atan+0x3e>
 8009fe2:	a51d      	add	r5, pc, #116	; (adr r5, 800a058 <atan+0x310>)
 8009fe4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009fe8:	e6cd      	b.n	8009d86 <atan+0x3e>
 8009fea:	bf00      	nop
 8009fec:	f3af 8000 	nop.w
 8009ff0:	54442d18 	.word	0x54442d18
 8009ff4:	3ff921fb 	.word	0x3ff921fb
 8009ff8:	8800759c 	.word	0x8800759c
 8009ffc:	7e37e43c 	.word	0x7e37e43c
 800a000:	e322da11 	.word	0xe322da11
 800a004:	3f90ad3a 	.word	0x3f90ad3a
 800a008:	24760deb 	.word	0x24760deb
 800a00c:	3fa97b4b 	.word	0x3fa97b4b
 800a010:	a0d03d51 	.word	0xa0d03d51
 800a014:	3fb10d66 	.word	0x3fb10d66
 800a018:	c54c206e 	.word	0xc54c206e
 800a01c:	3fb745cd 	.word	0x3fb745cd
 800a020:	920083ff 	.word	0x920083ff
 800a024:	3fc24924 	.word	0x3fc24924
 800a028:	5555550d 	.word	0x5555550d
 800a02c:	3fd55555 	.word	0x3fd55555
 800a030:	2c6a6c2f 	.word	0x2c6a6c2f
 800a034:	bfa2b444 	.word	0xbfa2b444
 800a038:	52defd9a 	.word	0x52defd9a
 800a03c:	3fadde2d 	.word	0x3fadde2d
 800a040:	af749a6d 	.word	0xaf749a6d
 800a044:	3fb3b0f2 	.word	0x3fb3b0f2
 800a048:	fe231671 	.word	0xfe231671
 800a04c:	3fbc71c6 	.word	0x3fbc71c6
 800a050:	9998ebc4 	.word	0x9998ebc4
 800a054:	3fc99999 	.word	0x3fc99999
 800a058:	54442d18 	.word	0x54442d18
 800a05c:	bff921fb 	.word	0xbff921fb
 800a060:	440fffff 	.word	0x440fffff
 800a064:	7ff00000 	.word	0x7ff00000
 800a068:	3fdbffff 	.word	0x3fdbffff
 800a06c:	3ff00000 	.word	0x3ff00000
 800a070:	3ff2ffff 	.word	0x3ff2ffff
 800a074:	40037fff 	.word	0x40037fff
 800a078:	3ff80000 	.word	0x3ff80000
 800a07c:	bff00000 	.word	0xbff00000
 800a080:	0800a418 	.word	0x0800a418
 800a084:	0800a3f8 	.word	0x0800a3f8

0800a088 <fabs>:
 800a088:	ec51 0b10 	vmov	r0, r1, d0
 800a08c:	ee10 2a10 	vmov	r2, s0
 800a090:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a094:	ec43 2b10 	vmov	d0, r2, r3
 800a098:	4770      	bx	lr
	...

0800a09c <_init>:
 800a09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a09e:	bf00      	nop
 800a0a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0a2:	bc08      	pop	{r3}
 800a0a4:	469e      	mov	lr, r3
 800a0a6:	4770      	bx	lr

0800a0a8 <_fini>:
 800a0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0aa:	bf00      	nop
 800a0ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0ae:	bc08      	pop	{r3}
 800a0b0:	469e      	mov	lr, r3
 800a0b2:	4770      	bx	lr
